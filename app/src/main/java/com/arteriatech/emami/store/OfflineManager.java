package com.arteriatech.emami.store;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;

import com.arteriatech.mutils.common.OfflineError;
import com.arteriatech.mutils.common.OfflineODataStoreException;
import com.arteriatech.mutils.common.Operation;
import com.arteriatech.mutils.common.UIListener;
import com.arteriatech.mutils.common.UtilConstants;
import com.arteriatech.mutils.common.UtilOfflineManager;
import com.arteriatech.mutils.log.LogManager;
import com.arteriatech.mutils.store.OnlineODataInterface;
import com.arteriatech.mutils.store.OnlineRequestListeners;
import com.arteriatech.emami.appointment.AppointmentBean;
import com.arteriatech.emami.common.Constants;
import com.arteriatech.emami.common.ConstantsUtils;
import com.arteriatech.emami.dbstock.DBStockBean;
import com.arteriatech.emami.dbstock.DMSDivionBean;
import com.arteriatech.emami.distributor.DistributorBean;
import com.arteriatech.emami.expense.ExpenseImageBean;
import com.arteriatech.emami.finance.CompetitorInfoBean;
import com.arteriatech.emami.finance.InvoiceBean;
import com.arteriatech.emami.invoicecreate.invoicecreatesteptwo.BatchBean;
import com.arteriatech.emami.invoicecreate.invoicecreatesteptwo.StockBean;
import com.arteriatech.emami.mbo.BirthdaysBean;
import com.arteriatech.emami.mbo.CPBusinessSet;
import com.arteriatech.emami.mbo.CPPartnerFunctionsBean;
import com.arteriatech.emami.mbo.CPStockSNoBean;
import com.arteriatech.emami.mbo.Config;
import com.arteriatech.emami.mbo.CustomerBean;
import com.arteriatech.emami.mbo.DmsDivQryBean;
import com.arteriatech.emami.mbo.DocumentsBean;
import com.arteriatech.emami.mbo.FeedbackBean;
import com.arteriatech.emami.mbo.FreeMaterialBean;
import com.arteriatech.emami.mbo.InvoiceCreateBean;
import com.arteriatech.emami.mbo.MaterialBatchBean;
import com.arteriatech.emami.mbo.MerchandisingBean;
import com.arteriatech.emami.mbo.MustSellBean;
import com.arteriatech.emami.mbo.MyTargetsBean;
import com.arteriatech.emami.mbo.PricingConditions;
import com.arteriatech.emami.mbo.RemarkReasonBean;
import com.arteriatech.emami.mbo.RoutePlanBean;
import com.arteriatech.emami.mbo.SKUGroupBean;
import com.arteriatech.emami.mbo.SKUGroupItemBean;
import com.arteriatech.emami.mbo.SSOItemBean;
import com.arteriatech.emami.mbo.SchemeBean;
import com.arteriatech.emami.mbo.ValueHelpBean;
import com.arteriatech.emami.mbo.VisitSummaryBean;
import com.arteriatech.emami.msecsales.R;
import com.arteriatech.emami.outletsurvey.OutletSurveyBean;
import com.arteriatech.emami.registration.Configuration;
import com.arteriatech.emami.reports.CollectionHistoryBean;
import com.arteriatech.emami.reports.FOSTargetsActivity;
import com.arteriatech.emami.reports.HelpLineBean;
import com.arteriatech.emami.reports.InvoiceHistoryBean;
import com.arteriatech.emami.reports.MyPerformanceBean;
import com.arteriatech.emami.reports.MyStockBean;
import com.arteriatech.emami.reports.OutstandingBean;
import com.arteriatech.emami.retailerStock.RetailerStockBean;
import com.arteriatech.emami.returnOrder.ReturnOrderBean;
import com.arteriatech.emami.scheme.CPDMSDivisionBean;
import com.arteriatech.emami.scheme.GetSalesOrderListBasedOnScheme;
import com.arteriatech.emami.scheme.SchemeIDBean;
import com.arteriatech.emami.scheme.SchemeItemListBean;
import com.arteriatech.emami.scheme.SchemeListBean;
import com.arteriatech.emami.scheme.SchemeSalesAreaBean;
import com.arteriatech.emami.scheme.SchemeSlabBean;
import com.arteriatech.emami.socreate.SalesOrderReviewActivity1;
import com.arteriatech.emami.visit.VisitActivityBean;
import com.sap.maf.tools.logon.core.LogonCore;
import com.sap.maf.tools.logon.core.LogonCoreContext;
import com.sap.maf.tools.logon.core.LogonCoreException;
import com.sap.maf.tools.logon.logonui.api.LogonUIFacade;
import com.sap.smp.client.httpc.HttpConversationManager;
import com.sap.smp.client.httpc.IManagerConfigurator;
import com.sap.smp.client.odata.ODataDuration;
import com.sap.smp.client.odata.ODataEntity;
import com.sap.smp.client.odata.ODataEntitySet;
import com.sap.smp.client.odata.ODataGuid;
import com.sap.smp.client.odata.ODataPayload;
import com.sap.smp.client.odata.ODataPropMap;
import com.sap.smp.client.odata.ODataProperty;
import com.sap.smp.client.odata.exception.ODataContractViolationException;
import com.sap.smp.client.odata.exception.ODataException;
import com.sap.smp.client.odata.exception.ODataParserException;
import com.sap.smp.client.odata.impl.ODataAnnotationDefaultImpl;
import com.sap.smp.client.odata.impl.ODataEntityDefaultImpl;
import com.sap.smp.client.odata.impl.ODataErrorDefaultImpl;
import com.sap.smp.client.odata.impl.ODataGuidDefaultImpl;
import com.sap.smp.client.odata.impl.ODataPropertyDefaultImpl;
import com.sap.smp.client.odata.impl.ODataUploadMediaDefaultImpl;
import com.sap.smp.client.odata.offline.ODataOfflineStore;
import com.sap.smp.client.odata.offline.ODataOfflineStoreOptions;
import com.sap.smp.client.odata.offline.ODataOfflineStoreState;
import com.sap.smp.client.odata.online.OnlineODataStore;
import com.sap.smp.client.odata.store.ODataDownloadMediaResult;
import com.sap.smp.client.odata.store.ODataDownloadMediaSyncListener;
import com.sap.smp.client.odata.store.ODataRequestChangeSet;
import com.sap.smp.client.odata.store.ODataRequestExecution;
import com.sap.smp.client.odata.store.ODataRequestListener;
import com.sap.smp.client.odata.store.ODataRequestParamBatch;
import com.sap.smp.client.odata.store.ODataRequestParamSingle;
import com.sap.smp.client.odata.store.ODataRequestParamSingle.Mode;
import com.sap.smp.client.odata.store.ODataResponseSingle;
import com.sap.smp.client.odata.store.ODataStore;
import com.sap.smp.client.odata.store.impl.ODataDownloadMediaResultDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestChangeSetDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestParamBatchDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestParamSingleDefaultImpl;
import com.sap.xscript.core.CharBuffer;
import com.sap.xscript.core.StringFunction;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

public class OfflineManager {

    public static final String TAG = OfflineManager.class.getSimpleName();
    public static ODataOfflineStore offlineStore;
    public static ODataOfflineStore offlineStoreMustSell;
    public static ODataOfflineStoreOptions options = null;
    public static ODataOfflineStoreOptions optionsMustSell = null;
    static HashMap<String, String> hmMRPByItemIfQtyAval = new HashMap<>();
    static String SetResourcePath = "";
    private static String storeState;
    private static String mStockItemQry = "";

    public static boolean isOfflineStoreOpen() {
        boolean isOpen = false;
//        if (offlineStore != null && ODataOfflineStoreState.ODataOfflineStoreOpen.name().equals(storeState)) {
        try {
            if (offlineStore != null && ODataOfflineStoreState.ODataOfflineStoreOpen.name().equals(UtilOfflineManager.getStoreState())) {
                isOpen = true;
            }
            return isOpen;
        } catch (Exception e) {
            return isOpen;
        }
    }

    public static String getStoreState() {
        return storeState;
    }

    public static void setStoreState(String state) {
        storeState = state;
    }

    /**
     * Initialize a new offline odata store
     *
     * @param context the application context
     * @return true if it's initialized, false otherwise
     * @throws OfflineODataStoreException
     */
    public static boolean openOfflineStore(Context context, UIListener uiListener) throws OfflineODataStoreException {
        if (!isOfflineStoreOpen()) {
            try {
                //This instantiate the native UDB libraries which are located in the

                ODataOfflineStore.globalInit();
                //Get application endpoint URL
                LogonCoreContext lgCtx = LogonCore.getInstance().getLogonContext();
                String endPointURL = lgCtx.getAppEndPointUrl();
                URL url = new URL(endPointURL);
                // Define the offline store options.
                // Connection parameter and credentials and
                // the application connection id we got at the registration

                options = new ODataOfflineStoreOptions();
                options.storeEncryptionKey = Constants.EncryptKey;
                options.host = url.getHost();
                options.port = String.valueOf(url.getPort());
                options.enableHTTPS = lgCtx.isHttps();
                options.enableRepeatableRequests = true;
                // the serviceRoot is the backend connector name, which is usually the same
                // as the application configuration name in the SMP Management Cockpit
                options.serviceRoot = Configuration.APP_ID;

                //for Relay enable next line
                if (lgCtx.getResourcePath() != null && !lgCtx.getResourcePath().equalsIgnoreCase("")) {
                    options.urlSuffix = lgCtx.getResourcePath() + "/" + lgCtx.getFarmId();
                }

                //The logon configurator uses the information obtained in the registration
                // (i.e endpoint URL, login, etc ) to configure the conversation manager
                IManagerConfigurator configurator =
                        LogonUIFacade.getInstance().getLogonConfigurator(context);
                HttpConversationManager manager = new HttpConversationManager(context);
                configurator.configure(manager);
                options.conversationManager = manager;
                options.storeName = Constants.STORE_NAME;

                options.customHeaders.put(Constants.arteria_dayfilter, Constants.NO_OF_DAYS);
                String[] DEFINGREQARRAY = Constants.getDefinigReq(context);
                for (int incReq = 0; incReq < DEFINGREQARRAY.length; incReq++) {
                    String collectionName = DEFINGREQARRAY[incReq];
                    if (collectionName.contains("?")) {
                        String splitCollName[] = collectionName.split("\\?");
                        collectionName = splitCollName[0];
                    }/*else if(collectionName.contains("(")){
                        String splitCollName[] = collectionName.split("\\(");
                        collectionName = splitCollName[0];
                    }*/

                    if (collectionName.equalsIgnoreCase(Constants.MerchReviewImages) || collectionName.equalsIgnoreCase(Constants.Documents) || collectionName.equalsIgnoreCase(Constants.SchemeCPDocuments) || collectionName.equalsIgnoreCase(Constants.ClaimDocuments)) {
                        options.addDefiningRequest(collectionName, DEFINGREQARRAY[incReq], true);
                    } else {
                        options.addDefiningRequest(collectionName, DEFINGREQARRAY[incReq], false);
                    }

                }

                offlineStore = new ODataOfflineStore(context);
                OfflineStoreListner offlineStoreListner = new OfflineStoreListner(uiListener);
                offlineStore.setOfflineStoreListener(offlineStoreListner);
                //Assign an Offline
                offlineStore.setRequestErrorListener(new OfflineErrorListener());

                offlineStore.openStoreSync(options);
                return true;
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } else {
            return true;
        }
        //END
    }

    /*
     * Closes existing or opened Offline store if it is not null
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     * */
    public static boolean closeOfflineStore() throws OfflineODataStoreException {
        if (isOfflineStoreOpen()) {
            try {
//                OfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
                UtilOfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
                OfflineManager.offlineStore.closeStore();
                return true;
            } catch (ODataException e) {
                LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
                throw new OfflineODataStoreException(e);
            }
        } else {
            return false;
        }
    }

    public static boolean closeOfflineStore(Context context, ODataOfflineStoreOptions options) throws OfflineODataStoreException {
        try {
//                OfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
            UtilOfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
            UtilOfflineManager.closeOfflineStore(context, options, OfflineManager.offlineStore, Constants.PREFS_NAME);
//                if(OfflineManager.offlineStore!=null) {
//                    OfflineManager.offlineStore.closeStore();
//                    OfflineManager.offlineStore.removeStore(context, options);
//                    OfflineManager.offlineStore =null;
//                    SharedPreferences settings = context.getSharedPreferences(Constants.PREFS_NAME,
//                            0);
//                        SharedPreferences.Editor editor = settings.edit();
//                        editor.putBoolean(Constants.isReIntilizeDB, true);
//                        editor.commit();
//                }
            return true;
        } catch (Exception e) {
            LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
            throw new OfflineODataStoreException(e);
        }
    }

    /*
     * refresh offline store data for collections passed as input parameter to this method
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     * */
    public static void refreshStoreSync(Context context, UIListener uiListener, String syncType, String defineReq) throws OfflineODataStoreException {

        if (offlineStore != null) {
            try {
                OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, syncType, defineReq, uiListener);

//                offlineStore.scheduleRefresh(defineReq, refreshListener);
                if (syncType.equals(Constants.Fresh)) {
                    offlineStore.scheduleRefresh(defineReq, refreshListener);
                } else {
                    offlineStore.scheduleRefresh(refreshListener);
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
    }

    /**
     * CreateOperation a new entity in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createAttendance(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createAttendanceEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Attendances,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Attendances),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getBrandListValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];


                    int incVal = 1;
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.BrandID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.BrandDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getOrderReasonValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];


                    int incVal = 1;
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getCategoryListValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialCategoryID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.MaterialCategoryDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getOrderedMaterialItems(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialCategoryID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.MaterialCategoryDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getOrderedMaterialGroups(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static String[][] getOrderedMaterialGroupsTemp(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            HashMap<String, String> mapSKU = new HashMap<>();

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response


                    String skuGrp = "";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
//                        configVal[0][incVal] = (String) property.getValue();
                        skuGrp = (String) property.getValue();
                        property = properties.get(Constants.OrderMaterialGroupDesc);
//                        configVal[1][incVal] = (String) property.getValue();
                        mapSKU.put(skuGrp, (String) property.getValue());
//                        incVal++;
                    }
                    if (!mapSKU.isEmpty()) {
                        configVal = new String[2][mapSKU.size() + 1];
                        configVal[0][0] = "None";
                        configVal[1][0] = "None";
                        Map<String, String> map = Constants.sortByValues(mapSKU);
                        Set set2 = map.entrySet();
                        Iterator iterator2 = set2.iterator();
                        int incVal = 1;
                        while (iterator2.hasNext()) {
                            Map.Entry me2 = (Map.Entry) iterator2.next();
                            configVal[0][incVal] = me2.getKey().toString();
                            configVal[1][incVal] = me2.getValue().toString();
                            ;
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * Update an existing attendance in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void updateAttendance(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateAttendanceEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Attendances), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Resets existing Attendance for today in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void resetAttendanceEntity(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = resetAttendanceEntity(table);

            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Attendances), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * CreateOperation a new entity in the local database for visit
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createVisit(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Visits),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Update an existing visit in the local database for visit
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void updateVisit(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateVisitEntity(table);
            //Send the request to update visit in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Visits), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates Attendance Entity to save in offline store*/
    private static ODataEntity createAttendanceEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ATTENDANCEENTITY);

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.AttendanceGUID))));
/*
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashTable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashTable.get(Constants.AttendanceTypeH1)));

                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashTable.get(Constants.AttendanceTypeH2)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, UtilConstants.convertDateFormat(hashTable.get(Constants.StartDate))));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashTable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashTable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashTable.get(Constants.StartLong)));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

                if (!hashTable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SPGUID))));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Create entity for visit to store in offline store*/
    private static ODataEntity createVisitEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {


                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);
                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));

                if (!hashtable.get(Constants.VisitCatID).equalsIgnoreCase(Constants.str_03)) {
                    if (hashtable.get(Constants.STARTDATE) != "")
                        newEntity.getProperties().put(Constants.STARTDATE,
                                new ODataPropertyDefaultImpl(Constants.STARTDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.STARTDATE))));

                    if (hashtable.get(Constants.STARTTIME) != "")
                        newEntity.getProperties().put(Constants.STARTTIME,
                                new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                    if (hashtable.get(Constants.StartLat) != "")
                        newEntity.getProperties().put(Constants.StartLat,
                                new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));

                    if (hashtable.get(Constants.StartLong) != "")
                        newEntity.getProperties().put(Constants.StartLong,
                                new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));
                }

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                try {
                    if (hashtable.get(Constants.NoOfOutlet) != null) {
                        newEntity.getProperties().put(Constants.NoOfOutlet,
                                new ODataPropertyDefaultImpl(Constants.NoOfOutlet, hashtable.get(Constants.NoOfOutlet)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                if (hashtable.get(Constants.VisitDate) != "")
                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                newEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
                try {
                    if (hashtable.get(Constants.VisitSeq) != null) {
                        newEntity.getProperties().put(Constants.VisitSeq,
                                new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                if (hashtable.get(Constants.VisitCatID) != "")
                    newEntity.getProperties().put(Constants.VisitCatID,
                            new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID).toString()));
/*                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/


                if (hashtable.get(Constants.PlannedDate) != "")
                    newEntity.getProperties().put(Constants.PlannedDate,
                            new ODataPropertyDefaultImpl(Constants.PlannedDate, UtilConstants.convertDateFormat(hashtable.get(Constants.PlannedDate))));

                if (hashtable.get(Constants.PlannedStartTime) != "")
                    newEntity.getProperties().put(Constants.PlannedStartTime,
                            new ODataPropertyDefaultImpl(Constants.PlannedStartTime, hashtable.get(Constants.PlannedStartTime)));
                if (hashtable.get(Constants.PlannedEndTime) != "")
                    newEntity.getProperties().put(Constants.PlannedEndTime,
                            new ODataPropertyDefaultImpl(Constants.PlannedEndTime, hashtable.get(Constants.PlannedEndTime)));
                if (hashtable.get(Constants.Remarks) != "")
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.VisitTypeID,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeID, hashtable.get(Constants.VisitTypeID)));

                newEntity.getProperties().put(Constants.VisitTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeDesc, hashtable.get(Constants.VisitTypeDesc)));


                if (!TextUtils.isEmpty(hashtable.get(Constants.VISITKEY))) {
                    newEntity.setResourcePath(Constants.Visits + "(guid'" + hashtable.get(Constants.VISITKEY) + "')", Constants.Visits + "(guid'" + hashtable.get(Constants.VISITKEY) + "')");
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                try {
                    if (!hashtable.get(Constants.ActualSeq).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.ActualSeq,
                                new ODataPropertyDefaultImpl(Constants.ActualSeq, hashtable.get(Constants.ActualSeq)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!hashtable.get(Constants.DeviationReasonID).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.DeviationReasonID,
                                new ODataPropertyDefaultImpl(Constants.DeviationReasonID, hashtable.get(Constants.DeviationReasonID)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!hashtable.get(Constants.DeviationRemarks).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.DeviationRemarks,
                                new ODataPropertyDefaultImpl(Constants.DeviationRemarks, hashtable.get(Constants.DeviationRemarks)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!hashtable.get(Constants.BeatGUID).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.BeatGUID,
                                new ODataPropertyDefaultImpl(Constants.BeatGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.BeatGUID))));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates Entity to update visit in offline store*/
    private static ODataEntity updateVisitEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {

                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));
                newEntity.getProperties().put(Constants.STARTDATE,
                        new ODataPropertyDefaultImpl(Constants.STARTDATE, hashtable.get(Constants.STARTDATE)));

                newEntity.getProperties().put(Constants.STARTTIME,
                        new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                try {
                    if (hashtable.get(Constants.NoOfOutlet) != null) {
                        newEntity.getProperties().put(Constants.NoOfOutlet,
                                new ODataPropertyDefaultImpl(Constants.NoOfOutlet, hashtable.get(Constants.NoOfOutlet)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    newEntity.getProperties().put(Constants.CPName,
                            new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!hashtable.get(Constants.ENDDATE).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.EndLat,
                            new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                    newEntity.getProperties().put(Constants.EndLong,
                            new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                    newEntity.getProperties().put(Constants.ENDDATE,
                            new ODataPropertyDefaultImpl(Constants.ENDDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.ENDDATE))));

                    newEntity.getProperties().put(Constants.ENDTIME,
                            new ODataPropertyDefaultImpl(Constants.ENDTIME, hashtable.get(Constants.ENDTIME)));

                    try {

                        if (!TextUtils.isEmpty(hashtable.get(Constants.VisitDate) + "")) {
                            newEntity.getProperties().put(Constants.VisitDate,
                                    new ODataPropertyDefaultImpl(Constants.VisitDate, hashtable.get(Constants.VisitDate)));
                        }
                    } catch (Exception e) {
                        if (hashtable.get(Constants.VisitDate) != null) {
                            newEntity.getProperties().put(Constants.VisitDate,
                                    new ODataPropertyDefaultImpl(Constants.VisitDate, hashtable.get(Constants.VisitDate)));
                        }
                    }

//                    if (hashtable.get(Constants.VisitDate)!=null) {
//                        newEntity.getProperties().put(Constants.VisitDate,
//                                new ODataPropertyDefaultImpl(Constants.VisitDate, hashtable.get(Constants.VisitDate)));
//                    }

                    newEntity.getProperties().put(Constants.StatusID,
                            new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                    try {
                        if (hashtable.get(Constants.VisitSeq) != null) {
                            newEntity.getProperties().put(Constants.VisitSeq,
                                    new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //new 28112016
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                    try {
                        newEntity.getProperties().put(Constants.REASON,
                                new ODataPropertyDefaultImpl(Constants.REASON, hashtable.get(Constants.REASON)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        newEntity.getProperties().put(Constants.REASON,
                                new ODataPropertyDefaultImpl(Constants.REASON, hashtable.get(Constants.REASON)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    newEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                }

            /*    newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.VisitCatID,
                        new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                try {
                    if (!hashtable.get(Constants.ActualSeq).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.ActualSeq,
                                new ODataPropertyDefaultImpl(Constants.ActualSeq, hashtable.get(Constants.ActualSeq)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!hashtable.get(Constants.DeviationReasonID).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.DeviationReasonID,
                                new ODataPropertyDefaultImpl(Constants.DeviationReasonID, hashtable.get(Constants.DeviationReasonID)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!hashtable.get(Constants.DeviationRemarks).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.DeviationRemarks,
                                new ODataPropertyDefaultImpl(Constants.DeviationRemarks, hashtable.get(Constants.DeviationRemarks)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (hashtable.get(Constants.BeatGUID) != null) {
                        newEntity.getProperties().put(Constants.BeatGUID,
                                new ODataPropertyDefaultImpl(Constants.BeatGUID, hashtable.get(Constants.BeatGUID)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateAttendanceEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ATTENDANCEENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, hashtable.get(Constants.AttendanceGUID)));
/*
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, hashtable.get(Constants.StartDate)));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.EndDate,
                        new ODataPropertyDefaultImpl(Constants.EndDate, UtilConstants.convertDateFormat(hashtable.get(Constants.EndDate))));
                newEntity.getProperties().put(Constants.EndLat,
                        new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                newEntity.getProperties().put(Constants.EndLong,
                        new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));

                newEntity.getProperties().put(Constants.EndTime,
                        new ODataPropertyDefaultImpl(Constants.EndTime, hashtable.get(Constants.EndTime)));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashtable.get(Constants.AttendanceTypeH1)));
                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashtable.get(Constants.AttendanceTypeH2)));
                newEntity.getProperties().put(Constants.REMARKS,
                        new ODataPropertyDefaultImpl(Constants.REMARKS, hashtable.get(Constants.REMARKS)));


                try {
                    newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates entity to reset attendance in offline store*/
    private static ODataEntity resetAttendanceEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ATTENDANCEENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, hashtable.get(Constants.AttendanceGUID)));
/*
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, hashtable.get(Constants.StartDate)));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.EndDate,
                        new ODataPropertyDefaultImpl(Constants.EndDate, null));
                newEntity.getProperties().put(Constants.EndLat,
                        new ODataPropertyDefaultImpl(Constants.EndLat, null));
                newEntity.getProperties().put(Constants.EndLong,
                        new ODataPropertyDefaultImpl(Constants.EndLong, null));
                newEntity.getProperties().put(Constants.EndTime,
                        new ODataPropertyDefaultImpl(Constants.EndTime, null));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashtable.get(Constants.AttendanceTypeH1)));
                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashtable.get(Constants.AttendanceTypeH2)));
                newEntity.getProperties().put(Constants.REMARKS,
                        new ODataPropertyDefaultImpl(Constants.REMARKS, hashtable.get(Constants.REMARKS)));

                try {
                    newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static void createMerChndisingHeader(Hashtable<String, String> tableHdr, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createMerchndisingHeaderEntity(tableHdr);

            //Send the request to create the new visit in the local database


            offlineStore.scheduleCreateEntity(newEntity, Constants.MerchReviews,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.MerchReviews),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    public static void createMerChndisingItem(Hashtable<String, String> tableItem, Hashtable<String, String> tableHdr, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createMerchndisingItemEntity(tableItem, tableHdr);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.MerchReviewImages));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createMerchndisingHeaderEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity headerEntity = null;
        try {
            if (hashtable != null) {
                // CreateOperation the parent Entity
                headerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.MERCHINDISINGENTITY);
                if (!TextUtils.isEmpty(hashtable.get(Constants.MerchReviewGUID))) {
                    String resourcePath = UtilConstants.getEditResourcePath(Constants.MerchReviews, hashtable.get(Constants.MerchReviewGUID));
                    headerEntity.setResourcePath(resourcePath, resourcePath);
                }

                offlineStore.allocateProperties(headerEntity, ODataStore.PropMode.Keys);

                offlineStore.allocateNavigationProperties(headerEntity);

                headerEntity.getProperties().put(Constants.MerchReviewGUID,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.MerchReviewGUID))));
                headerEntity.getProperties().put(Constants.MerchReviewDate,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewDate, UtilConstants.convertDateFormat(hashtable.get(Constants.MerchReviewDate))));
                headerEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));
                headerEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                headerEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                headerEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                headerEntity.getProperties().put(Constants.MerchReviewLat,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewLat, hashtable.get(Constants.MerchReviewLat)));
                headerEntity.getProperties().put(Constants.MerchReviewLong,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewLong, hashtable.get(Constants.MerchReviewLong)));
                headerEntity.getProperties().put(Constants.MerchReviewType,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewType, hashtable.get(Constants.MerchReviewType)));
                headerEntity.getProperties().put(Constants.MerchReviewTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewTypeDesc, hashtable.get(Constants.MerchReviewTypeDesc)));

            /*    headerEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                headerEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
               /* headerEntity.getProperties().put(Constants.ParentNo,
                        new ODataPropertyDefaultImpl(Constants.ParentNo, hashtable.get(Constants.ParentNo)));*/
                headerEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                headerEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                headerEntity.getProperties().put(Constants.ParentTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeDesc, hashtable.get(Constants.ParentTypeDesc)));


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    headerEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                try {
                    if (!hashtable.get(Constants.RouteGUID).equalsIgnoreCase("")) {
                        headerEntity.getProperties().put(Constants.RouteGUID,
                                new ODataPropertyDefaultImpl(Constants.RouteGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.RouteGUID))));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                headerEntity.getProperties().put(Constants.MerchReviewTime,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewTime, hashtable.get(Constants.MerchReviewTime)));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return headerEntity;

    }

    private static ODataRequestParamSingle createMerchndisingItemEntity(Hashtable<String, String> hashTblItm, Hashtable<String, String> hashtable) throws ODataParserException {
//		ODataEntity itemEntity = null;
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                // CreateOperation the item Entity

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.ImageMimeType));


                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();

                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.MerchReviewImages);
                oDataRequestParamSingle.setCustomTag(Constants.MerchReviews + "(guid'" + hashTblItm.get(Constants.MerchReviewGUID) + "')/" + Constants.MerchReviewImages + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.ImageMimeType));
                createHeaders.put("SLUG", Constants.MerchImageGUID + ":" + hashTblItm.get(Constants.MerchImageGUID).replace("-", "").toUpperCase() + ","
                        + Constants.MerchReviewGUID + ":" + hashTblItm.get(Constants.MerchReviewGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + "");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    /**
     * returns configurations( values for drop down) for attendance
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListAttendance(String qry) throws OfflineODataStoreException {

        String[] configVal[] = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[3][entities.size() + 1];
                    configVal[0][0] = Constants.str_00;
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = Constants.X;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        String propIDVal = (String) property.getValue();
                        configVal[0][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();

                        String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, Constants.PROP_ATTTYP);


                        configVal[2][incVal] = mStrTypeVal;
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[3][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentID);
                        configVal[2][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListWithNone(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        configVal = new String[3][entities.size() + 1];
                        configVal[0][0] = "";
                        configVal[1][0] = Constants.None;
                        configVal[2][0] = "";
                        int incVal = 1;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.ID);
                            configVal[0][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            property = properties.get(Constants.DESCRIPTION);
                            configVal[1][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            property = properties.get(Constants.ParentID);
                            configVal[2][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            incVal++;
                        }
                    } else {
                        configVal = new String[3][1];
                        configVal[0][0] = "";
                        configVal[1][0] = Constants.None;
                        configVal[2][0] = "";
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help(Time Intervals for appointment to display)
     *
     * @throws OfflineODataStoreException
     */
    public static String[] getAppointmentTimeConfigList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configVal[incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help checks for default value(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListWithDefultVal(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        configVal = new String[4][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.ID);
                            configVal[0][incVal] = (String) property.getValue();
                            property = properties.get(Constants.DESCRIPTION);
                            configVal[1][incVal] = (String) property.getValue();
                            property = properties.get(Constants.ParentID);
                            configVal[2][incVal] = (String) property.getValue();
                            property = properties.get(Constants.IsDefault);
                            Boolean boolVal = null;
                            try {
                                boolVal = (Boolean) property.getValue();
                            } catch (Exception e) {
                                boolVal = false;
                            }
                            configVal[3][incVal] = boolVal.toString();
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListWithDefaultValAndNone(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        configVal = new String[5][entities.size() + 1];
                        configVal[0][0] = "";
                        configVal[1][0] = Constants.None;
                        configVal[2][0] = "";
                        configVal[3][0] = Constants.str_false;
                        configVal[4][0] = "";
                        int incVal = 1;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.ID);
                            configVal[0][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            String propIDVal = (String) property.getValue() != null ? (String) property.getValue() : "";
                            property = properties.get(Constants.DESCRIPTION);
                            configVal[1][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                    Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, typeSetVal);
                            configVal[2][incVal] = mStrTypeVal;
                            property = properties.get(Constants.IsDefault);
                            Boolean boolVal = null;
                            try {
                                boolVal = (Boolean) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            configVal[3][incVal] = boolVal.toString();
                            property = properties.get(Constants.ParentID);
                            configVal[4][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getDistributorList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[12][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        distVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CPName);
                        distVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CountryID);
                        distVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CPTypeID);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.SPGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[4][incVal] = mInvoiceGUID.guidAsString36();
                            distVal[8][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.CPGUID);
                        try {

                            distVal[5][incVal] = (String) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.SPNo);
                        distVal[6][incVal] = (String) property.getValue();
                        property = properties.get(Constants.FirstName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPNo);
                        distVal[9][incVal] = (String) property.getValue();
                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        property = properties.get(Constants.LastName);
                        distVal[11][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    /**
     * retuns List os Documents from offline store based on qwery
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<DocumentsBean> getDocuments(String docQuery) throws OfflineODataStoreException {
        ArrayList<DocumentsBean> documentsList = new ArrayList<>();
        if (offlineStore != null) {
            DocumentsBean documentsBean;
            ODataProperty oDataProperty;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setMode(Mode.Read);
                oDataRequestParamSingle.setResourcePath(docQuery);

                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle responseSingle = (ODataResponseSingle) offlineStore.executeRequest(oDataRequestParamSingle);
                //Check if the response is an error
                if (responseSingle.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            responseSingle.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (responseSingle.getPayloadType() == ODataPayload.Type.EntitySet) {

                    ODataEntitySet feed = (ODataEntitySet) responseSingle.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        oDataProperty = properties.get(Constants.DocumentID);
                        documentsBean = new DocumentsBean((String) oDataProperty.getValue());
                        documentsBean.setDocumentID((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentSt);
                        documentsBean.setDocumentStore((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentMimeType);
                        documentsBean.setDocumentMimeType((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.Application);
                        documentsBean.setApplication((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentLink);
                        documentsBean.setDocumentLink((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.DocumentName);
                        documentsBean.setFileName((String) oDataProperty.getValue());
                        documentsBean.setMediaLink(entity.getMediaLink() + "");
                        documentsList.add(documentsBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + responseSingle.getPayloadType().name());
                }
            } catch (Exception listex) {
                listex.printStackTrace();
            }
        }
        return documentsList;
    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerList(String retListQry, String mComingFrom) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        String mStrTimeTakenVal = "";
                        if (!mComingFrom.equalsIgnoreCase("")) {
                            mStrTimeTakenVal = getTimeTaken(Constants.Visits + "?$top=1 &$filter=" + Constants.CPGUID + " eq '"
                                    + mCpGuid.guidAsString32().toUpperCase() + "' " +
                                    "and " + Constants.StartDate + " eq datetime'" + UtilConstants.getNewDate() + "' and " + Constants.ENDDATE + " eq datetime'" + UtilConstants.getNewDate() + "' " +
                                    "and (" + Constants.VisitCatID + " eq '01' or " + Constants.VisitCatID + " eq '02') &$orderby=" + Constants.EndTime + "%20desc ");
                        }


                        if (!mStrTimeTakenVal.equalsIgnoreCase("0:0:0") || mComingFrom.equalsIgnoreCase("")) {

                            retBean.setTimeTaken(mStrTimeTakenVal);
                            property = properties.get(Constants.RetailerName);
                            retBean.setRetailerName((String) property.getValue());
                            property = properties.get(Constants.Address1);
                            retBean.setAddress1((String) property.getValue());
                            property = properties.get(Constants.Address2);
                            retBean.setAddress2((String) property.getValue());
                            property = properties.get(Constants.Address3);
                            retBean.setAddress3((String) property.getValue());
                            property = properties.get(Constants.TownDesc);
                            retBean.setTownDesc((String) property.getValue());

                            property = properties.get(Constants.DistrictDesc);
                            retBean.setDistrictDesc((String) property.getValue());

                            property = properties.get(Constants.Landmark);
                            retBean.setLandMark((String) property.getValue());

                            property = properties.get(Constants.Latitude);
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                retBean.setLatVal(mDecimalLatitude.doubleValue());
                            } else {
                                retBean.setLatVal(0.0);
                            }

                            property = properties.get(Constants.Longitude);
                            BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLongitude != null) {
                                retBean.setLongVal(mDecimalLongitude.doubleValue());
                            } else {
                                retBean.setLongVal(0.0);
                            }

                            property = properties.get(Constants.CityDesc);
                            retBean.setCity((String) property.getValue());

                            property = properties.get(Constants.PostalCode);
                            retBean.setPostalCode((String) property.getValue());

                            property = properties.get(Constants.MobileNo);
                            retBean.setMobileNumber((String) property.getValue());

                            property = properties.get(Constants.CPUID);
                            retBean.setUID((String) property.getValue());

                       /* property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid=null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/

                       /* ArrayList<String> alGetValues = getValueByColumnNames(Constants.CPDMSDivisions+ "?$select=" + Constants.CPTypeDesc + ","+Constants.Group3Desc+" &$filter="
                                +Constants.CPGUID+" eq guid'"+mCpGuid.guidAsString36().toUpperCase()+"'",Constants.CPTypeDesc,Constants.Group3Desc);
                        if(alGetValues!=null && alGetValues.size()>0){
                            try {
                                retBean.setCPTypeDesc(alGetValues.get(0));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            try {
                                retBean.setRetailerCatDesc(alGetValues.get(1));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }*/

                            property = properties.get(Constants.DOB);
                            retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                            property = properties.get(Constants.Anniversary);
                            retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                            property = properties.get(Constants.OwnerName);
                            retBean.setOwnerName((String) property.getValue());

                            retBean.setEditResourceURL(entity.getEditResourcePath());
                            retBean.setIsAddressEnabled(false);
                            retailerList.add(retBean);

                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static ArrayList<CustomerBean> getRetailerListFromRouteSchudle(String retListQry, String mComingFrom, HashMap<String, String> mapCPSeq) throws OfflineODataStoreException {
//        Constants.alTempRouteList.clear();

        ArrayList<CustomerBean> retailerList = new ArrayList<>();
        ArrayList<CustomerBean> tempRetailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        String mStrTimeTakenVal = "";
                        if (!mComingFrom.equalsIgnoreCase("")) {
                            mStrTimeTakenVal = getTimeTaken(Constants.Visits + "?$top=1 &$filter=" + Constants.CPGUID + " eq '"
                                    + mCpGuid.guidAsString32().toUpperCase() + "' " +
                                    "and " + Constants.StartDate + " eq datetime'" + UtilConstants.getNewDate() + "' and " + Constants.ENDDATE + " eq datetime'" + UtilConstants.getNewDate() + "' " +
                                    "and (" + Constants.VisitCatID + " eq '01' or " + Constants.VisitCatID + " eq '02') &$orderby=" + Constants.EndTime + "%20desc ");
                        }


                        if (!mStrTimeTakenVal.equalsIgnoreCase("0:0:0") || mComingFrom.equalsIgnoreCase("")) {

                            retBean.setTimeTaken(mStrTimeTakenVal);
                            property = properties.get(Constants.RetailerName);
                            retBean.setRetailerName((String) property.getValue());
                            property = properties.get(Constants.Address1);
                            retBean.setAddress1((String) property.getValue());
                            property = properties.get(Constants.Address2);
                            retBean.setAddress2((String) property.getValue());
                            property = properties.get(Constants.Address3);
                            retBean.setAddress3((String) property.getValue());
                            property = properties.get(Constants.TownDesc);
                            retBean.setTownDesc((String) property.getValue());

                            property = properties.get(Constants.DistrictDesc);
                            retBean.setDistrictDesc((String) property.getValue());

                            property = properties.get(Constants.Landmark);
                            retBean.setLandMark((String) property.getValue());

                            property = properties.get(Constants.Latitude);
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                retBean.setLatVal(mDecimalLatitude.doubleValue());
                            } else {
                                retBean.setLatVal(0.0);
                            }

                            property = properties.get(Constants.Longitude);
                            BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLongitude != null) {
                                retBean.setLongVal(mDecimalLongitude.doubleValue());
                            } else {
                                retBean.setLongVal(0.0);
                            }

                            property = properties.get(Constants.CityDesc);
                            retBean.setCity((String) property.getValue());

                            property = properties.get(Constants.PostalCode);
                            retBean.setPostalCode((String) property.getValue());

                            property = properties.get(Constants.MobileNo);
                            retBean.setMobileNumber((String) property.getValue());

                            property = properties.get(Constants.CPUID);
                            retBean.setUID((String) property.getValue());


                            property = properties.get(Constants.DOB);
                            retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                            property = properties.get(Constants.Anniversary);
                            retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                            property = properties.get(Constants.OwnerName);
                            retBean.setOwnerName((String) property.getValue());

                            retBean.setEditResourceURL(entity.getEditResourcePath());
                            retBean.setIsAddressEnabled(false);
                            if (mapCPSeq.get(retBean.getCpGuidStringFormat()) != null && !mapCPSeq.get(retBean.getCpGuidStringFormat()).isEmpty() && !mapCPSeq.get(retBean.getCpGuidStringFormat()).equals("0") && !mapCPSeq.get(retBean.getCpGuidStringFormat()).equals("000000")) {
                                try {
                                    retBean.setSeqNo(mapCPSeq.get(retBean.getCpGuidStringFormat()));
                                    retailerList.add(retBean);
                                } catch (Exception e) {
//                                    retBean.setSeqNo("");
                                    tempRetailerList.add(retBean);
                                }
                            } else {
                                retBean.setSeqNo("");
                                tempRetailerList.add(retBean);
                            }

                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (retailerList != null && retailerList.size() > 0) {
            Collections.sort(retailerList, new Comparator<CustomerBean>() {
                public int compare(CustomerBean one, CustomerBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getSeqNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getSeqNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getSeqNo().compareTo(other.getSeqNo());
                    }


                }
            });
        }
//        Constants.alTempRouteList = retailerList;
        retailerList.addAll(tempRetailerList);
        return retailerList;

    }

    public static int getTodayBeatRetailersCount(String retListQry) throws OfflineODataStoreException {

        int retCount = 0;
        ArrayList<CustomerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    retCount = entities.size();
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return retCount;

    }

    /**
     * returns List of Retailer Birthdays from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<BirthdaysBean> getTodayBirthDayList(String todayAnyBirthDayListQry) throws OfflineODataStoreException {

        ArrayList<BirthdaysBean> birthyDayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BirthdaysBean birthdaysBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(todayAnyBirthDayListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        birthdaysBean = new BirthdaysBean();

                        property = properties.get(Constants.CPGUID);
                        try {
                            ODataGuid mCPGUID = (ODataGuid) property.getValue();
                            birthdaysBean.setCPUID(mCPGUID.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.RetailerName);
                        birthdaysBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.OwnerName);
                        birthdaysBean.setOwnerName((String) property.getValue());

                        property = properties.get(Constants.DOB);
                        birthdaysBean.setDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        birthdaysBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        birthdaysBean.setDOBStatus("");
                        birthdaysBean.setAnniversaryStatus("");
                        property = properties.get(Constants.MobileNo);
                        birthdaysBean.setMobileNo((String) property.getValue());

                        birthyDayList.add(birthdaysBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return birthyDayList;

    }

    /**
     * returns latitude and longitude for Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerLatLongValues(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty oDataProperty;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        oDataProperty = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) oDataProperty.getValue());

                        retBean.setCPNo((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) oDataProperty.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            retBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            retBean.setLatVal(0.0);
                        }

                        oDataProperty = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) oDataProperty.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            retBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            retBean.setLongVal(0.0);
                        }

                        oDataProperty = properties.get(Constants.CPGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) oDataProperty.getValue();
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    /**
     * returns List of Collections from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CollectionHistoryBean> getCollectionHeaderDetails(String collectionHeaderQry) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> collectionHeadereList = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(collectionHeaderQry);
                //Send a request to read the Collections from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.CPNo);
                        collectionHistoryBean.setCPNo((String) property.getValue());
                        property = properties.get(Constants.FIPDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        collectionHistoryBean.setFIPDate(convertDateFormat);
                        property = properties.get(Constants.Amount);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.PaymentModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());

                        collectionHeadereList.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return collectionHeadereList;

    }

    /**
     * returns List of Items for collection from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CollectionHistoryBean> getCollectionItemDetails(String collectionItemsQry) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> collectionItemsList = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(collectionItemsQry);
                //Send a request to read the Collection Items from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.ReferenceID);

                        String RefId = (String) property.getValue() != null ? (String) property.getValue() : "";

                        if (RefId.length() > 31) {
                            RefId = RefId.substring(0, 8) + "-" + RefId.substring(8, 12) + "-" + RefId.substring(12, 16) + "-" + RefId.substring(16, 20) + "-" + RefId.substring(20);
                            collectionHistoryBean.setInvoiceNo(getInvoiceNoFromRefId(Constants.SSINVOICES + "?$filter=" + Constants.InvoiceGUID + " eq guid'" + RefId + "'"));
                        } else {
                            collectionHistoryBean.setInvoiceNo((String) property.getValue());
                        }

                        property = properties.get(Constants.FIPItemNo);

                        collectionHistoryBean.setFIPItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());

                        property = properties.get(Constants.PaymetModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());

                        property = properties.get(Constants.ReferenceDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        collectionHistoryBean.setInvoiceDate(convertDateFormat);
                        property = properties.get(Constants.Amount);

                        double mDoubleAmount = 0.0, mDoubleBalAmount = 0.0;
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            mDoubleAmount = mStrAmount.doubleValue();
                            collectionHistoryBean.setInvoiceAmount(mStrAmount.toString());
                        }

                        property = properties.get(Constants.BalanceAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            mDoubleBalAmount = mStrAmount.doubleValue();
                            collectionHistoryBean.setInvoiceBalanceAmount(mStrAmount.toString());
                        }

//                        property = properties.get(Constants.ClearedAmount);
                        property = properties.get(Constants.FIPAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setInvoiceClearedAmount(mStrAmount.toString());
                        }

                        property = properties.get(Constants.ClearedAmount);
                        BigDecimal mStrClearedAmount = null;
                        if (property != null) {
                            mStrClearedAmount = (BigDecimal) property.getValue();
                        }

                        double mDouTotalPaidAmt = 0;
                        try {
//                            mDouTotalPaidAmt = mDoubleAmount - mDoubleBalAmount;
                            mDouTotalPaidAmt = mStrClearedAmount.doubleValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        collectionHistoryBean.setTotalPaidAmount(mDouTotalPaidAmt + "");

                        collectionHistoryBean.setIsDetailEnabled(false);
                        collectionItemsList.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return collectionItemsList;

    }

    /**
     * returns Invoice number for collection reference id from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getInvoiceNoFromRefId(String invNoByRefIdQry) throws OfflineODataStoreException {
        String invNo = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invNoByRefIdQry);
                //Send a request to read the invoice no from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        invNo = (String) (properties.get(Constants.InvoiceNo)).getValue() != null ?
                                (String) (properties.get(Constants.InvoiceNo)).getValue() : "";
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return invNo;
    }

    /**
     * returns Details of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getRetDetails(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerEntity;

    }

    /**
     * returns Visit status for retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitStatusForCustomer(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * returns check for at least one entry in result from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getAtleastOneEntity(String strQry) throws OfflineODataStoreException {

        boolean mAtleastOne = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        return true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mAtleastOne;
    }

    /**
     * returns Authorization data from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<Config> getAuthorizations(Context cntxt) throws OfflineODataStoreException {

        ArrayList<Config> authList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config authBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = Constants.UserProfileAuthSet + "?$filter=Application eq 'MSEC' and AuthOrgTypeID eq '000011' ";
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the AUTHORIZATIONS from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        authBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        authBean.setFeature((String) property.getValue());
                        authList.add(authBean);
                    }
                    SharedPreferences sharedPreferences = cntxt.getSharedPreferences(Constants.PREFS_NAME, 0);
                    SharedPreferences.Editor editor = sharedPreferences.edit();

                    Constants.updateTCodetoSharedPreference(sharedPreferences, editor, authList);


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return authList;

    }

    /**
     * returns Visit status for visit Guid from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getVisitDetailsByKey(ODataGuid visitKey) throws OfflineODataStoreException {

        ODataEntity visitEntity = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            try {
                //Define the resource path
                String resourcePath = Constants.Visits + "(guid'" + visitKey.guidAsString36() + "')";

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Visits from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    visitEntity = oDataEntity;
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitEntity;

    }

    /**
     * returns Attendance guid as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getAttendance(String strQry) throws OfflineODataStoreException {


        String attdVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.AttendanceGUID);
                        attdVal = property.getValue().toString();
                        Constants.MapEntityVal.put(Constants.AttendanceGUID, property.getValue());

                        property = properties.get(Constants.StartDate);
                        Constants.MapEntityVal.put(Constants.StartDate, property.getValue());
                        property = properties.get(Constants.StartTime);
                        Constants.MapEntityVal.put(Constants.StartTime, property.getValue());
                        property = properties.get(Constants.StartLat);
                        Constants.MapEntityVal.put(Constants.StartLat, property.getValue());
                        property = properties.get(Constants.StartLong);
                        Constants.MapEntityVal.put(Constants.StartLong, property.getValue());
                        property = properties.get(Constants.EndDate);
                        Constants.MapEntityVal.put(Constants.EndDate, property.getValue());
                        property = properties.get(Constants.EndLat);
                        Constants.MapEntityVal.put(Constants.EndLat, property.getValue());
                        property = properties.get(Constants.EndLong);
                        Constants.MapEntityVal.put(Constants.EndLong, property.getValue());

                        property = properties.get(Constants.Remarks);
                        Constants.MapEntityVal.put(Constants.Remarks, property.getValue());
                        property = properties.get(Constants.AttendanceTypeH1);
                        Constants.MapEntityVal.put(Constants.AttendanceTypeH1, property.getValue());
                        property = properties.get(Constants.AttendanceTypeH2);
                        Constants.MapEntityVal.put(Constants.AttendanceTypeH2, property.getValue());

                        property = properties.get(Constants.AttendanceGUID);
                        ODataGuid mAttendenceGuid = (ODataGuid) property.getValue();
                        Constants.MapEntityVal.put(Constants.SetResourcePath, Constants.Attendances + "(guid'" + mAttendenceGuid.guidAsString36() + "')");
                        if (entity.getEtag() != null) {
                            Constants.MapEntityVal.put(Constants.Etag, entity.getEtag());
                        }
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return attdVal;
    }

    /**
     * returns Login Name (Sales person Name) from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getLoginName(String strQry) throws OfflineODataStoreException {

        String conctName = "", mstrLastName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.LastName);
                        mstrLastName = property.getValue().toString();
                        conctName = mstrLastName;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return conctName;

    }

    /**
     * returns Sales persons Mobile number from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getSalePersonName(String strQry) throws OfflineODataStoreException {


        String salesPerName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.FirstName);
                        salesPerName = property.getValue().toString();
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesPerName;

    }

    public static ArrayList<String> getSalespersonDetails(String strQry) throws OfflineODataStoreException {
        ArrayList<String> salesPersonArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.FirstName);
                        salesPersonArrayList.add(property.getValue().toString());
                        property = properties.get(Constants.SalesPersonMobileNo);
                        salesPersonArrayList.add(property.getValue().toString());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesPersonArrayList;

    }

    /**
     * returns currency for sales person as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getCurrency(String strQry) throws OfflineODataStoreException {

        String currencyVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the currency from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.Currency);
                        currencyVal = property.getValue().toString();
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return currencyVal;

    }

    /**
     * returns beat name for retailes as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getBeatNameForRetailer(String strQry) throws OfflineODataStoreException {

        ODataGuid routseScheduleGuid;
        String beatName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the currency from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.RouteSchGUID);
                        routseScheduleGuid = (ODataGuid) property.getValue();

                        if (!routseScheduleGuid.equals("")) {

                            String query = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + routseScheduleGuid.guidAsString36().toUpperCase() + "'and " + Constants.StatusID + " eq '01'";
                            beatName = getBeatUsingRouteScheduleGuid(query);
                        }

                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return beatName;

    }

    public static String getBeatUsingRouteScheduleGuid(String strQry) throws OfflineODataStoreException {

        String beatName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the currency from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.Description);
                        beatName = property.getValue().toString();


                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return beatName;

    }

    /**
     * returns Appointment details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<AppointmentBean> getAppointmentList(String strQry) throws OfflineODataStoreException {

        ArrayList<AppointmentBean> appointmentList = new ArrayList<AppointmentBean>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            AppointmentBean appointment;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {

                        appointment = new AppointmentBean();
                        properties = entity.getProperties();

						/*property = properties.get(Constants.VISITKEY);
                        appointment.setVisitGUID((String)property.getValue());*/
                        property = properties.get(Constants.PlannedDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                        appointment.setPlannedDate(convertDateFormat);
                        property = properties.get(Constants.PlannedStartTime);
                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setPlannedStartTime(oDataDuration.toString());
                        property = properties.get(Constants.PlannedEndTime);

                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setPlannedEndTime(oDataDuration.toString());
                        property = properties.get(Constants.VisitTypeDesc);
                        appointment.setVisitTypeDesc((String) property.getValue());
                        property = properties.get(Constants.CPGUID);
                        appointment.setCPGUID((String) property.getValue());
                    /*	property = properties.get(Constants.VISIT_TYPE);
                        appointment.setActivityType((String)property.getValue());*/
                        appointmentList.add(appointment);
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return appointmentList;

    }

    /**
     * returns Appointment details for Alerts from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<BirthdaysBean> getAppointmentListForAlert(String strQry) throws OfflineODataStoreException {

        ArrayList<BirthdaysBean> appointmentList = new ArrayList<>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BirthdaysBean appointment;
            ODataProperty property, retProperty;
            ODataPropMap properties, retProperties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {

                        appointment = new BirthdaysBean();

                        appointment.setAppointmentAlert(true);
                        properties = entity.getProperties();


                        property = properties.get(Constants.PlannedDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                        appointment.setAppointMentDate(convertDateFormat);
                        property = properties.get(Constants.PlannedStartTime);
                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setAppointmentTime(oDataDuration.toString());

                        property = properties.get(Constants.PlannedEndTime);
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setAppointmentEndTime(oDataDuration.toString());


                        property = properties.get(Constants.VisitTypeDesc);
                        String visitTypeDesc = (String) property.getValue() != null ? (String) property.getValue() : "";

                        appointment.setAppointmentType(visitTypeDesc);

                        property = properties.get(Constants.CPGUID);
                        String cpGUID32 = (String) property.getValue();
                        String cpGUID36 = Constants.convertStrGUID32to36(cpGUID32.toUpperCase());
                        appointment.setCPUID(cpGUID36);

                        String cpGuidQry = Constants.ChannelPartners + "(guid'" + cpGUID36 + "') ";
                        ODataEntity retilerEntity = OfflineManager.getRetDetails(cpGuidQry);
                        retProperties = retilerEntity.getProperties();
                        retProperty = retProperties.get(Constants.RetailerName);
                        appointment.setRetailerName((String) retProperty.getValue());

                        retProperty = retProperties.get(Constants.OwnerName);
                        appointment.setOwnerName((String) retProperty.getValue());

                        retProperty = retProperties.get(Constants.MobileNo);
                        appointment.setMobileNo((String) retProperty.getValue());

                        appointment.setAppointmentStatus("");

                        appointmentList.add(appointment);
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return appointmentList;

    }

    /**
     * returns Visit details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataGuid getVisitDetails(String strQry) throws OfflineODataStoreException {

        ODataGuid attdVal = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.VISITKEY);
                        attdVal = (ODataGuid) property.getValue();
                        Constants.MapEntityVal.put(Constants.VISITKEY, property.getValue());
                        property = properties.get(Constants.STARTDATE);
                        Constants.MapEntityVal.put(Constants.STARTDATE, property.getValue());
                        property = properties.get(Constants.STARTTIME);
                        Constants.MapEntityVal.put(Constants.STARTTIME, property.getValue());
                        property = properties.get(Constants.StartLat);
                        Constants.MapEntityVal.put(Constants.StartLat, property.getValue());
                        property = properties.get(Constants.StartLong);
                        Constants.MapEntityVal.put(Constants.StartLong, property.getValue());
                        property = properties.get(Constants.ENDDATE);
                        Constants.MapEntityVal.put(Constants.ENDDATE, property.getValue());
                        property = properties.get(Constants.EndLat);
                        Constants.MapEntityVal.put(Constants.EndLat, property.getValue());
                        property = properties.get(Constants.EndLong);
                        Constants.MapEntityVal.put(Constants.EndLong, property.getValue());
                        property = properties.get(Constants.CPNo);
                        Constants.MapEntityVal.put(Constants.CPNo, property.getValue());
                        property = properties.get(Constants.CPGUID);
                        Constants.MapEntityVal.put(Constants.CPGUID, property.getValue());
                        try {
                            property = properties.get(Constants.VisitSeq);
                            Constants.MapEntityVal.put(Constants.VisitSeq, property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        if (property.getValue().toString() != null) {
                            String guidValue = property.getValue().toString();
                            String mStrAddDashSymbol = CharBuffer.join9(StringFunction.substring(guidValue, 0, 8), "-", StringFunction.substring(guidValue, 8, 12), "-", StringFunction.substring(guidValue, 12, 16), "-", StringFunction.substring(guidValue, 16, 20), "-", StringFunction.substring(guidValue, 20, 32));

                            Constants.MapEntityVal.put(Constants.OtherCustGuid, mStrAddDashSymbol);
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return attdVal;

    }

    /**
     * returns List of invoices from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceHistoryBean> getInvoiceHistoryList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceHistoryBean> alInvoiceHis = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceHisBean = new InvoiceHistoryBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            invoiceHisBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                            invoiceHisBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                invoiceHisBean.setInvoiceAmount(mStrAmount.toString());
                            }

                            property = properties.get(Constants.CollectionAmount);

                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collamt = mStrAmount.doubleValue();
                                invoiceHisBean.setCollectionAmount(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Currency);
                            invoiceHisBean.setCurrency((String) property.getValue());

                            property = properties.get(Constants.InvoiceGUID);
                            String mStrInvoiceGUID32 = "";
                            try {
                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                                invoiceHisBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            invoiceHisBean.setDeviceNo("");
                            invoiceHisBean.setDeviceStatus("");

                            property = properties.get(Constants.SoldToID);
                            String soldTOID = (String) property.getValue();


                            try {
                                devcollamt = getDeviceCollAmt(context, soldTOID, mStrInvoiceGUID32);
                                invoiceHisBean.setDevCollAmount(devcollamt + "");
                            } catch (Exception e) {
                                devcollamt = 0.0;
                                invoiceHisBean.setDevCollAmount("0.0");
                            }


                            double outAmt = netAmount - (collamt + devcollamt);

                            if (status.equalsIgnoreCase("")) {
                                if (devcollamt > 0) {
                                    if (outAmt >= netAmount) {
                                        invoiceHisBean.setInvoiceStatus("01");
                                    } else if (outAmt <= 0) {
                                        invoiceHisBean.setInvoiceStatus("03");
                                    } else if (outAmt < netAmount) {
                                        invoiceHisBean.setInvoiceStatus("02");
                                    }

                                } else {
                                    property = properties.get(Constants.PaymentStatusID);
                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());

                                }

                            } else {
                                property = properties.get(Constants.PaymentStatusID);
                                invoiceHisBean.setInvoiceStatus((String) property.getValue());

                            }

                            alInvoiceHis.add(invoiceHisBean);
                        }

                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceHistoryBean>() {
                public int compare(InvoiceHistoryBean one, InvoiceHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }

    /**
     * returns List of Outstanding Invoices from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<OutstandingBean> getOutstandingList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstanding = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Outstanding invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            outstandingBean = new OutstandingBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            outstandingBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                            outstandingBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {


                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                outstandingBean.setInvoiceAmount(mStrAmount.toString());
                            }

                            property = properties.get(Constants.CollectionAmount);

                            if (property != null) {


                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collamt = mStrAmount.doubleValue();
                                outstandingBean.setCollectionAmount(mStrAmount.toString());
                            }
                            property = properties.get(Constants.PaymentStatusID);
                            outstandingBean.setInvoiceStatus((String) property.getValue());

                            property = properties.get(Constants.Currency);
                            outstandingBean.setCurrency((String) property.getValue());

                            property = properties.get(Constants.InvoiceGUID);
                            String mStrInvoiceGUID32 = "";
                            try {
                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                                outstandingBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.SoldToID);
                            String soldTOID = (String) property.getValue();


                            try {
                                devcollamt = getDeviceCollAmt(context, soldTOID, mStrInvoiceGUID32);
                                outstandingBean.setDevCollAmount(devcollamt + "");
                            } catch (Exception e) {
                                devcollamt = 0.0;
                                outstandingBean.setDevCollAmount("0.0");
                            }

                            outstandingBean.setDeviceNo("");
                            outstandingBean.setDeviceStatus("");


                            double outAmt = netAmount - (collamt + devcollamt);

                            if (outAmt >= netAmount) {
                                alOutstanding.add(outstandingBean);

                            } else if (outAmt <= 0) {


                            } else if (outAmt > 0 && outAmt < netAmount) {
                                alOutstanding.add(outstandingBean);

                            }
                        }
                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alOutstanding != null && alOutstanding.size() > 0) {
            Collections.sort(alOutstanding, new Comparator<OutstandingBean>() {
                public int compare(OutstandingBean one, OutstandingBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }
        return alOutstanding;
    }

    /**
     * returns List of invoices from device (Data Vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceHistoryBean> getDevInvoiceHistoryList(Context context, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceHistoryBean> alInvoiceHis = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            try {

                Set<String> set = new HashSet<>();
                SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
                set = sharedPreferences.getStringSet(Constants.SSInvoices, null);
                if (set != null && !set.isEmpty()) {
                    Iterator itr = set.iterator();
                    while (itr.hasNext()) {
                        String store = null, deviceNo = "";
                        try {
                            deviceNo = itr.next().toString();
                            store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                        } catch (LogonCoreException e) {
                            e.printStackTrace();
                        }
                        try {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoices)
                                    && fetchJsonHeaderObject.getString(Constants.SoldToID).equalsIgnoreCase(mStrCPGUID.toUpperCase())) {
                                invoiceHisBean = new InvoiceHistoryBean();
                                invoiceHisBean.setDeviceStatus(Constants.X);
                                invoiceHisBean.setDeviceNo(deviceNo);
                                invoiceHisBean.setCpGuid(mStrCPGUID.toUpperCase());

                                invoiceHisBean.setInvoiceNo(fetchJsonHeaderObject.getString(Constants.InvoiceNo) != null ? fetchJsonHeaderObject.getString(Constants.InvoiceNo) : "");
                                invoiceHisBean.setInvoiceStatus("5");
                                invoiceHisBean.setInvoiceAmount(fetchJsonHeaderObject.getString(Constants.NetAmount));
                                invoiceHisBean.setInvoiceDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.InvoiceDate)));
                                invoiceHisBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));
                                invoiceHisBean.setInvoiceGuid(fetchJsonHeaderObject.getString(Constants.InvoiceGUID));
                                alInvoiceHis.add(invoiceHisBean);
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alInvoiceHis;

    }

    /**
     * returns List of Collections from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<CollectionHistoryBean> getCollectionHistoryList(String collectionListQry, Context context, String mStrCpGuid) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> alCollHistory = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(collectionListQry);
                //Send a request to read the Collections from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());


                        property = properties.get(Constants.FIPDocNo);
                        collectionHistoryBean.setFIPDocNo((String) property.getValue());
                        property = properties.get(Constants.FIPDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        collectionHistoryBean.setFIPDate(convertDateFormat);
                        property = properties.get(Constants.Amount);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.PaymentModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());


                        property = properties.get(Constants.FIPGUID);
                        ODataGuid mFIPGUID = null;
                        try {
                            mFIPGUID = (ODataGuid) property.getValue();
                            collectionHistoryBean.setFIPGUID("guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String ReferenceTypeDesc = getValueByColumnName(Constants.FinancialPostingItemDetails +
                                "?$select=" + Constants.ReferenceTypeDesc + " &$filter = " +
                                Constants.FIPGUID + " eq guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'", Constants.ReferenceTypeDesc);

                        collectionHistoryBean.setReferenceTypeDesc(ReferenceTypeDesc);
                        collectionHistoryBean.setDeviceStatus("");
                        collectionHistoryBean.setDeviceNo("");
                        alCollHistory.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alCollHistory != null && alCollHistory.size() > 0) {
            Collections.sort(alCollHistory, new Comparator<CollectionHistoryBean>() {
                public int compare(CollectionHistoryBean one, CollectionHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getFIPDocNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getFIPDocNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getFIPDocNo().compareTo(one.getFIPDocNo());
                    }
                }
            });

        }

        return alCollHistory;
    }

    /**
     * returns List of Collections Device(Data Vault)
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CollectionHistoryBean> getDevCollHisList(Context context, String mStrCpGuid) throws OfflineODataStoreException {
        CollectionHistoryBean collectionHistoryBean;
        ArrayList<CollectionHistoryBean> alCollHistory = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.CollList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                } catch (LogonCoreException e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))) {
                        collectionHistoryBean = new CollectionHistoryBean();
                        collectionHistoryBean.setDeviceStatus(Constants.X);
                        collectionHistoryBean.setDeviceNo(deviceNo);
                        collectionHistoryBean.setFIPDocNo(fetchJsonHeaderObject.getString(Constants.FIPDocNo) != null ? fetchJsonHeaderObject.getString(Constants.FIPDocNo) : "");

                        collectionHistoryBean.setInstrumentNo(fetchJsonHeaderObject.getString(Constants.InstrumentNo));
                        collectionHistoryBean.setFIPDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.FIPDate)));
                        collectionHistoryBean.setAmount(fetchJsonHeaderObject.getString(Constants.Amount));
                        collectionHistoryBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));
                        collectionHistoryBean.setFIPGUID(fetchJsonHeaderObject.getString(Constants.FIPGUID));
                        collectionHistoryBean.setPaymentModeDesc(fetchJsonHeaderObject.getString(Constants.PaymentModeDesc));
                        collectionHistoryBean.setReferenceTypeDesc(fetchJsonHeaderObject.getString(Constants.ReferenceTypeDesc));
                        collectionHistoryBean.setIsDetailEnabled(false);
                        alCollHistory.add(collectionHistoryBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return alCollHistory;

    }

    /**
     * Get the conflict errors registered in the ErrorArchive
     *
     * @return List of Errors
     * @throws OfflineODataStoreException
     */
    public static List<OfflineError> getErrorArchive() throws OfflineODataStoreException {
        ArrayList<OfflineError> errorList = new ArrayList<OfflineError>();
        if (offlineStore != null) {
            OfflineError offlineError;
            ODataProperty property;
            ODataPropMap properties = null;
            try {
                String resourcePath = Constants.ERROR_ARCHIVE_COLLECTION;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl) response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (int k = entities.size() - 1; k >= 0; k--) {
                        ODataEntity entity = entities.get(k);
                        properties = entity.getProperties();
                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_MESSAGE);
                        String mStrGetMsg = (String) property.getValue();
                        String errorMsg = "";
                        try {
                            JSONObject jsonObject = new JSONObject(mStrGetMsg);
                            JSONObject errorJson = (JSONObject) jsonObject.get(Constants.error);
                            JSONObject errorMsgJson = (JSONObject) errorJson.get(Constants.message);
                            errorMsg = (String) errorMsgJson.get(Constants.value);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_REQUEST_URL);
                        String requestURL = (String) property.getValue();
                        String repalceString = "";
                        if (requestURL != null && !requestURL.equalsIgnoreCase("")) {
                            if (requestURL.indexOf("/") != -1) {
                                repalceString = requestURL.replace("/", "");
                            } else {
                                repalceString = requestURL;
                            }
                        }
                        String errMsg = null;
                        try {
                            errMsg = errorMsg.equalsIgnoreCase("") ? mStrGetMsg : errorMsg;
                        } catch (Exception e) {
                            errMsg = "";
                            e.printStackTrace();
                        }
                        LogManager.writeLogError(repalceString + " : " + errMsg);

                        if (repalceString.contains("guid")) {
                            try {

                                String requiredString = "";
                                requiredString = repalceString.replace(repalceString.substring(repalceString.indexOf("("), repalceString.length()), "");
                                Constants.AL_ERROR_MSG.add(requiredString + " : " + errMsg);
                                Constants.Entity_Set.add(requiredString);
                            } catch (Exception e) {
                                Constants.Entity_Set.add(repalceString);
                                Constants.AL_ERROR_MSG.add(repalceString + " : " + errMsg);
                            }
                        } else {
                            Constants.AL_ERROR_MSG.add(repalceString + " : " + errMsg);
                        }

                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_MESSAGE);
                        offlineError = new OfflineError((String) property.getValue());
                        offlineError.setEditResourcePath(entity.getEditResourcePath());
                        deleteErrorArchiveEntity(entity);
                        Log.d(Constants.error_txt1, Constants.error_archive_called_txt);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return errorList;
    }

    /**
     * Delete error archive on offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void deleteErrorArchiveEntity(ODataEntity oDataEntity) throws OfflineODataStoreException {
        //BEGIN
        if (offlineStore == null) return;
        try {
            //Get Edit resource path
            ODataPropMap properties = null;
            properties = oDataEntity.getProperties();
            OfflineRequestListener offlineRequestListener = new OfflineRequestListener(
                    Operation.DeleteErrorArchive.getValue(), (String) properties.get(Constants.ERROR_ARCHIVE_ENTRY_REQUEST_METHOD).getValue());
            //Delete the selected error from the ErrorArchive
            offlineStore.executeDeleteEntity(oDataEntity,
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Flush request queue for collection on offline request DB
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void flushQueuedRequests(UIListener uiListener, String collection) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineFlushListener flushListener = new OfflineFlushListener(uiListener, collection);
            //Assign an Offline Error Archive
            offlineStore.setRequestErrorListener(new OfflineErrorListener());

            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Flush request queue on offline request DB
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void flushQueuedRequests(UIListener uiListener) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineFlushListener flushListener = new OfflineFlushListener(uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Refresh offline db(store) for selected collection
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void refreshRequests(Context context, String collName, UIListener uiListener) throws
            OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a refresh operation
            OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, Constants.Fresh, collName, uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleRefresh(collName, refreshListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Returns List of Invoices based on retailerID and query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceBean> getInvoices(String InvListQry, String mStrBundleCPGUID, String mStrBundleRetID, Context context) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> invoiceList = new ArrayList<InvoiceBean>();
        InvoiceBean invoiceBean;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(InvListQry);
                //Send a request to read the Invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        invoiceBean = new InvoiceBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ShipToName);
                        property = properties.get(Constants.InvoiceNo);
                        String invNo = (String) property.getValue();
                        invoiceBean.setInvoiceNo(invNo);

                        property = properties.get(Constants.Currency);
                        invoiceBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.InvoiceGUID);
                        String mStrInvGuid = "";

                        try {
                            ODataGuid mInvGUID = (ODataGuid) property.getValue();
                            mStrInvGuid = mInvGUID.guidAsString32();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceGUID(mStrInvGuid);

                        property = properties.get(Constants.NetAmount);
                        String invAmtStr = "0";
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invAmtStr = mStrAmount.toString();
                        }


                        property = properties.get(Constants.CollectionAmount);
                        String collAmtStr = "0";
                        if (property != null) {
                            try {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collAmtStr = mStrAmount.toString();
                            } catch (Exception e) {
                                collAmtStr = "0";
                            }
                        }

//						String mStrCollAmount= getInvCollectedAmount(Constants.FinancialPostings
//								+ "?$filter=" + Constants.CPNo + " eq '" + mStrBundleRetID + "' ",mStrInvGuid.toUpperCase());
                        String mStrPendingAmount = "0";
                        try {
                            //TODO logic changed 22092016 (column name is miss matched retilerNo is name property)
                            double doublePenAmt = Double.parseDouble(invAmtStr) - (Double.parseDouble(collAmtStr) + getDeviceCollAmt(context, mStrBundleRetID, mStrInvGuid.toUpperCase()));
                            mStrPendingAmount = doublePenAmt + "";
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceOutstanding(mStrPendingAmount);
                        invoiceBean.setItemSelected(false);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setInvoiceAmount(invAmtStr);
                        invoiceBean.setDeviceInvStatus("");


                        invoiceBean.setCollectionAmount(collAmtStr);

                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (invoiceList != null && invoiceList.size() > 0) {
            Collections.sort(invoiceList, new Comparator<InvoiceBean>() {
                public int compare(InvoiceBean one, InvoiceBean other) {
                    Integer i1 = null;
                    Integer i2 = null;
                    try {
                        i1 = Integer.parseInt(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Integer.parseInt(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getInvoiceNo().compareTo(other.getInvoiceNo());
                    }
                }
            });
        }

        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.InvList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                } catch (LogonCoreException e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice) && fetchJsonHeaderObject.getString(Constants.SoldToID).equalsIgnoreCase(mStrBundleRetID)) {
                        invoiceBean = new InvoiceBean();
                        invoiceBean.setInvoiceNo(fetchJsonHeaderObject.getString(Constants.InvoiceNo) != null ? fetchJsonHeaderObject.getString(Constants.InvoiceNo) : "");
                        invoiceBean.setInvoiceGUID(fetchJsonHeaderObject.getString(Constants.InvoiceGUID));
                        invoiceBean.setInvoiceAmount(fetchJsonHeaderObject.getString(Constants.NetAmount));
                        String mStrPendingAmount = "0";
                        try {
                            double doublePenAmt = Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetAmount)) - (getDeviceCollAmt(context, fetchJsonHeaderObject.getString(Constants.SoldToID),
                                    fetchJsonHeaderObject.getString(Constants.InvoiceGUID).replace("-", "").toUpperCase()));
                            mStrPendingAmount = doublePenAmt + "";
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }
                        invoiceBean.setInvoiceOutstanding(mStrPendingAmount);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setDeviceInvStatus(Constants.X);
                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }

        return invoiceList;

    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceCollAmt(Context context, String cpNO, String refID) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.CollList, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ItemsText);

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                if (refID.equalsIgnoreCase(singleRow.get(Constants.ReferenceID))) {
                                    mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(singleRow.get(Constants.FIPAmount));
                                }

                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceCollAmt(Context context, String cpNO) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.CollList, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)
                                && fetchJsonHeaderObject.getString(Constants.FIPDocType).equalsIgnoreCase("01")) {
                            mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.Amount));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    public static double getAdvnceAmtFromCP(String mCPQry, String mStrOpenAdvanceAmt) {
        double mDouAdvAmtFromCP = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mCPQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            try {
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(mStrOpenAdvanceAmt);
                        try {
                            BigDecimal mBigDecVal = (BigDecimal) property.getValue();
                            mDouAdvAmtFromCP = mBigDecVal.doubleValue();
                        } catch (Exception e) {
                            mDouAdvAmtFromCP = 0.0;
                        }

                    }
                }
            } catch (Exception e) {
                mDouAdvAmtFromCP = 0.0;
            }

        }
        return mDouAdvAmtFromCP;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceAdvAmtOrAdjustAmt(Context context, String cpNO, String mColRefTypeID) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.CollList, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)
                                && fetchJsonHeaderObject.getString(Constants.FIPDocType).equalsIgnoreCase(mColRefTypeID)) {
                            mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.Amount));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    /**
     * returns Invoice details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<InvoiceHistoryBean> getInvoiceHistoryDetails(String invQry) throws OfflineODataStoreException {

        ArrayList<InvoiceHistoryBean> alInvoiceHisDetails = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invQry);
                //Send a request to read the Invoice Details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        invoiceHisBean = new InvoiceHistoryBean();

                        property = properties.get(Constants.InvoiceHisMatNo);
                        invoiceHisBean.setMatCode((String) property.getValue());
                        property = properties.get(Constants.InvoiceHisMatDesc);
                        invoiceHisBean.setMatDesc((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        invoiceHisBean.setItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invoiceHisBean.setInvoiceAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.InvoiceHisQty);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        invoiceHisBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            invoiceHisBean.setInvQty(trimQtyDecimalPlace(qty));
                        else
                            invoiceHisBean.setInvQty(qty);

                        invoiceHisBean.setIsDetailEnabled(false);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        invoiceHisBean.setOrderMaterialGroup(String.valueOf(property.getValue()));

                        alInvoiceHisDetails.add(invoiceHisBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException
                        (e)
                        ;
            }
        }

        if (alInvoiceHisDetails != null && alInvoiceHisDetails.size() > 0) {
            Collections.sort(alInvoiceHisDetails, new Comparator<InvoiceHistoryBean>() {
                public int compare(InvoiceHistoryBean one, InvoiceHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getItemNo().compareTo(other.getItemNo());
                    }
                }
            });
        }
        return alInvoiceHisDetails;
    }

    /**
     * returns Outstanding details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<OutstandingBean> getOutstandingDetails(String outstandingQry) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstandingDetails = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(outstandingQry);
                //Send a request to read the Outstandin Details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        outstandingBean = new OutstandingBean();

                        property = properties.get(Constants.InvoiceHisMatNo);
                        outstandingBean.setMatCode((String) property.getValue());
                        property = properties.get(Constants.InvoiceHisMatDesc);
                        outstandingBean.setMatDesc((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        outstandingBean.setItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        outstandingBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            outstandingBean.setInvoiceAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.InvoiceHisQty);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        outstandingBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            outstandingBean.setInvQty(trimQtyDecimalPlace(qty));
                        else
                            outstandingBean.setInvQty(qty);

                        outstandingBean.setIsDetailEnabled(false);
                        property = properties.get(Constants.OrderMatGrpDesc);
                        outstandingBean.setOrderMatGrpDesc(String.valueOf(property.getValue()));

                        alOutstandingDetails.add(outstandingBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alOutstandingDetails != null && alOutstandingDetails.size() > 0) {
            Collections.sort(alOutstandingDetails, new Comparator<OutstandingBean>() {
                public int compare(OutstandingBean one, OutstandingBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getItemNo().compareTo(other.getItemNo());
                    }
                }
            });

        }
        return alOutstandingDetails;
    }

    /**
     * Create a new entity for VisitActivities in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createVisitActivity(Hashtable<String, String> hashtable) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitActivityEntity(hashtable);

            offlineStore.executeCreateEntity(newEntity, Constants.VisitActivities, null);

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Creates a entity to start new visit in the local database
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createVisitActivityEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITACTIVITYENTITY);

                newEntity.getProperties().put(Constants.VisitActivityGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitActivityGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VisitActivityGUID))));
                newEntity.getProperties().put(Constants.ActivityType,
                        new ODataPropertyDefaultImpl(Constants.ActivityType, hashtable.get(Constants.ActivityType)));
                newEntity.getProperties().put(Constants.ActivityTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ActivityTypeDesc, hashtable.get(Constants.ActivityTypeDesc)));
          /*      newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                newEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                newEntity.getProperties().put(Constants.VisitGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VisitGUID))));
                newEntity.getProperties().put(Constants.ActivityRefID,
                        new ODataPropertyDefaultImpl(Constants.ActivityRefID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ActivityRefID))));


                try {
                    newEntity.getProperties().put(Constants.STARTTIME,
                            new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.StartTime)));

                    newEntity.getProperties().put(Constants.EndTime,
                            new ODataPropertyDefaultImpl(Constants.EndTime, hashtable.get(Constants.EndTime)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!TextUtils.isEmpty(hashtable.get(Constants.VisitActivityGUID))) {
                    newEntity.setResourcePath(Constants.VisitActivities + "(guid'" + hashtable.get(Constants.VisitActivityGUID) + "')", Constants.VisitActivities + "(guid'" + hashtable.get(Constants.VisitActivityGUID) + "')");
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Returns Monthly target sum for sales person based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getTotalSumByCondition(String monthTargetQry, String columnValue) throws OfflineODataStoreException {

        BigDecimal monthTargetVal = null;
        double mDoubleTargetVal = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(monthTargetQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnValue);
                        Double mDobAmount = 0.0;
                        if (property != null) {
                            try {
                                monthTargetVal = (BigDecimal) property.getValue();

                                mDobAmount = monthTargetVal.doubleValue();
                            } catch (Exception e) {
                                mDobAmount = 0.0;
                                e.printStackTrace();
                            }

                        }
                        if (mDobAmount.isNaN() || mDobAmount.isInfinite()) {
                            mDobAmount = 0.0;
                        }

                        mDoubleTargetVal = mDoubleTargetVal + mDobAmount;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return mDoubleTargetVal + "";

    }

    /**
     * Returns VisitAcitivityBean object from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static VisitActivityBean getVisitActivityGuid(String visitActRefIDQry) throws OfflineODataStoreException {
        VisitActivityBean visitActivityBean = new VisitActivityBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(visitActRefIDQry);
                //Send a request to read the Visit Activities from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.VisitActivityGUID);

                        try {
                            ODataGuid mvisitGUID = (ODataGuid) property.getValue();
                            visitActivityBean.setVisitActivityGUID(mvisitGUID.guidAsString36());

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.ActivityRefID);

                        try {
                            ODataGuid mvisitGUID = (ODataGuid) property.getValue();
                            visitActivityBean.setActivityRefID(mvisitGUID.guidAsString36());

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.VisitGUID);

                        try {
                            ODataGuid mvisitGUID = (ODataGuid) property.getValue();
                            visitActivityBean.setVisitGUID(mvisitGUID.guidAsString36());

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.ActivityType);
                        visitActivityBean.setActivityType((String) property.getValue());

                        property = properties.get(Constants.ActivityTypeDesc);
                        visitActivityBean.setActivityTypeDesc((String) property.getValue());

                   /*     property = properties.get(Constants.LOGINID);
                        visitActivityBean.setLoginID((String) property.getValue());*/

                        visitActivityBean.setETag(entity.getEtag());

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitActivityBean;

    }

    /**
     * Deletes VisitActivities from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static void deleteVisitActivity(VisitActivityBean visitActivityBean) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = deleteVisitActEntity(visitActivityBean);

            offlineStore.executeDeleteEntity(newEntity, null);

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Returns entity to delete VisitActivities from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity deleteVisitActEntity(VisitActivityBean visitBean) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (visitBean != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITACTIVITYENTITY);


                newEntity.getProperties().put(Constants.VisitActivityGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitActivityGUID, ODataGuidDefaultImpl.initWithString32(visitBean.getVisitActivityGUID())));

                newEntity.getProperties().put(Constants.VisitGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitGUID, ODataGuidDefaultImpl.initWithString32(visitBean.getVisitGUID())));
                newEntity.getProperties().put(Constants.ActivityRefID,
                        new ODataPropertyDefaultImpl(Constants.ActivityRefID, ODataGuidDefaultImpl.initWithString32(visitBean.getActivityRefID())));

                newEntity.getProperties().put(Constants.ActivityType,
                        new ODataPropertyDefaultImpl(Constants.ActivityType, visitBean.getActivityType()));
                newEntity.getProperties().put(Constants.ActivityTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ActivityTypeDesc, visitBean.getActivityTypeDesc()));

            /*    newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, visitBean.getLoginID()));*/

                String resourcePath = Constants.VisitActivities + "(guid'" + visitBean.getVisitActivityGUID() + "')";

                newEntity.setResourcePath(resourcePath, resourcePath);

                if (!visitBean.getETag().equalsIgnoreCase("")) {
                    newEntity.setEtag(visitBean.getETag());
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getValueByColumnName(String mQry, String columnName) throws OfflineODataStoreException {

      //  System.out.println("skugroupValue qry  "+mQry.toString());

        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        mStrVal = (String) property.getValue() != null ? (String) property.getValue() : "";
                        if (!TextUtils.isEmpty(mStrVal)) {
                            return mStrVal;
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getDecimalValueByColumnName(String mQry, String columnName) throws OfflineODataStoreException {
        ODataEntity oDataEntity = null;
        String mStrVal = "";
        double mDobBatchQty = 0.0;
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        try {
                            BigDecimal mBigDecVal = (BigDecimal) property.getValue();
                            mStrVal = mBigDecVal.doubleValue() + "";
                        } catch (Exception e) {
                            mStrVal = "0";
                        }

                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                            if (mDecBatchQty != null) {
                                mDobBatchQty = mDecBatchQty.doubleValue();
                            } else {
                                mDobBatchQty = 0.0;
                            }

                        }
                        if (mDobBatchQty > 0) {
                            if (!TextUtils.isEmpty(mStrVal)) {
                                return entity;
                            }
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return oDataEntity;

    }

    public static ArrayList<String> getFreeMaterialsFromSchFreeMatGrp(String freeMatQry, String columnName) {

        ArrayList<String> matList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, freeMatQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(columnName);
                    if (!matList.contains((String) property.getValue())) {
                        matList.add((String) property.getValue());
                    }
                }
            }

        }
        return matList;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getFreeProdLowestMrp(String mQry, String columnName) throws OfflineODataStoreException {
        ODataEntity oDataEntity = null;
        String mStrUnitPriceVal = "";
        double mDobBatchQty = 0.0, mDobMRP = 0.0;
        ArrayList<FreeMaterialBean> alFreeMatList = new ArrayList<>();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        FreeMaterialBean freeMaterialBean = new FreeMaterialBean();
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        try {
                            BigDecimal mBigDecVal = (BigDecimal) property.getValue();
                            mStrUnitPriceVal = mBigDecVal.doubleValue() + "";
                        } catch (Exception e) {
                            mStrUnitPriceVal = "0";
                        }

                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                            if (mDecBatchQty != null) {
                                mDobBatchQty = mDecBatchQty.doubleValue();
                            } else {
                                mDobBatchQty = 0.0;
                            }

                        }
                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mDecMRP = (BigDecimal) property.getValue();
                            if (mDecMRP != null) {
                                mDobMRP = mDecMRP.doubleValue();
                            } else {
                                mDobMRP = 0.0;
                            }

                        }
                        if (mDobBatchQty > 0) {
                            if (!TextUtils.isEmpty(mStrUnitPriceVal)) {
                                freeMaterialBean.setIntermUnitPrice(mStrUnitPriceVal);
                                freeMaterialBean.setMRP(mDobMRP + "");
                                freeMaterialBean.setoDataEntity(entity);
                                alFreeMatList.add(freeMaterialBean);
                            }
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (alFreeMatList != null && alFreeMatList.size() > 0) {
            Collections.sort(alFreeMatList, new Comparator<FreeMaterialBean>() {
                public int compare(FreeMaterialBean one, FreeMaterialBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getMRP());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Double.parseDouble(one.getMRP());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getMRP().compareTo(other.getMRP());
                    }
                }
            });

            oDataEntity = alFreeMatList.get(0).getoDataEntity();
        }
        return oDataEntity;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<String> getValueByColumnNames(String mQry, String columnName, String columnName2) throws OfflineODataStoreException {
        String mStrVal = "";
        ArrayList<String> alColumnVal = new ArrayList<>();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        alColumnVal.add((String) property.getValue());
                        property = properties.get(columnName2);
                        alColumnVal.add((String) property.getValue());
                        return alColumnVal;
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alColumnVal;

    }

    //new 28112016

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<String> getValueStrByColumnNames(String mQry, ArrayList<String> mArrColumNName) throws OfflineODataStoreException {
        String mStrVal = "";
        ArrayList<String> alColumnVal = new ArrayList<>();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        for (String columnName : mArrColumNName) {
                            property = properties.get(columnName);
                            alColumnVal.add((String) property.getValue());
                        }
                        return alColumnVal;
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alColumnVal;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getGuidValueByColumnName(String retailerQry, String columnName) throws OfflineODataStoreException {
        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(columnName);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            mStrVal = mInvoiceGUID.guidAsString36().toUpperCase();
                            if (!TextUtils.isEmpty(mStrVal)) {
                                return mStrVal;
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }


    /**
     * Returns collected amount for invoice from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getInvCollectedAmount(String invQry, String invNoOrRefID) throws OfflineODataStoreException {
        String invCollAmount = "0";
        double mDouCollAmount = 0.0;
        ArrayList<String> alFipGuid = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.FIPGUID);
                        ODataGuid fipGuid = null;
                        try {
                            fipGuid = (ODataGuid) property.getValue();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        alFipGuid.add(fipGuid.guidAsString36().toUpperCase());

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        String fipItemQry = "";
        if (alFipGuid != null && alFipGuid.size() > 0) {
            for (int i = 0; i < alFipGuid.size(); i++) {
                if (i == 0 && i == alFipGuid.size() - 1) {
                    fipItemQry = fipItemQry
                            + "(" + Constants.FIPGUID + "%20eq%20guid'"
                            + alFipGuid.get(i) + "')";

                } else if (i == 0) {
                    fipItemQry = fipItemQry
                            + "(" + Constants.FIPGUID + "%20eq%20guid'"
                            + alFipGuid.get(i) + "'";

                } else if (i == alFipGuid.size() - 1) {
                    fipItemQry = fipItemQry
                            + "%20or%20" + Constants.FIPGUID + "%20eq%20guid'"
                            + alFipGuid.get(i) + "')";
                } else {
                    fipItemQry = fipItemQry
                            + "%20or%20" + Constants.FIPGUID + "%20eq%20guid'"
                            + alFipGuid.get(i) + "'";
                }
            }

            String clearedAmt;
            clearedAmt = getTotalSumByCondition("" + Constants.FinancialPostingItemDetails +
                    "?$select=" + Constants.ClearedAmount + "  &$filter=" + fipItemQry + " and " + Constants.ReferenceID + " eq '" + invNoOrRefID + "'", Constants.ClearedAmount);

            try {
                if (clearedAmt != null) {
                    invCollAmount = clearedAmt.toString();
                } else {
                    invCollAmount = "0.0";
                }
                mDouCollAmount = Double.parseDouble(invCollAmount);
            } catch (NumberFormatException e) {
                mDouCollAmount = 0.0;
                e.printStackTrace();
            }
        } else {
            mDouCollAmount = 0.0;
        }

        return mDouCollAmount + "";

    }

    /**
     * Returns VisitAcitivities for retailer done or not from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean checkVisitActivitiesForRetailer(String strQry) throws OfflineODataStoreException {

        boolean isVisitActivities = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        isVisitActivities = true;
                        break;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return isVisitActivities;

    }

    /**
     * Returns other retailers visit status before starting visit for current retailer from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[] checkVisitForOtherRetailer(String strQry) throws OfflineODataStoreException {

        String[] visitDetail = new String[3];
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPGUID);
                        String cpGUID = (String) property.getValue();
                        String custName = "";
                        visitDetail[0] = (custName.equalsIgnoreCase("")) ? getValueByColumnName(Constants.ChannelPartners +
                                "?$select=" + Constants.RetailerName + " &$filter = " + Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGUID) + "'", Constants.RetailerName) : custName;

                        property = properties.get(Constants.VISITKEY);
                        visitDetail[1] = ((ODataGuid) property.getValue()).guidAsString36();

                        property = properties.get(Constants.VisitSeq);
                        visitDetail[2] = (String) property.getValue();
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitDetail;
    }

    /**
     * Returns List of today routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getTodayRoutesName(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> listRoutes = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();


                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            listRoutes.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }
                    String appendQryRoute = "";
                    for (i = 0; i < listRoutes.size(); i++) {
                        if (i == 0)
                            appendQryRoute += " eq guid'" + listRoutes.get(i) + "'";
                        else
                            appendQryRoute += " or " + Constants.RouteSchGUID + " eq guid'" + listRoutes.get(i) + "'";
                    }
                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " " + appendQryRoute + "and " + Constants.StatusID + " eq '01'";
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getBeatList(String retListQry) throws OfflineODataStoreException {

        Constants.mMapCPSeqNo.clear();
        String mCPGuid = "", cpguidQry = "";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SequenceNo);
                        String mSeqNo = (String) property.getValue();

                        property = properties.get(Constants.VisitCPGUID);
                        mCPGuid = Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase();
                        try {
                            Constants.mMapCPSeqNo.put((String) property.getValue(), mSeqNo);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (cpguidQry.length() == 0)
                            cpguidQry += " guid'" + mCPGuid + "'";
                        else
                            cpguidQry += " or " + Constants.CPGUID + " eq guid'" + mCPGuid + "'";

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return cpguidQry;

    }

    public static ArrayList<CustomerBean> getTodayBeatRetailer(String cpguidQry, HashMap<String, String> mMapCPSeqNo) throws OfflineODataStoreException {
        ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
        if (!cpguidQry.equalsIgnoreCase("")) {
            List<CustomerBean> listRetailers = OfflineManager.getRetailerListFromRouteSchudle(Constants.ChannelPartners + "?$select=" + Constants.CPNo + ","
                    + Constants.RetailerName + "," + Constants.Address1 + "," + Constants.Address2 + "," + Constants.Address3 + "," + Constants.TownDesc + ","
                    + Constants.DistrictDesc + "," + Constants.Landmark + "," + Constants.Latitude + "," + Constants.Longitude + "," + Constants.CityDesc + ","
                    + Constants.PostalCode + "," + Constants.MobileNo + "," + Constants.CPUID + "," + Constants.CPGUID + "," + Constants.DOB + ","
                    + Constants.Anniversary + "," + Constants.OwnerName + " " + "&$filter=(" +
                    Constants.CPGUID + " eq " + cpguidQry + ") and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03' ", "", mMapCPSeqNo);
            alRetailerList = (ArrayList<CustomerBean>) listRetailers;
        }

        return alRetailerList;
    }

    public static ArrayList<String> getVisitedRetiler(String visitedRetQry, String columnName) throws OfflineODataStoreException {

        ArrayList<String> visitList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitedRetQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(columnName);
                    if (!visitList.contains((String) property.getValue())) {
                        visitList.add((String) property.getValue());
                    }
                }
            }

        }
        return visitList;

    }

    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getCheckMoreThanOneRoute(String qry) throws OfflineODataStoreException {

        boolean mBoolMoreThanOneRoute = false;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> guidArray = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            guidArray.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }

                    if (guidArray != null && guidArray.size() > 0) {
                        if (guidArray.size() > 1) {
                            mBoolMoreThanOneRoute = true;
                        } else {
                            mBoolMoreThanOneRoute = false;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return mBoolMoreThanOneRoute;
    }

    /**
     * Returns List of today routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getTodayRoutes(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> routeList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> listRoutes = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();

                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            listRoutes.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }
                    String appendQryRoute = "";
                    for (i = 0; i < listRoutes.size(); i++) {
                        if (i == 0)
                            appendQryRoute += " eq guid'" + listRoutes.get(i) + "'";
                        else
                            appendQryRoute += " or " + Constants.RouteSchGUID + " eq guid'" + listRoutes.get(i) + "'";
                    }

                    ArrayList<CustomerBean> alRouteList = new ArrayList<>();
                    String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " " + appendQryRoute + "and " + Constants.StatusID + " eq '01'";
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                    alRouteList = (ArrayList<CustomerBean>) listRetailers;
                    routeList.addAll(alRouteList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return routeList;
    }

    public static ArrayList<CustomerBean> getTodayRoutes1(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> routeList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            CustomerBean routeBean = new CustomerBean("");
                            property = properties.get(Constants.RoutSchScope);
                            routeBean.setRoutSchScope((String) property.getValue());
                            property = properties.get(Constants.RoutePlanKey);
                            routeBean.setRoutePlanKey((String) property.getValue());

                            property = properties.get(Constants.CustomerNo);
                            routeBean.setCustomerNo((String) property.getValue());

                            String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'and " + Constants.StatusID + " eq '01'";
                            List<CustomerBean> listRouteNames = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                            if (listRouteNames != null && listRouteNames.size() > 0) {
                                routeBean.setRouteID(listRouteNames.get(0).getRouteID());
                                routeBean.setRouteDesc(listRouteNames.get(0).getRouteDesc());
                                routeBean.setRschGuid(listRouteNames.get(0).getRschGuid());
                                Constants.mSetTodayRouteSch.add(listRouteNames.get(0).getRschGuid());
                                routeBean.setRschGuid32(listRouteNames.get(0).getRschGuid32());

                                routeList.add(routeBean);
                            }
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return routeList;
    }


    /**
     * Returns List of today routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getTodayRoutes1(String qry,String cpNo) throws OfflineODataStoreException {

        ArrayList<CustomerBean> routeList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            CustomerBean routeBean = new CustomerBean("");
                            property = properties.get(Constants.RoutSchScope);
                            routeBean.setRoutSchScope((String) property.getValue());
                            property = properties.get(Constants.RoutePlanKey);
                            routeBean.setRoutePlanKey((String) property.getValue());

                            property = properties.get(Constants.CustomerNo);
                            routeBean.setCustomerNo((String) property.getValue());

                            String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'and " + Constants.StatusID + " eq '01'";
                            List<CustomerBean> listRouteNames = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                            if (listRouteNames != null && listRouteNames.size() > 0) {
                                routeBean.setRouteID(listRouteNames.get(0).getRouteID());
                                routeBean.setRouteDesc(listRouteNames.get(0).getRouteDesc());
                                routeBean.setRschGuid(listRouteNames.get(0).getRschGuid());
                                Constants.mSetTodayRouteSch.add(listRouteNames.get(0).getRschGuid());
                                routeBean.setRschGuid32(listRouteNames.get(0).getRschGuid32());

                                if(routeBean.getCustomerNo().equals(cpNo)) {

                                    routeList.add(routeBean);

                                }
                            }
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return routeList;
    }

    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListForOtherRoute(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> guidArray = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();


                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            guidArray.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }
                    String qryForOthersBeat = "";
                    if (guidArray.size() > 0) {
                        String appendQry = "";
                        for (i = 0; i < guidArray.size(); i++) {
                            if (i == 0)
                                appendQry += " ne guid'" + guidArray.get(i) + "'";
                            else
                                appendQry += " and " + Constants.RouteSchGUID + " ne guid'" + guidArray.get(i) + "'";
                        }
                        qryForOthersBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " " + appendQry + "and " + Constants.StatusID + " eq '01'";
                    } else
                        qryForOthersBeat = Constants.RouteSchedules + "?$filter=" + Constants.StatusID + " eq '01'";
                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForOthersBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListForOtherRoute1(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<>();
        String rchGuidQry = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!Constants.mSetTodayRouteSch.contains(RschGuid.guidAsString36().toUpperCase())) {
                            if (rchGuidQry.length() == 0)
                                rchGuidQry += " guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                            else
                                rchGuidQry += " or " + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                        }

                    }

                    String qryForOthersBeat = Constants.RouteSchedules + "?$filter=(" +
                            Constants.RouteSchGUID + " eq " + rchGuidQry + ") and " + Constants.ApprovalStatus + " eq '03'" + "and " + Constants.StatusID + " eq '01'";
                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForOthersBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }





    /*
     */

    /**
     * Returns List of retailers for route who are not visited from offline db based on query
     *
     * @throws OfflineODataStoreException
     *//*
    public static String[][] getNotVisitedRetailerList(String qry, String startDate) throws OfflineODataStoreException{

		//Check if the offline oData store is initialized
		String[] configVal[] = null;
		int i = 0;
		if (offlineStore!=null){
			ODataProperty property;
			ODataPropMap properties;

			try {
				//Define the resource path
				ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
				request.setMode(Mode.Read);
				request.setResourcePath(qry);
				//Send a request to read the config from the local database
				ODataResponseSingle response = (ODataResponseSingle) offlineStore.
						executeRequest(request);
				//Check if the response is an error
				if (response.getPayloadType() == ODataPayload.Type.Error) {
					ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
							response.getPayload();
					throw new OfflineODataStoreException(error.getMessage());
					//Check if the response contains EntitySet
				}else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
					ODataEntitySet feed = (ODataEntitySet) response.getPayload();
					List<ODataEntity> entities = feed.getEntities();
					//Retrieve the data from the response
					configVal = new String[entities.size()][5];
					int incVal=0;
					for (ODataEntity entity: entities) {
						properties = entity.getProperties();



						property = properties.get(Constants.RoutePlanKey);
						String routePlanKey = null;
						try {
							routePlanKey = (String) property.getValue();
						} catch (Exception e) {
							e.printStackTrace();
						}

						property = properties.get(Constants.PlannedRoute);
						String routeID = (String) property.getValue() != null ?
								(String) property.getValue() : "";
						if (routeID.equalsIgnoreCase("")) {

							property = properties.get(Constants.CPGuid);
							ODataGuid cpGuid = null;
							try {
								cpGuid = (ODataGuid) property.getValue();
							} catch (Exception e) {
								e.printStackTrace();
							}

							if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
									+ "?$filter=" + Constants.CPGUID + " eq '" + cpGuid.guidAsString32().toUpperCase()
									+ "' and StartDate eq datetime'" + startDate + "' " +
									"and ("+Constants.StatusID+" eq '01' or " +Constants.StatusID+" eq '02') and " +
									""+Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"'" )) {
								property = properties.get(Constants.CustomerNo);
								String custNo = (String) property.getValue();
								//new 01122016
								custNo = custNo.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
										"?$select=" + Constants.CPNo + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                        Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.CPNo) : custNo;
								configVal[incVal][0] = (String) property.getValue();
								property = properties.get(Constants.CustomerName);
								String custName = (String) property.getValue();

								custName = custName.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
										"?$select=" + Constants.RetailerName + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                        Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.RetailerName) : custName;
								configVal[incVal][1] = custName;
								configVal[incVal][2] = custName + " - " + custNo;
								configVal[incVal][3] = cpGuid.guidAsString32().toUpperCase();
								configVal[incVal][4] = routePlanKey;
								incVal++;
								i++;
							}
						} else {
							ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
							List<CustomerBean> listRetailers = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter=" +
									Constants.RouteID + " eq '" + routeID + "' and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
									" &$orderby=" + Constants.RetailerName + "%20asc");
							alRetailerList = (ArrayList<CustomerBean>) listRetailers;

							for (CustomerBean retailer : alRetailerList) {
								if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits + "?$filter=" + Constants.CPGUID +
										" eq '" + retailer.getCpGuidStringFormat().toUpperCase() + "' and StartDate eq datetime'" +
										startDate + "' and ("+Constants.StatusID+" eq '01' or " +Constants.StatusID+" eq '02')  and "  +
										Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"' ")) {
									configVal[incVal][0] = retailer.getCPNo();
									configVal[incVal][1] = retailer.getRetailerName();
									configVal[incVal][2] = retailer.getRetailerName()+" - "+retailer.getCPNo();
									configVal[incVal][3] = retailer.getCpGuidStringFormat().toUpperCase();
									configVal[incVal][4] = routePlanKey;
									incVal++;
									i++;
								}
							}

							property = properties.get(Constants.CustomerNo);
							String customerNo = (String) property.getValue() != null ?
									(String) property.getValue() : "";
							if(!customerNo.equalsIgnoreCase("")){
								property = properties.get(Constants.CPGuid);
								ODataGuid cpGuid = null;
								try {
									cpGuid = (ODataGuid) property.getValue();
								} catch (Exception e) {
									e.printStackTrace();
								}

								if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
										+ "?$filter=" + Constants.CPGUID + " eq '" + cpGuid.guidAsString32().toUpperCase()
										+ "' and StartDate eq datetime'" + startDate + "' and "+Constants.StatusID
										+" eq '01'("+Constants.StatusID+" eq '01' or " +Constants.StatusID+" eq '02')  and "
										+Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"'")) {
									property = properties.get(Constants.CustomerNo);
									String custNo = (String) property.getValue();
									//new 01122016
									custNo = custNo.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
											"?$select=" + Constants.CPNo + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                            Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.CPNo) : custNo;
									configVal[incVal][0] = (String) property.getValue();
									property = properties.get(Constants.CustomerName);
									String custName = (String) property.getValue();

									custName = custName.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
											"?$select=" + Constants.RetailerName + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                            Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.RetailerName) : custName;
									configVal[incVal][1] = custName;
									configVal[incVal][2] = custName + " - " + custNo;
									configVal[incVal][3] = cpGuid.guidAsString32().toUpperCase();
									configVal[incVal][4] = routePlanKey;
									incVal++;
									i++;
								}
							}
						}
					}
				} else {
					throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
				}
			} catch (Exception e) {
				throw new OfflineODataStoreException(e);
			}
		}

		if(i<=0)
			return null;
		else{
			String[][] tempVal = new String[i][5];
			for(int j=0; j<i; j++){
				tempVal[j][0] = configVal[j][0];
				tempVal[j][1] = configVal[j][1];
				tempVal[j][2] = configVal[j][2];
				tempVal[j][3] = configVal[j][3];
				tempVal[j][4] = configVal[j][4];
			}

			//sorting array based on name
			Arrays.sort(tempVal, new Comparator<String[]>() {
				@Override
				public int compare(String[] entry1, String[] entry2) {
					// Sort by name
					return entry1[1].compareTo(entry2[1]);
				}
			});
			return tempVal;
		}

	}*/
    public static ArrayList<CustomerBean> getOtherBeatList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RoutId);

                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setRouteID((String) property.getValue());
                        property = properties.get(Constants.Description);
                        retBean.setRouteDesc((String) property.getValue());
                        property = properties.get(Constants.RouteSchGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retBean.setRschGuid(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setRschGuid32(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static ArrayList<CustomerBean> getRetailerListForOtherBeats(String qry) throws OfflineODataStoreException {
        HashMap<String, String> mMapCPSeqNo = new HashMap<>();
        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            String mCPGuid = "", cpguidQry = "";
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.VisitCPGUID);

                        try {
//                            String mSpItemGuid = (String) property.getValue();
//                            mSpItemGuid = Constants.convertStrGUID32to36(mSpItemGuid);
//                            ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
//                            List<CustomerBean> listRetailers = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter=" +
//                                    Constants.CPGUID + " eq guid'" + mSpItemGuid + "' and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
//                                    " &$orderby=" + Constants.RetailerName + "%20asc","");
//                            alRetailerList = (ArrayList<CustomerBean>) listRetailers;
//
//                            retailerList.addAll(alRetailerList);


                            property = properties.get(Constants.SequenceNo);
                            String mSeqNo = (String) property.getValue();

                            property = properties.get(Constants.VisitCPGUID);
                            mCPGuid = Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase();
                            try {
                                mMapCPSeqNo.put((String) property.getValue(), mSeqNo);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            if (cpguidQry.length() == 0)
                                cpguidQry += " guid'" + mCPGuid + "'";
                            else
                                cpguidQry += " or " + Constants.CPGUID + " eq guid'" + mCPGuid + "'";

                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                    }

                    if (!cpguidQry.equalsIgnoreCase("")) {
                        ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                        List<CustomerBean> listRetailers = OfflineManager.getRetailerListFromRouteSchudle(Constants.ChannelPartners + "?$select=" + Constants.CPNo + ","
                                + Constants.RetailerName + "," + Constants.Address1 + "," + Constants.Address2 + "," + Constants.Address3 + "," + Constants.TownDesc + ","
                                + Constants.DistrictDesc + "," + Constants.Landmark + "," + Constants.Latitude + "," + Constants.Longitude + "," + Constants.CityDesc + ","
                                + Constants.PostalCode + "," + Constants.MobileNo + "," + Constants.CPUID + "," + Constants.CPGUID + "," + Constants.DOB + ","
                                + Constants.Anniversary + "," + Constants.OwnerName + " " + "&$filter=(" +
                                Constants.CPGUID + " eq " + cpguidQry + ") and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03' ", "", mMapCPSeqNo);
                        alRetailerList = (ArrayList<CustomerBean>) listRetailers;


                        retailerList.addAll(alRetailerList);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;

    }


    public static String getDistributorID(String qry) throws OfflineODataStoreException {
        String distID = "";

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            String mCPGuid = "", cpguidQry = "";
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();

                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        distID = (String) property.getValue();
                        distID = distID.replaceAll("0", "");
                        return distID;
                    }
                }
            } catch (ODataException e) {
                e.printStackTrace();
            }

        }
        return distID;
    }

    public static String getRouteQry(String qry) throws OfflineODataStoreException {
        String mStrRouteQry = "";

        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        RoutePlanBean routePlanBean;
        ArrayList<RoutePlanBean> alRouteList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RschGuid);
                ODataGuid RschGuid = null;
                RschGuid = (ODataGuid) property.getValue();
                if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                    routePlanBean = new RoutePlanBean();
                    routePlanBean.setRschGuid(RschGuid.guidAsString36().toUpperCase());

                    alRouteList.add(routePlanBean);
                }
            }


            if (alRouteList != null && alRouteList.size() > 0) {
                for (int i = 0; i < alRouteList.size(); i++) {
                    if (i == 0 && i == alRouteList.size() - 1) {
                        mStrRouteQry = mStrRouteQry
                                + "(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' )";

                    } else if (i == 0) {
                        mStrRouteQry = mStrRouteQry
                                + "((" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' )";

                    } else if (i == alRouteList.size() - 1) {
                        mStrRouteQry = mStrRouteQry
                                + "%20or%20(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' ))";
                    } else {
                        mStrRouteQry = mStrRouteQry
                                + "%20or%20(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' ) ";
                    }
                }

            }

        } else {
            mStrRouteQry = "";
        }


        return mStrRouteQry;
    }

    /**
     * Returns List of retailers for route who are not visited from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getNotVisitedRetailerList(String qry, String startDate) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        HashMap<String, ArrayList<String>> customerList = new HashMap<>();
        HashMap<String, String> customeCount = new HashMap<>();
        int i = 0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()][10];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid routeSchGuid = null;
                        try {
                            routeSchGuid = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        property = properties.get(Constants.VisitCPGUID);
                        String cpGuid = (String) property.getValue();
                        String mCPGuid = Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase();
                        //No of outlet start
                        ArrayList<String> arrayList = customerList.get(routeSchGuid.guidAsString36().toUpperCase());
                        if (arrayList == null) {
                            arrayList = new ArrayList<>();
                            arrayList.add(mCPGuid);
                            customerList.put(routeSchGuid.guidAsString36().toUpperCase(), arrayList);
                        } else {
                            arrayList.add(mCPGuid);
                            customerList.put(routeSchGuid.guidAsString36().toUpperCase(), arrayList);
                        }
                        //No of outlet end
                        if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
                                + "?$top=1 &$filter=" + Constants.CPGUID + " eq '" + cpGuid.toUpperCase()
                                + "' and StartDate eq datetime'" + startDate + "' " +
                                "and (" + Constants.StatusID + " eq '01' or " + Constants.StatusID + " eq '02') ")) {

                            String routePlanKey = getValueByColumnName(Constants.RoutePlans +
                                    "?$select=" + Constants.RoutePlanKey + "&$top=1 &$filter = " +
                                    Constants.RschGuid + " eq guid'" + routeSchGuid.guidAsString36().toUpperCase() + "' and " + Constants.VisitDate + " eq datetime'" + startDate + "' ", Constants.RoutePlanKey);

                            property = properties.get(Constants.ViisitCPNo);


                            String custNo = (String) property.getValue();

                           /* String custNo = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.CPNo + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.CPNo);*/
                            configVal[incVal][0] = custNo;
                            property = properties.get(Constants.VisitCPName);
                            String custName = (String) property.getValue();

                            /*String custName = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.RetailerName + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.RetailerName);*/


                            configVal[incVal][1] = custName;
                            configVal[incVal][2] = custName + " - " + custNo;
                            configVal[incVal][3] = cpGuid.toUpperCase();
                            configVal[incVal][4] = routePlanKey;
                            configVal[incVal][5] = "";
                            configVal[incVal][7] = "";
                            configVal[incVal][8] = "";
                            configVal[incVal][9] = routeSchGuid.guidAsString36().toUpperCase();
                            configVal[incVal][6] = Constants.convertStrGUID32to36(cpGuid.toUpperCase()).toUpperCase();
                            incVal++;
                            i++;
                        }

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (i <= 0)
            return null;
        else {
            String[][] tempVal = new String[i][10];
            for (int j = 0; j < i; j++) {
                tempVal[j][0] = configVal[j][0];
                tempVal[j][1] = configVal[j][1];
                tempVal[j][2] = configVal[j][2];
                tempVal[j][3] = configVal[j][3];
                tempVal[j][4] = configVal[j][4];
                tempVal[j][5] = configVal[j][5];
                tempVal[j][6] = configVal[j][6];
                tempVal[j][7] = configVal[j][7];
                tempVal[j][8] = configVal[j][8];
                String cpguidQry = "";
                try {
                    String custCount = customeCount.get(configVal[j][9]);
                    if (!TextUtils.isEmpty(custCount)) {
                        tempVal[j][9] = custCount;
                    } else {
                        ArrayList<String> arrayList = customerList.get(configVal[j][9]);
                        if (arrayList != null) {
                            for (String mCPGuid : arrayList) {
                                if (cpguidQry.length() == 0)
                                    cpguidQry += " guid'" + mCPGuid + "'";
                                else
                                    cpguidQry += " or " + Constants.CPGUID + " eq guid'" + mCPGuid + "'";
                            }
                            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.ChannelPartners + "?$select=" + Constants.CPNo + " " + "&$filter=(" + Constants.CPGUID + " eq " + cpguidQry + ") and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03' ");
                            if (entities != null && entities.size() > 0) {
                                tempVal[j][9] = "" + entities.size();
                                customeCount.put(configVal[j][9], "" + entities.size());
                            } else {
                                tempVal[j][9] = "0";
                                customeCount.put(configVal[j][9], "0");
                            }
                        } else {
                            tempVal[j][9] = "0";
                            customeCount.put(configVal[j][9], "0");
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    tempVal[j][9] = "0";
                }
            }

            //sorting array based on name
            Arrays.sort(tempVal, new Comparator<String[]>() {
                @Override
                public int compare(String[] entry1, String[] entry2) {
                    // Sort by name
                    return entry1[1].compareTo(entry2[1]);
                }
            });
            return tempVal;
        }

    }

    //new 30112016

    /**
     * Create Appointment to store in offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void createAppointment(Hashtable<String, String> table) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createAppointmentEntity(table);

            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.Visits),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Returns an Entity for Appointement
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createAppointmentEntity(Hashtable<String, String> hashtable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                //new
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));

                newEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID).toString()));
                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
                newEntity.getProperties().put(Constants.PlannedStartTime,
                        new ODataPropertyDefaultImpl(Constants.PlannedStartTime, hashtable.get(Constants.PlannedStartTime)));
                newEntity.getProperties().put(Constants.PlannedEndTime,
                        new ODataPropertyDefaultImpl(Constants.PlannedEndTime, hashtable.get(Constants.PlannedEndTime)));

                newEntity.getProperties().put(Constants.VisitTypeID,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeID, hashtable.get(Constants.VisitTypeID)));
                newEntity.getProperties().put(Constants.VisitTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeDesc, hashtable.get(Constants.VisitTypeDesc)));
                newEntity.getProperties().put(Constants.PlannedDate,
                        new ODataPropertyDefaultImpl(Constants.PlannedDate, UtilConstants.convertDateFormat(hashtable.get(Constants.PlannedDate))));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Create visit start end Entity to store in offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void createVisitStartEnd(Hashtable<String, String> table) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntityEndRemarks(table);

            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.Visits),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Returns visitActivity status for retailer for selected visitActivity type from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitActivityStatusForCustomer(String strQry, String activityType) throws
            OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        for (ODataEntity entity : entities) {
                            ODataGuid visitGuid = null;
                            properties = entity.getProperties();
                            property = properties.get(Constants.VisitGUID);
                            try {
                                visitGuid = (ODataGuid) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            String activityStatusForVisitQry = Constants.VISITACTIVITIES + "?$top=1 &$filter=" + Constants.VisitGUID
                                    + " eq guid'" + visitGuid.guidAsString36() + "' and " + Constants.ActivityType + " eq '" + activityType + "'";
                            if (getVisitActivityStatusForVisit(activityStatusForVisitQry))
                                return true;
                        }
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * Returns visitActivity status for retailer for selected visitActivity type from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static HashSet<String> getVisitKeysForCustomer(String strQry) throws
            OfflineODataStoreException {

        HashSet<String> mHashSetVisitKeys = new HashSet<>();
        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        for (ODataEntity entity : entities) {
                            ODataGuid visitGuid = null;
                            properties = entity.getProperties();
                            property = properties.get(Constants.VisitGUID);
                            try {
                                visitGuid = (ODataGuid) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mHashSetVisitKeys.add(visitGuid.guidAsString36().toUpperCase());

                            /*String activityStatusForVisitQry = Constants.VISITACTIVITIES + "?$top=1 &$filter=" + Constants.VisitGUID
                                    + " eq guid'" + visitGuid.guidAsString36() + "' and " + Constants.ActivityType + " eq '" + activityType + "'";
                            if (getVisitActivityStatusForVisit(activityStatusForVisitQry))
                                return true;*/
                        }
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mHashSetVisitKeys;

    }

    public static boolean getVisitActivityDoneOrNot(HashSet<String> mSetVisitKeys, String
            activityType) {
        boolean mBoolVisitAct = false;
        if (mSetVisitKeys != null && mSetVisitKeys.size() > 0) {
            Iterator mapSelctedValues = mSetVisitKeys.iterator();
            while (mapSelctedValues.hasNext()) {
                String Key = (String) mapSelctedValues.next();
                String activityStatusForVisitQry = Constants.VISITACTIVITIES + "?$top=1 &$filter=" + Constants.VisitGUID
                        + " eq guid'" + Key.toUpperCase() + "' and " + Constants.ActivityType + " eq '" + activityType + "'";
                try {
                    if (getVisitActivityStatusForVisit(activityStatusForVisitQry))
                        return true;
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
            }
        } else {
            return false;
        }

        return mBoolVisitAct;
    }

    /**
     * Returns VisitActivity status for selected visit from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitActivityStatusForVisit(String strQry) throws
            OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * Returns an Entity for visit start end with remarks from Attendance closure
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createVisitEntityEndRemarks
    (Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                //new
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, hashtable.get(Constants.VISITKEY)));
                newEntity.getProperties().put(Constants.STARTDATE,
                        new ODataPropertyDefaultImpl(Constants.STARTDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.STARTDATE))));

                newEntity.getProperties().put(Constants.STARTTIME,
                        new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                if (!hashtable.get(Constants.ENDDATE).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.EndLat,
                            new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                    newEntity.getProperties().put(Constants.EndLong,
                            new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                    newEntity.getProperties().put(Constants.ENDDATE,
                            new ODataPropertyDefaultImpl(Constants.ENDDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.ENDDATE))));

                    newEntity.getProperties().put(Constants.ENDTIME,
                            new ODataPropertyDefaultImpl(Constants.ENDTIME, hashtable.get(Constants.ENDTIME)));


                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                    newEntity.getProperties().put(Constants.StatusID,
                            new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                    try {
                        if (hashtable.get(Constants.VisitSeq) != null) {
                            newEntity.getProperties().put(Constants.VisitSeq,
                                    new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //new 28112016
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                    try {
                        newEntity.getProperties().put(Constants.REASON,
                                new ODataPropertyDefaultImpl(Constants.REASON, hashtable.get(Constants.REASON)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    newEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                }

               /* newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                try {
                    newEntity.getProperties().put(Constants.VisitCatID,
                            new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (hashtable.get(Constants.NoOfOutlet) != null) {
                    try {
                        newEntity.getProperties().put(Constants.NoOfOutlet,
                                new ODataPropertyDefaultImpl(Constants.NoOfOutlet, hashtable.get(Constants.NoOfOutlet)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Returns RoutePlan Key for selected route from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getRoutePlanKey(String mQuery) throws OfflineODataStoreException {

        String mStrRouteKey = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQuery);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RoutePlanKey);
                        mStrRouteKey = property.getValue().toString();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrRouteKey;

    }

    /**
     * Returns RoutePlan Key for selected route from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getRoutePlanKeyNew(String mQuery, String mStrVisitCatID) throws
            OfflineODataStoreException {

        String mStrRouteKey = "";
        //Check if the offline oData store is initialized


        try {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQuery);
            ODataProperty property;
            ODataPropMap properties;
            ODataGuid RschGuid = null;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.RouteSchGUID);
                    RschGuid = (ODataGuid) property.getValue();
                }
                if (RschGuid != null) {
                    String mStrRouteQry = "";
                    if (mStrVisitCatID.equalsIgnoreCase(Constants.str_02) || mStrVisitCatID.equalsIgnoreCase(Constants.str_03)) {
                        mStrRouteQry = Constants.RoutePlans + "?$filter=" + Constants.RschGuid + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'" +
                                " ";
                    } else {
                        mStrRouteQry = Constants.RoutePlans + "?$filter=" + Constants.RschGuid + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'" +
                                " and " + Constants.VisitDate + " eq datetime'" + UtilConstants.getNewDate() + "' ";
                    }


                    List<ODataEntity> routeEntities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrRouteQry);

                    if (routeEntities != null && routeEntities.size() > 0) {
                        for (ODataEntity entity : routeEntities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.RoutePlanKey);
                            mStrRouteKey = (String) property.getValue();
                        }
                    } else {
                        mStrRouteKey = "";
                    }
                } else {
                    mStrRouteKey = "";
                }
            } else {
                mStrRouteKey = "";
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }


        return mStrRouteKey;

    }

    public static ArrayList<Config> getFocusedProdList(String focusedPrdQry) throws
            OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    focsBean = new Config();
                    properties = entity.getProperties();
                    property = properties.get(Constants.MaterialNo);

                    String materialNo = (String) property.getValue();
                    focsBean.setValue((String) property.getValue());

                    property = properties.get(Constants.MaterialDesc);

                    focsBean.setDescription((String) property.getValue());

                    property = properties.get(Constants.UspDesc);
                    focsBean.setUSPDescription((String) property.getValue());

                    focList.add(focsBean);
                }
            }

        }
        return focList;

    }

    @SuppressLint("NewApi")
    public static ArrayList<MerchandisingBean> getMerchandisingList(String merQry, String
            getType) throws OfflineODataStoreException {

        ArrayList<MerchandisingBean> alMercReview = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MerchandisingBean merchReviewBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, merQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    merchReviewBean = new MerchandisingBean();

                    property = properties.get(Constants.MerchReviewType);

                    merchReviewBean.setMerchReviewType((String) property.getValue());

                    property = properties.get(Constants.MerchReviewTypeDesc);
                    merchReviewBean.setMerchReviewTypeDesc((String) property.getValue());

                    property = properties.get(Constants.Remarks);
                    merchReviewBean.setRemarks((String) property.getValue());

                    property = properties.get(Constants.MerchReviewDate);
                    String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    merchReviewBean.setMerchReviewDate(convertDateFormat);

                    property = properties.get(Constants.MerchReviewGUID);
                    ODataGuid mMerHeaderGUID = null;
                    try {
                        mMerHeaderGUID = (ODataGuid) property.getValue();
                        merchReviewBean.setMerchReviewGUID(mMerHeaderGUID.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    merchReviewBean.setMerchReviewImgGUID(getValueByColumnName(Constants.MerchReviewImages
                            + "?$select=" + Constants.MerchImageGUID + " &$filter = " + Constants.MerchReviewGUID
                            + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'", Constants.MerchImageGUID));

                    merchReviewBean.setDocumentStore(getValueByColumnName(Constants.MerchReviewImages
                            + "?$select=" + Constants.DocumentStore + " &$filter = " + Constants.MerchReviewGUID
                            + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'", Constants.DocumentStore));
                    merchReviewBean.setEtag(entity.getEtag() != null ? entity.getEtag() : "");

                    if (getType.equalsIgnoreCase(Constants.DeviceMechindising)) {
                        merchReviewBean.setImagePath(Constants.getValueFromDataVault(mMerHeaderGUID.guidAsString36().toUpperCase()));
                    }

                    if (merchReviewBean.getEtag().equalsIgnoreCase("")) {
                        merchReviewBean.setMediaLink(getMediaLinkByColumn(Constants.MerchReviewImages
                                + "?$select=" + Constants.MerchImageGUID + " &$filter = " + Constants.MerchReviewGUID
                                + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'"));
                    } else {
                        merchReviewBean.setMediaLink("");
                    }

                    merchReviewBean.setResourcePath(entity.getResourcePath());
                    alMercReview.add(merchReviewBean);
                }
            }
        }
        return alMercReview;

    }

    public static String getMediaLinkByColumn(String retailerQry) throws
            OfflineODataStoreException {
        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        mStrVal = entity.getMediaLink().toString();
                        break;
                    }


                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }

    public static String[][] getDistributors(String distQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, distQry);

            if (entities != null && entities.size() > 0) {
                int incVal = 0;
                distList = new String[5][entities.size()];
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();
                    property = properties.get(Constants.CPNo);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.CPGUID);
                    distList[1][incVal] = (String) property.getValue();
                    property = properties.get(Constants.CPName);
                    distList[2][incVal] = (String) property.getValue();
                    property = properties.get(Constants.DMSDivisionID);
                    distList[3][incVal] = (String) property.getValue();
                    property = properties.get(Constants.CPTypeID);
                    distList[4][incVal] = (String) property.getValue();

                    incVal++;
                }
            }

        }
        return distList;

    }

    //same distributor may have more than one dmsdivision, so all the dms division of a distributor is made as a query in the dmsdivision bean
    public static ArrayList<DMSDivionBean> getDistributorsDms(String distQry) throws
            OfflineODataStoreException {

        String[][] distList = null;
        HashMap<String, DMSDivionBean> distMap = new HashMap<>();
        ArrayList<DMSDivionBean> alDist = new ArrayList<>();
        //  ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, distQry);

            if (entities != null && entities.size() > 0) {

                ArrayList<String> alDMSList = null;
                for (ODataEntity entity : entities) {
                    DMSDivionBean dmsbean = new DMSDivionBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPNo);

                    String distributorId = (String) property.getValue();
                    if (distMap.containsKey(distributorId)) {

                        property = properties.get(Constants.DMSDivisionID);
                        dmsbean = distMap.get(distributorId);
                        String dmsDiv = dmsbean.getDMSDivisionQuery();
                        dmsbean.setDMSDivisionQuery(dmsDiv + " or startswith(" + Constants.DMSDivision + ",'" + (String) property.getValue() + "')");
                        try {
                            alDMSList = dmsbean.getDmsDIVList();
                            alDMSList.add((String) property.getValue());
                            dmsbean.setDmsDIVList(alDMSList);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        distMap.put(distributorId, dmsbean);
                        // dmsbean.setDMSDivisionQuery((String) property.getValue());
                    } else {
                        dmsbean.setDistributorId(distributorId);
                        property = properties.get(Constants.CPGUID);
                        dmsbean.setDistributorGuid((String) property.getValue());
                        property = properties.get(Constants.CPName);
                        dmsbean.setDistributorName((String) property.getValue());
                        property = properties.get(Constants.DMSDivisionID);
                        dmsbean.setDMSDivisionQuery("startswith(" + Constants.DMSDivision + ",'" + (String) property.getValue() + "')");

                        try {
                            alDMSList = new ArrayList<>();
                            alDMSList.add((String) property.getValue());
                            dmsbean.setDmsDIVList(alDMSList);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.CPTypeID);
                        dmsbean.setStockOwner((String) property.getValue());


                        distMap.put(distributorId, dmsbean);
                    }


                }
            }
            Set keys = distMap.keySet();
            Iterator itr = keys.iterator();

            String key;
            DMSDivionBean value;
            while (itr.hasNext()) {
                key = (String) itr.next();
                value = (DMSDivionBean) distMap.get(key);
                alDist.add(value);
            }
        }
        return alDist;

    }

    public static String[][] getBrands(String brandQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);
            distList = new String[2][entities.size() + 1];
            distList[0][0] = Constants.str_00;
            distList[1][0] = Constants.All;
            int incVal = 1;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.BrandID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.BrandDesc);
                    distList[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }

    public static String[][] getMaterialCategries(String matCatQry) throws
            OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, matCatQry);
            distList = new String[2][entities.size() + 1];
            distList[0][0] = Constants.str_00;
            distList[1][0] = Constants.All;
            int incVal = 1;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.MaterialCategoryID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.MaterialCategoryDesc);
                    distList[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }

    public static String[][] getCatgeriesBrandsLink(String brandQry, String mStrSelID, String
            mStrSelDesc) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);
            distList = new String[2][entities.size() + 1];
            distList[0][0] = Constants.str_00;
            distList[1][0] = Constants.All;
            int incVal = 1;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(mStrSelID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(mStrSelDesc);
                    distList[1][incVal] = (String) property.getValue();

                    incVal++;
                }
            }

        }
        return distList;

    }

    @SuppressLint("LongLogTag")
    public static ArrayList<SKUGroupBean> getCRSSKUGroup(String cpStkQry, String mStrInvListQry,

                                                         int mIntBalVisitRet,
                                                         String mStrCPGUID32, ArrayList<SKUGroupBean> alMustSellMatList,
                                                         String parentId, String parentTypeId,
                                                         String cpTypeId, String cpDmsDivQry, String cpDmsDivSchSalAreaQry,
                                                         HashMap<String, String> hashMAPDBStk, HashMap<String, String> hashMapRetailerStk,
                                                         HashMap<String, String> hashMapTargetByCrsskugrp, HashMap<String, String> hashMapInvQtyByCrsskugrp,
                                                         Map<String, String> hashMapMustSellMatAvgContribution, HashMap<String, String> hashMapUOMByCrsskugrp,
                                                         HashMap<String, String> hashMapSegMat, ArrayList<HashMap<String, String>> alMapMaterialDBStkUOM,
                                                         HashMap<String, String> hashMapRetStockByMat, String stockOwner, String
                                                                 mStrParentId,
                                                         HashMap<String, MustSellBean> mapMustSell) throws OfflineODataStoreException {



        ArrayList<String> schemeGuidList;
        String qpsSchemeGUID = "";
        ArrayList<SKUGroupItemBean> skuGroupItemBeanArrayList = null;
        ArrayList<SKUGroupBean> alCRSSKUGrpList = new ArrayList<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        double mDouMustSellAvgContribution = 0.0;
        String spGuid = Constants.getSPGUID();
        String mCRSSKUQry = "";
//        ArrayList<SKUGroupBean> alCPStkList = getCRSSKUGroupList(cpStkQry);
        ArrayList<SchemeIDBean> orderMaterialGrpSchemeId = GetSalesOrderListBasedOnScheme.getOrderMaterialId(mStrCPGUID32, parentId,
                parentTypeId, cpTypeId, spGuid, cpDmsDivQry, cpDmsDivSchSalAreaQry, null);
        Log.d("Time getOrderMaterialId", UtilConstants.getSyncHistoryddmmyyyyTime());
        HashMap<String, ArrayList<String>> hashMapSchemeGuidMatByMaterial = new HashMap<>();
        if (!Constants.SchemeQRY.equalsIgnoreCase("")) {
            String validScheme = Constants.SchemeItemDetails + "?$filter= (" + Constants.SchemeGUID + " eq " + Constants.SchemeQRY + ") and " + Constants.OnSaleOfCatID + " eq '" + Constants.OnSaleOfCatIDMaterial + "' ";
            hashMapSchemeGuidMatByMaterial = getSchemeGuidByMaterial(validScheme, hashMapSchemeGuidMatByMaterial);
        }
        Log.d("Time getSchemeGuidByMaterial", UtilConstants.getSyncHistoryddmmyyyyTime());
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
//            LogManager.writeLogDebug("getCRSSKUGro befor loop");
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setSKUGroup(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);
                    skuGrpBean.setMaterialDesc(matSkuDesc);
                    boolean isCrsSkuAval = false;
                    if (tempArrList.size() == 0) {
                        isCrsSkuAval = true;
                    } else if (!tempArrList.contains(orderMatGrpId)) {
                        isCrsSkuAval = true;
                    }
                    if (isCrsSkuAval) {
                        property = properties.get(Constants.CPStockItemGUID);
                        ODataGuid mCpStockItemGuid = null;
                        try {
                            mCpStockItemGuid = (ODataGuid) property.getValue();
                            skuGrpBean.setCPStockItemGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.UOM);
                        String UOM = (String) property.getValue();
                        skuGrpBean.setUOM(UOM);

                        String qty = "0";

                        try {
                            if (hashMapUOMByCrsskugrp.get(orderMatGrpId).equalsIgnoreCase(Constants.IS_TRUE))
                                skuGrpBean.setDBSTK(trimQtyDecimalPlace(hashMAPDBStk.get(orderMatGrpId)));
                            else
                                skuGrpBean.setDBSTK(hashMAPDBStk.get(orderMatGrpId));
                        } catch (Exception e) {
                            skuGrpBean.setDBSTK(hashMAPDBStk.get(orderMatGrpId));
                        }


                        double mCalActQty = 0.0;
                        try {
                            mCalActQty = Double.parseDouble(hashMapInvQtyByCrsskugrp.get(orderMatGrpId) != null ? hashMapInvQtyByCrsskugrp.get(orderMatGrpId) : "0");
                        } catch (NumberFormatException e) {
                            mCalActQty = 0.0;
                            e.printStackTrace();
                        }
                        // TODO if must sell is done disable below code
                        // suggestion order qty Start
                        String soqQty = getSOQ(hashMapTargetByCrsskugrp.get(orderMatGrpId) != null ? hashMapTargetByCrsskugrp.get(orderMatGrpId) : "0",
                                String.valueOf(mCalActQty), mIntBalVisitRet);

                        try {
                            if (hashMapUOMByCrsskugrp.get(orderMatGrpId).equalsIgnoreCase(Constants.IS_TRUE))
                                skuGrpBean.setSOQ(trimQtyDecimalUpvalue(soqQty));
                            else
                                skuGrpBean.setSOQ(trimQtyDecimalUpvalue(soqQty));
                        } catch (Exception e) {
                            skuGrpBean.setSOQ(trimQtyDecimalUpvalue(soqQty));
                        }
                        // suggestion order qty End

                        // TODO if must sell is done enable below code
                        // mustsell start code
                        String mStrSOQQTY = "0";
                        try {
                            mStrSOQQTY = hashMapTargetByCrsskugrp.get(orderMatGrpId) != null ? hashMapTargetByCrsskugrp.get(orderMatGrpId) : "0";  //Target QTY 09-05-2018
//                            mStrSOQQTY = mapMustSell.get(orderMatGrpId) != null ? mapMustSell.get(orderMatGrpId).getSOQ():"0";
                        } catch (Exception e) {
                            mStrSOQQTY = "0";
                            e.printStackTrace();
                        }

                        String calSOQQty = "0";
                        try {
                            calSOQQty = getSOQNew(mStrSOQQTY,
                                    String.valueOf(mCalActQty));
                        } catch (Exception e) {
                            calSOQQty = "0";
                            e.printStackTrace();
                        }

                        try {
                            skuGrpBean.setSOQ(trimQtyDecimalUpvalue(calSOQQty));
                        } catch (Exception e) {
                            skuGrpBean.setSOQ("0");
                            e.printStackTrace();
                        }
                        // mustsell end code
                        skuGrpBean.setMRP("0.00");

                        if (UOM.equals("PC")) {
                            skuGrpBean.setRETSTK(hashMapRetailerStk.get(orderMatGrpId) != null ? trimQtyDecimalPlace(hashMapRetailerStk.get(orderMatGrpId)) : "0");
                        } else {
                            skuGrpBean.setRETSTK(hashMapRetailerStk.get(orderMatGrpId) != null ? hashMapRetailerStk.get(orderMatGrpId) : "0");
                        }

                        // TODO if must sell is done disable below code
                        // Start Code
                        // Check material is must sell or not and check un billed status

                        if (hashMapMustSellMatAvgContribution.containsKey(orderMatGrpId)) {
                            if (mDouMustSellAvgContribution < 80) {
                                Constants.Map_Must_Sell_Mat.put(orderMatGrpId, "");
                                mDouMustSellAvgContribution = mDouMustSellAvgContribution + Double.parseDouble(hashMapMustSellMatAvgContribution.get(orderMatGrpId));
                                skuGrpBean.setMatTypeVal(Constants.MustSellId);
                            }
                            skuGrpBean.setUnBilledStatus(Constants.X);
                        } else {
                            skuGrpBean.setUnBilledStatus("");
                        }

                        // Check material is focused and new product
                        if (skuGrpBean.getMatTypeVal().equalsIgnoreCase("")) {
                            if (hashMapSegMat.containsKey(matNo)) {
                                Constants.Map_Must_Sell_Mat.put(orderMatGrpId, "");
                                skuGrpBean.setMatTypeVal(hashMapSegMat.get(matNo));
                            } else {
                                skuGrpBean.setMatTypeVal("");
                            }
                        }
                        // End Code

                        // TODO if must sell is done enable below code
                        // mustsell start code
                        try {
                            skuGrpBean.setMatTypeVal(mapMustSell.get(orderMatGrpId).getSellIndicator() != null ? mapMustSell.get(orderMatGrpId).getSellIndicator() : "");
                        } catch (Exception e) {
                            skuGrpBean.setMatTypeVal("");
                            e.printStackTrace();
                        }
                        // mustsell end code

                        property = properties.get(Constants.Currency);
                        skuGrpBean.setCurrency((String) property.getValue());

                        skuGrpBean.setChildItemTag("");
                        property = properties.get(ConstantsUtils.Brand);
                        skuGrpBean.setBrand((String) property.getValue());
                        property = properties.get(ConstantsUtils.SKUGroup);
                        skuGrpBean.setSKUGroupID((String) property.getValue());
                        property = properties.get(ConstantsUtils.Banner);
                        skuGrpBean.setBanner((String) property.getValue());
                        property = properties.get(ConstantsUtils.ProductCategoryID);
                        skuGrpBean.setProductCategoryID((String) property.getValue());

                        skuGrpBean.setHeader(true);

                        ArrayList<SKUGroupBean> matList = new ArrayList<>();
                        skuGrpBean.setSkuSubGroupBeanArrayList(matList);

                        if (mCRSSKUQry.length() == 0) {
                            mCRSSKUQry += "'" + orderMatGrpId + "'";

                        } else {
                            mCRSSKUQry += " or " + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId + "'";

                        }
                        alCRSSKUGrpList.add(skuGrpBean);
                        tempArrList.add(orderMatGrpId);
                    }
                }
            }
        }
        Log.d("Time start getMaterialsByTest", UtilConstants.getSyncHistoryddmmyyyyTime());
        if (alCRSSKUGrpList != null && alCRSSKUGrpList.size() > 0) {
            String mCPItmQry = "", mCPItmMRPQry = "";
            if (!mCRSSKUQry.equalsIgnoreCase("")) {
                mCPItmQry = Constants.CPStockItems + "?$filter=(" + Constants.OrderMaterialGroupID + " eq " + mCRSSKUQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' and " + cpDmsDivQry + " and " + Constants.StockOwner + " eq '" + stockOwner + "' and " + Constants.CPGUID + " eq '" + mStrParentId + "' &$orderby= " + Constants.ManufacturingDate + "%20desc ";
            }

         //   System.out.println("CPStockItems mustsell get"+mCPItmQry);

            HashMap<String, ArrayList<SKUGroupBean>> hashMapSKUMatByMaterial = getMaterialsByTest(mCPItmQry, alMapMaterialDBStkUOM, hashMapRetStockByMat, "");
            Log.d("Time getMaterialsByTest", UtilConstants.getSyncHistoryddmmyyyyTime());
            if (hashMapSKUMatByMaterial.size() > 0) {
                for (SKUGroupBean skuGroupBean : alCRSSKUGrpList) {
                    if (hashMapSKUMatByMaterial.containsKey(skuGroupBean.getSKUGroup())) {
                        // Set Scheme Guid to bean 26/09/2017
                        schemeGuidList = schemeGuid(orderMaterialGrpSchemeId, skuGroupBean.getSKUGroup());
                        qpsSchemeGUID = checkQPSSchemeGuid(orderMaterialGrpSchemeId, skuGroupBean.getSKUGroup());
                        skuGroupItemBeanArrayList = new ArrayList<>();
                        if (!schemeGuidList.isEmpty() || !TextUtils.isEmpty(qpsSchemeGUID)) {
                            Constants.BoolMatWiseSchemeAvalible = false;
                            Constants.BoolMatWiseQPSSchemeAvalible = false;
                            getValuesMaterial(hashMapSchemeGuidMatByMaterial, hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup()));
                            skuGroupBean.setSkuGroupItemBean(skuGroupItemBeanArrayList);
                            if (Constants.BoolMatWiseSchemeAvalible || Constants.BoolMatWiseQPSSchemeAvalible) {
                                skuGroupBean.setIsMaterialActive(Constants.X);
                            } else {
                                skuGroupBean.setIsMaterialActive("");
                            }
                        } else {
                            skuGroupBean.setIsMaterialActive("");
                        }
                        if (!schemeGuidList.isEmpty()) {
                            skuGroupBean.setSchemeGuid(schemeGuidList);
                            skuGroupBean.setIsSchemeActive(Constants.X);
                        } else {
                            skuGroupBean.setIsSchemeActive("");
                        }

                        if (!TextUtils.isEmpty(qpsSchemeGUID)) {
                            skuGroupBean.setQPSSchemeGuid(qpsSchemeGUID);
                            skuGroupBean.setSchemeQPSActive(Constants.X);
                        } else {
                            skuGroupBean.setQPSSchemeGuid("");
                            skuGroupBean.setSchemeQPSActive("");
                        }

                        try {
                            if (!skuGroupBean.getSchemeGuid().isEmpty()) {

                                Constants.MAPSCHGuidByCrsSkuGrp.put(skuGroupBean.getSKUGroup(), skuGroupBean.getSchemeGuid());
                            } else {
                                Constants.MAPSCHGuidByCrsSkuGrp.put(skuGroupBean.getSKUGroup(), new ArrayList<String>());
                            }
                        } catch (Exception e) {
                            Constants.MAPSCHGuidByCrsSkuGrp.put(skuGroupBean.getSKUGroup(), new ArrayList<String>());
                        }
                        SKUGroupBean subMatBean = null;
                        try {
                            subMatBean = hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup()).get(0);
                        } catch (Exception e) {
                            subMatBean = new SKUGroupBean();
                            subMatBean.setMRP("0.00");
                        }
                        try {
                            skuGroupBean.setMRP(subMatBean.getMRP());
                        } catch (Exception e) {
                            skuGroupBean.setMRP("0.00");
                        }
                        skuGroupBean.setSkuSubGroupBeanArrayList(hashMapSKUMatByMaterial.get(skuGroupBean.getSKUGroup()));
                    }
                }
            }
        }
        Log.d("Time end getMaterialsByTest", UtilConstants.getSyncHistoryddmmyyyyTime());
        if (alCRSSKUGrpList != null && alCRSSKUGrpList.size() > 0) {
            Collections.sort(alCRSSKUGrpList, new Comparator<SKUGroupBean>() {
                public int compare(SKUGroupBean one, SKUGroupBean other) {
                    return one.getSKUGroupDesc().compareTo(other.getSKUGroupDesc());
                }
            });

        }
        return alCRSSKUGrpList;

    }

    public static ArrayList<SKUGroupBean> getCRSSKUGroupList(String cpStkQry) throws
            OfflineODataStoreException {
        ArrayList<SKUGroupBean> alCPStkList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            SKUGroupBean skuGrpBean;
            HashMap<String, String> mapSKUID = new HashMap<>();
            HashMap<String, String> mapMat = new HashMap<>();
            HashMap<String, String> mapOrderMat = new HashMap<>();
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setOrderMaterialGroupID(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setOrderMaterialGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);
                    skuGrpBean.setMaterialDesc(matSkuDesc);
                    property = properties.get(ConstantsUtils.Brand);
                    skuGrpBean.setBrand((String) property.getValue());
                    property = properties.get(ConstantsUtils.SKUGroup);
                    skuGrpBean.setSKUGroupID((String) property.getValue());
                    property = properties.get(ConstantsUtils.Banner);
                    skuGrpBean.setBanner((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryID);
                    skuGrpBean.setProductCategoryID((String) property.getValue());
                    alCPStkList.add(skuGrpBean);
                }
            }
        }
        return alCPStkList;
    }

    public static ArrayList<HashMap<String, String>> getDBStockList(String cpStkQry, Set<String> mSetCpStockItemGuid) throws OfflineODataStoreException {
        ArrayList<HashMap<String, String>> alCRSSKU = new ArrayList<>();
        HashMap<String, String> hashMapDBSTK = new HashMap<>();
        HashMap<String, String> hashMapUOMISDecimal = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleDBStk = 0.0;
            int count = 0;
            String prevOrdMatGroup = "", currOrdMatGroup = "";
            String prevOrdMatGroupUOM = "", currOrdMatGroupUOM = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
                    prevOrdMatGroup = entities.get(0).getProperties().get(Constants.OrderMaterialGroupID).getValue().toString();
                    prevOrdMatGroupUOM = entities.get(0).getProperties().get(Constants.UOM).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.OrderMaterialGroupID);
                        currOrdMatGroup = (String) property.getValue();


                        property = properties.get(Constants.UOM);
                        currOrdMatGroupUOM = (String) property.getValue();

                        if (!currOrdMatGroup.equals(prevOrdMatGroup)) {

                            hashMapUOMISDecimal.put(prevOrdMatGroup, checkNoUOMZero(prevOrdMatGroupUOM) + "");
                            prevOrdMatGroupUOM = currOrdMatGroupUOM;

                            hashMapDBSTK.put(prevOrdMatGroup, String.valueOf(doubleDBStk));
                            prevOrdMatGroup = currOrdMatGroup;
                            doubleDBStk = 0.0;
                        }
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleDBStk = doubleDBStk + mQty.doubleValue();
                            } else {
                                doubleDBStk = doubleDBStk + 0.0;
                            }

                        }

                        if (entities.size() == count + 1) {
                            hashMapUOMISDecimal.put(currOrdMatGroup, checkNoUOMZero(currOrdMatGroupUOM) + "");

                            hashMapDBSTK.put(currOrdMatGroup, String.valueOf(doubleDBStk));

                        }
                        count++;
                    }
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
            }

        }

        alCRSSKU.add(hashMapDBSTK);
        alCRSSKU.add(hashMapUOMISDecimal);
        return alCRSSKU;

    }

    public static ArrayList<HashMap<String, String>> getDBStockListMaterial(String cpStkQry) throws
            OfflineODataStoreException {
        ArrayList<HashMap<String, String>> alCRSSKU = new ArrayList<>();
        HashMap<String, String> hashMapDBSTKMaterial = new HashMap<>();
        HashMap<String, String> hashMapUOMISDecimalMat = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleDBStk = 0.0;
            double doubleDBStkMaterial = 0.0;
            int count = 0;
            String prevMaterial = "", currMaterial = "";
            String prevMaterialUOM = "", currMaterialUOM = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
                    prevMaterial = entities.get(0).getProperties().get(Constants.MaterialNo).getValue().toString();
                    prevMaterialUOM = entities.get(0).getProperties().get(Constants.UOM).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        currMaterial = (String) property.getValue();

                        property = properties.get(Constants.UOM);
                        currMaterialUOM = (String) property.getValue();

                        if (!currMaterial.equals(prevMaterial)) {


                            hashMapUOMISDecimalMat.put(prevMaterial, checkNoUOMZero(prevMaterialUOM) + "");
                            prevMaterialUOM = currMaterialUOM;

                            hashMapDBSTKMaterial.put(prevMaterial, String.valueOf(doubleDBStkMaterial));
                            prevMaterial = currMaterial;
                            doubleDBStkMaterial = 0.0;
                        }

                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleDBStkMaterial = doubleDBStkMaterial + mQty.doubleValue();
                            } else {
                                doubleDBStkMaterial = doubleDBStkMaterial + 0.0;
                            }

                        }


                        if (entities.size() == count + 1) {
                            hashMapUOMISDecimalMat.put(currMaterial, checkNoUOMZero(currMaterialUOM) + "");

                            hashMapDBSTKMaterial.put(currMaterial, String.valueOf(doubleDBStkMaterial));
                        }
                        count++;
                    }
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
            }

        }

        alCRSSKU.add(hashMapDBSTKMaterial);
        alCRSSKU.add(hashMapUOMISDecimalMat);
        return alCRSSKU;

    }

    public static HashMap<String, String> getRetStockList(String cpStkQry) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMapRetilerSTK = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
            int count = 0;
            String prevOrdMatGroup = "", currOrdMatGroup = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
                    prevOrdMatGroup = entities.get(0).getProperties().get(Constants.OrderMaterialGroupID).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        currOrdMatGroup = (String) property.getValue();
                        if (!currOrdMatGroup.equals(prevOrdMatGroup)) {
                            hashMapRetilerSTK.put(prevOrdMatGroup, String.valueOf(doubleRetailerStk));
                            prevOrdMatGroup = currOrdMatGroup;
                            doubleRetailerStk = 0.0;
                        }
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleRetailerStk = doubleRetailerStk + mQty.doubleValue();
                            } else {
                                doubleRetailerStk = doubleRetailerStk + 0.0;
                            }

                        }

                        if (entities.size() == count + 1) {
                            hashMapRetilerSTK.put(currOrdMatGroup, String.valueOf(doubleRetailerStk));
                        }
                        count++;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }
        return hashMapRetilerSTK;

    }

    public static HashMap<String, String> getMaterialRetStockList(String cpStkQry) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMapRetilerSTK = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
            int count = 0;
            String preMaterial = "", currMaterial = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                try {
                    if (entities.get(0).getProperties().get(Constants.MaterialNo).getValue() != null) {
                        preMaterial = entities.get(0).getProperties().get(Constants.MaterialNo).getValue().toString();
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.MaterialNo);
                            currMaterial = (String) property.getValue();
                            if (!currMaterial.equals(preMaterial)) {
                                hashMapRetilerSTK.put(preMaterial, String.valueOf(doubleRetailerStk));
                                preMaterial = currMaterial;
                                doubleRetailerStk = 0.0;
                            }
                            property = properties.get(Constants.UnrestrictedQty);
                            if (property != null) {
                                mQty = (BigDecimal) property.getValue();
                                if (mQty != null) {
                                    doubleRetailerStk = doubleRetailerStk + mQty.doubleValue();
                                } else {
                                    doubleRetailerStk = doubleRetailerStk + 0.0;
                                }

                            }

                            if (entities.size() == count + 1) {
                                hashMapRetilerSTK.put(currMaterial, String.valueOf(doubleRetailerStk));
                            }
                            count++;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }
        return hashMapRetilerSTK;

    }

    public static HashMap<String, SchemeBean> getInstantSchemesAndSchemeType(String schemeQry) throws
            OfflineODataStoreException {
        HashMap<String, SchemeBean> hashMapSchemeTypeID = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            SchemeBean schemeBean = null;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {

                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());
                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;
                    String schemeGuid = "";
                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                        schemeGuid = mSchemeGuid.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.IsIncludingPrimary);
                    schemeBean.setIsIncludingPrimary((String) property.getValue());

                    property = properties.get(Constants.TargetBasedID);
                    schemeBean.setTargetBasedID((String) property.getValue());

                    hashMapSchemeTypeID.put(schemeGuid, schemeBean);

                }
            }

        }
        return hashMapSchemeTypeID;

    }

    public static SchemeBean getSchemeItemDetailsBySchemeGuid(String schemeQry) throws
            OfflineODataStoreException {
        SchemeBean schemeBean = new SchemeBean();
        schemeBean.setItemMin("0");
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            String stItmMinQty = "0";
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    property = properties.get(Constants.ItemMin);
                    BigDecimal freeQty = (BigDecimal) property.getValue();

                    try {
                        if (freeQty != null) {
                            stItmMinQty = freeQty.toString();
                        } else {
                            stItmMinQty = "0.0";
                        }
                    } catch (Exception e) {
                        stItmMinQty = "0.0";
                    }

                    if (!TextUtils.isEmpty(stItmMinQty)) {
                        schemeBean.setItemMin(stItmMinQty);

                        property = properties.get(Constants.OnSaleOfCatID);
                        schemeBean.setOnSaleOfCatID((String) property.getValue());

                        property = properties.get(ConstantsUtils.FreeMatCritria);
                        schemeBean.setFreeMatCritria((String) property.getValue());

                        return schemeBean;
                    }
                }
            }

        }
        return schemeBean;

    }

    public static HashMap<String, String> getSegmentedMaterialsList(String segMatqry) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMapSegMat = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
            int count = 0;
            String segID = "", cSegMat = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, segMatqry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        cSegMat = (String) property.getValue();
                        property = properties.get(Constants.SegmentId);
                        segID = (String) property.getValue();
                        hashMapSegMat.put(cSegMat, segID);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return hashMapSegMat;

    }

    public static HashMap<String, String> getMRPList(Set<String> mSetCPStkItemGuid) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMapMRP = new HashMap<>();

        String mCPStkItemGuidQry = Constants.convertSetToString(mSetCPStkItemGuid, Constants.CPStockItemGUID);
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleRetailerStk = 0.0;
            int count = 0;
            String prevOrdMatGroup = "", currOrdMatGroup = "";


            BigDecimal mMRP = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.CPStockItemSnos
                    + "?$select=" + Constants.MRP + " &$filter=" + mCPStkItemGuidQry + "   &$orderby=" + Constants.ManufacturingDate + "%20asc ");
            if (entities != null && entities.size() > 0) {
                prevOrdMatGroup = entities.get(0).getProperties().get(Constants.OrderMaterialGroupID).getValue().toString();
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();


                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mCpStockItemGuid = null;
                    try {
                        mCpStockItemGuid = (ODataGuid) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        mMRP = (BigDecimal) property.getValue();

                    }
                }
            }

        }
        return hashMapMRP;

    }

    public static HashMap<String, String> getTargetByOrderMatGrp
            (HashMap<String, String> mMapOrderMatGrp, String mCPGuid, String mTargetQry) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMapTargetQty = new HashMap<>();

        if (getVisitStatusForCustomer("" + Constants.TargetItems +
                "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' ")) {
            if (mTargetQry != null && !mTargetQry.equalsIgnoreCase("")) {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.TargetItems
                        + "?$select=" + Constants.TargetQty + "," + Constants.OrderMaterialGroupID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and " + mTargetQry + "" +
                        "  ");
                ODataProperty property;
                ODataPropMap properties;
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        try {
                            properties = entity.getProperties();

                            Double mDobTargetQty = 0.0;

                            property = properties.get(Constants.TargetQty);
                            try {
                                BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                                mDobTargetQty = monthTargetVal.doubleValue();
                            } catch (Exception e) {
                                mDobTargetQty = 0.0;
                                e.printStackTrace();
                            }

                            if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                                mDobTargetQty = 0.0;
                            }

                            property = properties.get(Constants.OrderMaterialGroupID);
                            hashMapTargetQty.put((String) property.getValue(), String.valueOf(mDobTargetQty));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }


                }
            }
        }
        return hashMapTargetQty;
    }

    public static HashMap<String, String> getSSInvItmQtyByOrderMatGrp
            (HashMap<String, String> mMapOrderMatGrp, String mCPGuid, String mTargetQry) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMaPSSInvItemQty = new HashMap<>();

        double doubleInvQty = 0.0;
        int count = 0;
        String prevOrdMatGroup = "", currOrdMatGroup = "";
        BigDecimal mQty = new BigDecimal("0");

        String getInvoiceGuid = getInvoiceGuid(mCPGuid);
        if (!TextUtils.isEmpty(getInvoiceGuid)) {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.SSInvoiceItemDetails
                    + "?$select=" + Constants.OrderMaterialGroup + "," + Constants.Quantity + " &$filter=" + mTargetQry + " and " + getInvoiceGuid + " &$orderby=" + Constants.OrderMaterialGroup + " ");
            ODataProperty property;
            ODataPropMap properties;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();

                        property = properties.get(Constants.OrderMaterialGroup);
                        currOrdMatGroup = (String) property.getValue();
                        if (!currOrdMatGroup.equals(prevOrdMatGroup)) {
                            hashMaPSSInvItemQty.put(prevOrdMatGroup, String.valueOf(doubleInvQty));
                            prevOrdMatGroup = currOrdMatGroup;
                            doubleInvQty = 0.0;
                        }
                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleInvQty = doubleInvQty + mQty.doubleValue();
                            } else {
                                doubleInvQty = doubleInvQty + 0.0;
                            }

                        }
                        if (entities.size() == count + 1) {
                            hashMaPSSInvItemQty.put(currOrdMatGroup, String.valueOf(doubleInvQty));
                        }
                        count++;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return hashMaPSSInvItemQty;
    }

    private static String getInvoiceGuid(String mCPGuid) throws OfflineODataStoreException {
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.SSInvoices + "?$select=" + Constants.InvoiceGUID + " &$filter=" + Constants.SoldToCPGUID + " eq guid'" + Constants.convertStrGUID32to36(mCPGuid) + "' and " + Constants.InvoiceDate +
                " ge datetime'" + Constants.getFirstDateOfCurrentMonth() + "' and " + Constants.InvoiceDate + " lt datetime'" + UtilConstants.getNewDate() + "'");
        ODataProperty property;
        ODataPropMap properties;
        String invoiceGuid = "";
        if (entities != null && entities.size() > 0) {
            int i = 0;
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.InvoiceGUID);
                try {
                    ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                    String invoiceGuid32 = mInvoiceGUID.guidAsString32().toUpperCase();
                    if (i == 0 && i == entities.size() - 1) {
                        invoiceGuid = invoiceGuid
                                + "(" + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "')";

                    } else if (i == 0) {
                        invoiceGuid = invoiceGuid
                                + "(" + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "'";

                    } else if (i == entities.size() - 1) {
                        invoiceGuid = invoiceGuid
                                + " or " + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "')";
                    } else {
                        invoiceGuid = invoiceGuid
                                + " or " + Constants.InvoiceGUID + " eq guid'"
                                + Constants.convertStrGUID32to36(invoiceGuid32).toUpperCase() + "'";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                i++;
            }
        }
        return invoiceGuid;
    }

    public static Map<String, String> getMustSellMatFromInvItms(String invItemQry) throws
            OfflineODataStoreException {
        HashMap<String, String> hashMapMustSellMat = new HashMap<>();
        Map<String, String> hashMapMatAfterSorting = new HashMap<>();
        Double mDoubTotalSum = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            double doubleInvQty = 0.0;
            int count = 0;
            String prevOrdMatGroup = "", currOrdMatGroup = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invItemQry);
            if (entities != null && entities.size() > 0) {
                try {
                    prevOrdMatGroup = entities.get(0).getProperties().get(Constants.OrderMaterialGroup).getValue().toString();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroup);
                        currOrdMatGroup = (String) property.getValue();
                        if (!currOrdMatGroup.equals(prevOrdMatGroup)) {
                            Double mAvgCont = Constants.getAvgSumCal(doubleInvQty, 3);
                            hashMapMustSellMat.put(currOrdMatGroup, String.valueOf(mAvgCont.doubleValue()));
                            mDoubTotalSum = mDoubTotalSum + mAvgCont;
                            prevOrdMatGroup = currOrdMatGroup;
                            doubleInvQty = 0.0;
                        }
                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                doubleInvQty = doubleInvQty + mQty.doubleValue();
                            } else {
                                doubleInvQty = doubleInvQty + 0.0;
                            }
                        }

                        if (entities.size() == count + 1) {
                            Double mAvgCont = Constants.getAvgSumCal(doubleInvQty, 3);
                            hashMapMustSellMat.put(currOrdMatGroup, String.valueOf(mAvgCont.doubleValue()));
                            mDoubTotalSum = mDoubTotalSum + mAvgCont;
                        }
                        count++;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }


        if (!hashMapMustSellMat.isEmpty()) {
            Iterator iterator = hashMapMustSellMat.keySet().iterator();
            while (iterator.hasNext()) {
                String key = iterator.next().toString();

                Double mDouPerAch = 0.0;
                try {
                    mDouPerAch = (Double.parseDouble(hashMapMustSellMat.get(key)) / mDoubTotalSum * 100);
                } catch (NumberFormatException e) {
                    mDouPerAch = 0.0;
                }

                if (mDouPerAch.isInfinite() || mDouPerAch.isNaN()) {
                    mDouPerAch = 0.0;
                }

                hashMapMustSellMat.put(key, mDouPerAch.toString());
            }

//             hashMapMatAfterSorting = new TreeMap<>(hashMapMustSellMat);

            //sorting Map like Hashtable and HashMap by values in Java
            hashMapMatAfterSorting = Constants.sortByValues(hashMapMustSellMat);

        }
        return hashMapMatAfterSorting;

    }

    public static ArrayList<SKUGroupBean> getMaterialsByCRSSKUGroup(String
                                                                            focusedPrdQry, String mStrLastMatno,
                                                                    SKUGroupBean skuGroupBean,
                                                                    ArrayList<HashMap<String, String>> alMapMaterialDBStkUOM,
                                                                    HashMap<String, String> hashMapRetailerStkByMat) throws
            OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        ArrayList<SKUGroupBean> matList = new ArrayList<>();
        HashMap<String, String> hashMapDBStk = new HashMap<>();
        HashMap<String, String> hashMapUOM = new HashMap<>();
        if (alMapMaterialDBStkUOM != null && alMapMaterialDBStkUOM.size() > 0) {
            hashMapDBStk = alMapMaterialDBStkUOM.get(0);
            hashMapUOM = alMapMaterialDBStkUOM.get(1);
        }
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setSKUGroup(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);

                    boolean isMatAval = false;
                    if (tempArrList.size() == 0) {
                        isMatAval = true;
                    } else if (!tempArrList.contains(matNo)) {
                        isMatAval = true;
                    }

                    if (isMatAval) {
                        try {

                            if (Constants.MAPQPSSCHGuidByMaterial.containsKey(matNo) || Constants.MAPSCHGuidByMaterial.containsKey(matNo)) {
                                skuGrpBean.setMatLevelImageDisplay(true);
                            } else {
                                skuGrpBean.setMatLevelImageDisplay(false);
                            }

                        } catch (Exception e) {
                            skuGrpBean.setMatLevelImageDisplay(false);
                        }

                        skuGrpBean.setMaterialDesc(matSkuDesc);
//                        String qty = getDBStk(Constants.CPStockItems
//                                + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.MaterialNo + " eq '" + matNo + "' and " + Constants.StockOwner + " eq '01' ");

                        property = properties.get(Constants.UOM);
                        skuGrpBean.setUOM((String) property.getValue());

                       /* if (checkNoUOMZero((String) property.getValue()))
                            skuGrpBean.setDBSTK(trimQtyDecimalPlace(qty));
                        else
                            skuGrpBean.setDBSTK(qty);*/


                        try {
                            if (hashMapUOM.get(matNo).equalsIgnoreCase(Constants.IS_TRUE))
                                skuGrpBean.setDBSTK(trimQtyDecimalPlace(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0"));
                            else
                                skuGrpBean.setDBSTK(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0.0");
                        } catch (Exception e) {
                            skuGrpBean.setDBSTK(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0.0");
                        }

                        try {
                            if (hashMapUOM.get(matNo).equalsIgnoreCase(Constants.IS_TRUE))
                                skuGrpBean.setRETSTK(trimQtyDecimalPlace(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0"));
                            else
                                skuGrpBean.setRETSTK(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0.0");
                        } catch (Exception e) {
                            skuGrpBean.setRETSTK(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0.0");
                        }

                        property = properties.get(Constants.Currency);
                        skuGrpBean.setCurrency((String) property.getValue());

                        if (mStrLastMatno.equalsIgnoreCase("") || !mStrLastMatno.equalsIgnoreCase(matNo)) {
                            skuGrpBean.setLastPurchasedMaterial("");
                        } else {
                            skuGrpBean.setLastPurchasedMaterial(Constants.YES);
                        }
                        skuGrpBean.setChildItemTag(Constants.YES);

                        property = properties.get(Constants.CPStockItemGUID);
                        ODataGuid mCpStockItemGuid = null;
                        try {
                            mCpStockItemGuid = (ODataGuid) property.getValue();
                            skuGrpBean.setCPStockItemGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        skuGrpBean.setMRP(getMaterialMRP(Constants.CPStockItemSnos
                                + "?$select=" + Constants.MRP + " &$filter=" + Constants.MaterialNo + " eq '"
                                + matNo + "' and " + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() +
                                "'   &$orderby=" + Constants.ManufacturingDate + "%20desc ") + "");

                        property = properties.get(ConstantsUtils.Brand);
                        skuGrpBean.setBrand((String) property.getValue());
                        property = properties.get(ConstantsUtils.SKUGroup);
                        skuGrpBean.setSKUGroupID((String) property.getValue());
                        property = properties.get(ConstantsUtils.Banner);
                        skuGrpBean.setBanner((String) property.getValue());
                        property = properties.get(ConstantsUtils.ProductCategoryID);
                        skuGrpBean.setProductCategoryID((String) property.getValue());
                        matList.add(skuGrpBean);
                        tempArrList.add(matNo);
                    }
                }
            }
        }
        return matList;

    }

    public static HashMap<String, ArrayList<SKUGroupBean>> getMaterialsByTest(String
                                                                                      focusedPrdQry, ArrayList<HashMap<String, String>> alMapMaterialDBStkUOM,
                                                                              HashMap<String, String> hashMapRetailerStkByMat, String mStrLastMatno) throws
            OfflineODataStoreException {

        HashMap<String, ArrayList<SKUGroupBean>> hashMapSKUMatByMaterial = new HashMap<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        HashMap<String, String> hashMapDBStk = new HashMap<>();
        HashMap<String, String> hashMapUOM = new HashMap<>();
        String mMRPQRY = "";
        if (alMapMaterialDBStkUOM != null && alMapMaterialDBStkUOM.size() > 0) {
            hashMapDBStk = alMapMaterialDBStkUOM.get(0);
            hashMapUOM = alMapMaterialDBStkUOM.get(1);
        }
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;

            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SKUGroupBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGrpId = (String) property.getValue();
                        skuGrpBean.setSKUGroup(orderMatGrpId);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        skuGrpBean.setSKUGroupDesc((String) property.getValue());
                        property = properties.get(Constants.MaterialNo);
                        String matNo = (String) property.getValue();
                        property = properties.get(Constants.MaterialDesc);
                        String matSkuDesc = (String) property.getValue();
                        skuGrpBean.setMaterialNo(matNo);

                        boolean isMatAval = false;
                        if (tempArrList.size() == 0) {
                            isMatAval = true;
                        } else if (!tempArrList.contains(matNo)) {
                            isMatAval = true;
                        }
                        if (isMatAval) {
                            try {
                                if (Constants.MAPQPSSCHGuidByMaterial.containsKey(matNo) || Constants.MAPSCHGuidByMaterial.containsKey(matNo)) {
                                    skuGrpBean.setMatLevelImageDisplay(true);
                                } else {
                                    skuGrpBean.setMatLevelImageDisplay(false);
                                }
                            } catch (Exception e) {
                                skuGrpBean.setMatLevelImageDisplay(false);
                            }

                            skuGrpBean.setMaterialDesc(matSkuDesc);

                            property = properties.get(Constants.UOM);
                            skuGrpBean.setUOM((String) property.getValue());

                            property = properties.get(Constants.UnrestrictedQty);
                            if (property != null) {
                                BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();
                                Double doubleMatQty = 0.0;
                                if (mDecimialUnrestrictedQty != null) {
                                    doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                                } else {
                                    doubleMatQty = 0.0;
                                }
                                skuGrpBean.setUnResQty(doubleMatQty);
                            } else {
                                skuGrpBean.setUnResQty(0.0);
                            }

                            try {
                                if (hashMapUOM.get(matNo).equalsIgnoreCase(Constants.IS_TRUE))
                                    skuGrpBean.setDBSTK(trimQtyDecimalPlace(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0"));
                                else
                                    skuGrpBean.setDBSTK(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0.0");
                            } catch (Exception e) {
                                skuGrpBean.setDBSTK(hashMapDBStk.get(matNo) != null ? hashMapDBStk.get(matNo) : "0.0");
                            }

                            try {
                                if (hashMapUOM.get(matNo).equalsIgnoreCase(Constants.IS_TRUE))
                                    skuGrpBean.setRETSTK(trimQtyDecimalPlace(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0"));
                                else
                                    skuGrpBean.setRETSTK(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0.0");
                            } catch (Exception e) {
                                skuGrpBean.setRETSTK(hashMapRetailerStkByMat.get(matNo) != null ? hashMapRetailerStkByMat.get(matNo) : "0.0");
                            }

                            property = properties.get(Constants.Currency);
                            skuGrpBean.setCurrency((String) property.getValue());

                            if (mStrLastMatno.equalsIgnoreCase("") || !mStrLastMatno.equalsIgnoreCase(matNo)) {
                                skuGrpBean.setLastPurchasedMaterial("");
                            } else {
                                skuGrpBean.setLastPurchasedMaterial(Constants.YES);
                            }
                            skuGrpBean.setChildItemTag(Constants.YES);

                            property = properties.get(Constants.CPStockItemGUID);
                            ODataGuid mCpStockItemGuid = null;
                            try {
                                mCpStockItemGuid = (ODataGuid) property.getValue();
                                skuGrpBean.setCPStockItemGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                           /* skuGrpBean.setMRP(getMaterialMRP(Constants.CPStockItemSnos
                                    + "?$select=" + Constants.MRP + " &$filter=" + Constants.MaterialNo + " eq '"
                                    + matNo + "' and " + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() +
                                    "'   &$orderby=" + Constants.ManufacturingDate + "%20desc ") + "");*/

                            skuGrpBean.setMRP("0.00");

                            property = properties.get(ConstantsUtils.Brand);
                            skuGrpBean.setBrand((String) property.getValue());
                            property = properties.get(ConstantsUtils.SKUGroup);
                            skuGrpBean.setSKUGroupID((String) property.getValue());
                            property = properties.get(ConstantsUtils.Banner);
                            skuGrpBean.setBanner((String) property.getValue());
                            property = properties.get(ConstantsUtils.ProductCategoryID);
                            skuGrpBean.setProductCategoryID((String) property.getValue());
                            tempArrList.add(matNo);

                            if (mMRPQRY.length() == 0) {

                                mMRPQRY += "" + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() + "'";
                            } else {

                                mMRPQRY += " or " + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() + "'";
                            }

                            ArrayList<SKUGroupBean> schemeBeanArrayList = hashMapSKUMatByMaterial.get(orderMatGrpId);
                            if (schemeBeanArrayList == null) {
                                schemeBeanArrayList = new ArrayList<>();
                                schemeBeanArrayList.add(skuGrpBean);
                                hashMapSKUMatByMaterial.put(orderMatGrpId, schemeBeanArrayList);
                            } else {
                                schemeBeanArrayList.add(skuGrpBean);
                                hashMapSKUMatByMaterial.put(orderMatGrpId, schemeBeanArrayList);
                            }
                        }
                    }
                }
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        Log.d("Time start getSubMaterialsMRP", UtilConstants.getSyncHistoryddmmyyyyTime());
        String mCPItmMRPQry = "";
        HashMap<String, String> hashMapMRPByCPStkItemGuid = new HashMap<>();
        hmMRPByItemIfQtyAval.clear();
        if (!mMRPQRY.equalsIgnoreCase("")) {
//            mCPItmMRPQry = Constants.CPStockItemSnos
//                    + "?$select=" + Constants.MRP + ","+Constants.CPStockItemGUID+","+Constants.Quantity+" &$filter= ("+mMRPQRY+") " +
//                    "&$orderby=" + Constants.ManufacturingDate + "%20desc ";
            mCPItmMRPQry = Constants.CPStockItemSnos
                    + "?$select=" + Constants.MRP + "," + Constants.CPStockItemGUID + "," + Constants.Quantity + "," + Constants.ManufacturingDate + " &$filter= (" + mMRPQRY + ") " +
                    "&$orderby=" + Constants.ManufacturingDate + "%20desc ";
            hashMapMRPByCPStkItemGuid = getMaterialMRPByCpStockItem(mCPItmMRPQry);
            Log.d("Time end getSubMaterialsMRP", UtilConstants.getSyncHistoryddmmyyyyTime());
        }
        if (hashMapSKUMatByMaterial != null && !hashMapSKUMatByMaterial.isEmpty()) {
            Iterator iterator = hashMapSKUMatByMaterial.keySet().iterator();
            while (iterator.hasNext()) {
                String orderMatGrpId = iterator.next().toString();
                ArrayList<SKUGroupBean> subMatList = hashMapSKUMatByMaterial.get(orderMatGrpId);
                if (subMatList != null && subMatList.size() > 0) {
                    if (subMatList.size() > 1) {
                        ArrayList<SKUGroupBean> subTempMatList = new ArrayList<>();
                        boolean mBoolUnResQty = false;
                        for (SKUGroupBean skuGroupBean : subMatList) {
                            if (hmMRPByItemIfQtyAval.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hmMRPByItemIfQtyAval.get(skuGroupBean.getCPStockItemGUID()));
                            } else if (hashMapMRPByCPStkItemGuid.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hashMapMRPByCPStkItemGuid.get(skuGroupBean.getCPStockItemGUID()));
                            }
//                            if(hashMapMRPByCPStkItemGuid.containsKey(skuGroupBean.getCPStockItemGUID())){
//                                skuGroupBean.setMRP(hashMapMRPByCPStkItemGuid.get(skuGroupBean.getCPStockItemGUID()));
//                            }
                            if (skuGroupBean.getUnResQty() > 0 && !mBoolUnResQty) {
                                mBoolUnResQty = true;
                                subTempMatList.add(0, skuGroupBean);
                            } else {
                                subTempMatList.add(skuGroupBean);
                            }
                        }
                        hashMapSKUMatByMaterial.put(orderMatGrpId, subTempMatList);
                    } else {
                        for (SKUGroupBean skuGroupBean : subMatList) {
                            if (hmMRPByItemIfQtyAval.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hmMRPByItemIfQtyAval.get(skuGroupBean.getCPStockItemGUID()));
                            } else if (hashMapMRPByCPStkItemGuid.containsKey(skuGroupBean.getCPStockItemGUID())) {
                                skuGroupBean.setMRP(hashMapMRPByCPStkItemGuid.get(skuGroupBean.getCPStockItemGUID()));
                            }
                        }
                    }
                }
            }
        }

        return hashMapSKUMatByMaterial;
    }

    public static HashMap<String, ArrayList<String>> getSchemeGuidByMaterial(String
                                                                                     schemeQry, HashMap<String, ArrayList<String>> hashMapSchemeMatByMaterial) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeGUID);
                    String mStrSchemeGuid = "";
                    try {
                        ODataGuid mSchmeGUID = (ODataGuid) property.getValue();
                        mStrSchemeGuid = mSchmeGUID.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    ArrayList<String> schemeGuidArrayList = hashMapSchemeMatByMaterial.get(matNo);
                    if (schemeGuidArrayList == null) {
                        schemeGuidArrayList = new ArrayList<>();
                        schemeGuidArrayList.add(mStrSchemeGuid);
                        hashMapSchemeMatByMaterial.put(matNo, schemeGuidArrayList);
                    } else {
                        schemeGuidArrayList.add(mStrSchemeGuid);
                        hashMapSchemeMatByMaterial.put(matNo, schemeGuidArrayList);
                    }
                }
            }
        }

        return hashMapSchemeMatByMaterial;
    }

    private static ArrayList<String> schemeGuid
            (ArrayList<SchemeIDBean> schemeIDBeanArrayList, String orderMaterialId) {
//        String schemeGuid = "";
        ArrayList<String> schemeGuidList = new ArrayList<>();
        for (SchemeIDBean schemeIDBean : schemeIDBeanArrayList) {
            if (schemeIDBean.getOrderMaterialId() != null) {
                if (schemeIDBean.getOrderMaterialId().contains(orderMaterialId) && schemeIDBean.getSchemeCatID().equalsIgnoreCase(Constants.SchemeCatIDInstantScheme)) {
                    Log.d(TAG, "getCRSSKUGroup: " + schemeIDBean.getSchemeGuid() + " orderMaterialId :" + orderMaterialId);
                    schemeGuidList.add(schemeIDBean.getSchemeGuid());
//                    return schemeIDBean.getSchemeGuid();
                }
            }
        }

        return schemeGuidList;
    }

    private static String checkQPSSchemeGuid
            (ArrayList<SchemeIDBean> schemeIDBeanArrayList, String orderMaterialId) {
        String schemeGuid = "";
        for (SchemeIDBean schemeIDBean : schemeIDBeanArrayList) {
            if (schemeIDBean.getOrderMaterialId() != null) {
                if (schemeIDBean.getOrderMaterialId().contains(orderMaterialId) && schemeIDBean.getSchemeCatID().equalsIgnoreCase(Constants.SchemeCatIDQPSScheme)) {
                    return schemeIDBean.getSchemeGuid();
                }
            }
        }

        return schemeGuid;
    }

    public static ArrayList<SKUGroupItemBean> getValueForMaterialGroup(String mQry, String
            columnName, ArrayList<SKUGroupItemBean> skuGroupItemBeanArrayList) throws
            OfflineODataStoreException {
        String mStrVal = "";
        SKUGroupItemBean skuGroupItemBeanl;
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property, propertySchemeItem;
                ODataPropMap properties, propertiesSchemeItem;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        mStrVal = (String) property.getValue();
                        String validBrandScheme = Constants.SchemeItemDetails + "?$filter= " + Constants.MaterialNo + " eq '" + mStrVal + "' and " + Constants.OnSaleOfCatID + " eq '" + Constants.OnSaleOfCatIDMaterial + "' ";
                        List<ODataEntity> matEntities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, validBrandScheme);
                        if (matEntities != null && matEntities.size() > 0) {

                            for (ODataEntity matEnt : matEntities) {
                                skuGroupItemBeanl = new SKUGroupItemBean();
                                propertiesSchemeItem = matEnt.getProperties();

                                propertySchemeItem = propertiesSchemeItem.get(Constants.SchemeGUID);
                                String mStrSchemeGuid = "";
                                try {
                                    ODataGuid mSchmeGUID = (ODataGuid) propertySchemeItem.getValue();
                                    mStrSchemeGuid = mSchmeGUID.guidAsString36().toUpperCase();

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                if (Constants.HashMapSchemeIsInstantOrQPS.containsKey(mStrSchemeGuid)) {
                                    if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDInstantScheme)) {
                                        Constants.BoolMatWiseSchemeAvalible = true;
                                        skuGroupItemBeanl.setImageDisplay(true);
                                        skuGroupItemBeanl.setSchemeGuid(mStrSchemeGuid);
                                        skuGroupItemBeanl.setSchemeCatID(Constants.SchemeCatIDInstantScheme);
                                        ArrayList<String> schemeBeanArrayList = Constants.MAPSCHGuidByMaterial.get(mStrVal);
                                        if (schemeBeanArrayList == null) {
                                            schemeBeanArrayList = new ArrayList<>();
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        } else {
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        }
                                    } else if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDQPSScheme)) {
                                        Constants.BoolMatWiseQPSSchemeAvalible = true;
                                        skuGroupItemBeanl.setImageDisplay(true);
                                        skuGroupItemBeanl.setQpsSchemeGuid(mStrSchemeGuid);
                                        skuGroupItemBeanl.setSchemeCatID(Constants.SchemeCatIDQPSScheme);
                                        Constants.MAPQPSSCHGuidByMaterial.put(mStrVal, mStrSchemeGuid);
                                    } else {
                                        skuGroupItemBeanl.setImageDisplay(false);
                                        skuGroupItemBeanl.setSchemeGuid("");
                                        skuGroupItemBeanl.setSchemeCatID("");
                                        skuGroupItemBeanl.setQpsSchemeGuid("");
                                    }
                                } else {
                                    skuGroupItemBeanl.setImageDisplay(false);
                                    skuGroupItemBeanl.setSchemeGuid("");
                                    skuGroupItemBeanl.setSchemeCatID("");
                                    skuGroupItemBeanl.setQpsSchemeGuid("");
                                }

                               /* if (getVisitStatusForCustomer("" + Constants.Schemes +
                                        "?$top=1 &$select=" + Constants.SchemeName + " &$filter=" + Constants.SchemeGUID + " eq guid'" + mStrSchemeGuid + "' and "
                                        + Constants.SchemeCatID + " eq '000002' and " + Constants.StatusID + " eq '01' and " + ConstantsUtils.ApprovalStatusID + " eq '03' and ValidTo ge datetime'" + UtilConstants.getNewDate() + "'")) {
                                    Constants.BoolMatWiseSchemeAvalible = true;
                                    skuGroupItemBeanl.setImageDisplay(true);
                                    skuGroupItemBeanl.setSchemeGuid(mStrSchemeGuid);
                                    skuGroupItemBeanl.setSchemeCatID(Constants.SchemeCatIDInstantScheme);
                                    ArrayList<String> schemeBeanArrayList = Constants.MAPSCHGuidByMaterial.get(mStrVal);
                                    if (schemeBeanArrayList == null) {
                                        schemeBeanArrayList = new ArrayList<>();
                                        schemeBeanArrayList.add(mStrSchemeGuid);
                                        Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                    } else {
                                        schemeBeanArrayList.add(mStrSchemeGuid);
                                        Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                    }
//                                    Constants.MAPSCHGuidByMaterial.put(mStrVal,mStrSchemeGuid);
                                } else if (getVisitStatusForCustomer("" + Constants.Schemes +
                                        "?$top=1 &$select=" + Constants.SchemeName + " &$filter=" + Constants.SchemeGUID + " eq guid'" + mStrSchemeGuid + "' and "
                                        + Constants.SchemeCatID + " eq '000001' and " + Constants.StatusID + " eq '01' and " + ConstantsUtils.ApprovalStatusID + " eq '03' and ValidTo ge datetime'" + UtilConstants.getNewDate() + "'")) {
                                    Constants.BoolMatWiseQPSSchemeAvalible = true;
                                    skuGroupItemBeanl.setImageDisplay(true);
                                    skuGroupItemBeanl.setQpsSchemeGuid(mStrSchemeGuid);
                                    skuGroupItemBeanl.setSchemeCatID(Constants.SchemeCatIDQPSScheme);
                                    Constants.MAPQPSSCHGuidByMaterial.put(mStrVal, mStrSchemeGuid);
                                } else {
                                    skuGroupItemBeanl.setImageDisplay(false);
                                    skuGroupItemBeanl.setSchemeGuid("");
                                    skuGroupItemBeanl.setSchemeCatID("");
                                    skuGroupItemBeanl.setQpsSchemeGuid("");
                                }*/

                                skuGroupItemBeanl.setMaterialId(mStrVal);
                                skuGroupItemBeanArrayList.add(skuGroupItemBeanl);
                            }


                        } else {
                            skuGroupItemBeanl = new SKUGroupItemBean();
                            skuGroupItemBeanl.setMaterialId(mStrVal);
                            skuGroupItemBeanArrayList.add(skuGroupItemBeanl);
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return skuGroupItemBeanArrayList;

    }

    public static void getValuesMaterial
            (HashMap<String, ArrayList<String>> hashMapSchemeGuidMatByMaterial, ArrayList<SKUGroupBean> alMat) {
        String mStrVal = "";
        try {
            if (alMat != null && alMat.size() > 0) {
                for (SKUGroupBean skuGroupBean : alMat) {
                    mStrVal = skuGroupBean.getMaterialNo();
                    if (hashMapSchemeGuidMatByMaterial.size() > 0) {
                        if (hashMapSchemeGuidMatByMaterial.containsKey(mStrVal)) {

                            for (String mStrSchemeGuid : hashMapSchemeGuidMatByMaterial.get(mStrVal)) {
                                if (Constants.HashMapSchemeIsInstantOrQPS.containsKey(mStrSchemeGuid)) {
                                    if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDInstantScheme)) {
                                        Constants.BoolMatWiseSchemeAvalible = true;
                                        ArrayList<String> schemeBeanArrayList = Constants.MAPSCHGuidByMaterial.get(mStrVal);
                                        if (schemeBeanArrayList == null) {
                                            schemeBeanArrayList = new ArrayList<>();
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        } else {
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        }
                                        skuGroupBean.setMatLevelImageDisplay(true);
                                    } else if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDQPSScheme)) {
                                        Constants.BoolMatWiseQPSSchemeAvalible = true;
                                        Constants.MAPQPSSCHGuidByMaterial.put(mStrVal, mStrSchemeGuid);
                                        skuGroupBean.setMatLevelImageDisplay(true);
                                    }
                                }
                            }

                        }
                    }

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }


      /*  try {

            if (Constants.MAPQPSSCHGuidByMaterial.containsKey(matNo) || Constants.MAPSCHGuidByMaterial.containsKey(matNo)) {
                skuGrpBean.setMatLevelImageDisplay(true);
            } else {
                skuGrpBean.setMatLevelImageDisplay(false);
            }

        } catch (Exception e) {
            skuGrpBean.setMatLevelImageDisplay(false);
        }*/

    }

    public static ArrayList<SKUGroupBean> getMaterialsByCRSSKUGroup(String
                                                                            focusedPrdQry, String mStrLastMatno) throws OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        ArrayList<SKUGroupBean> matList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setSKUGroup(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);

                    boolean isMatAval = false;
                    if (tempArrList.size() == 0) {
                        isMatAval = true;
                    } else if (!tempArrList.contains(matNo)) {
                        isMatAval = true;
                    }

                    if (isMatAval) {

                        property = properties.get(Constants.CPStockItemGUID);
                        ODataGuid mCpStockItemGuid = null;
                        try {
                            mCpStockItemGuid = (ODataGuid) property.getValue();
                            skuGrpBean.setCPStockItemGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        // Check material is free material or not. If it is free material dont add to list
                        if (OfflineManager.getVisitStatusForCustomer(Constants.CPStockItemSnos
                                + "?$top=1 &$filter=" + Constants.MaterialNo + " eq '" + matNo + "' and "
                                + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() + "' and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "'")) {
                            skuGrpBean.setMaterialDesc(matSkuDesc);
                            String qty = getDBStk(Constants.CPStockItems
                                    + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.MaterialNo + " eq '" + matNo + "' and " + Constants.StockOwner + " eq '01' ");

                            property = properties.get(Constants.UOM);
                            skuGrpBean.setUOM((String) property.getValue());

                            if (checkNoUOMZero((String) property.getValue()))
                                skuGrpBean.setDBSTK(trimQtyDecimalPlace(qty));
                            else
                                skuGrpBean.setDBSTK(qty);

                            property = properties.get(Constants.Currency);
                            skuGrpBean.setCurrency((String) property.getValue());

                            if (mStrLastMatno.equalsIgnoreCase("") || !mStrLastMatno.equalsIgnoreCase(matNo)) {
                                skuGrpBean.setLastPurchasedMaterial("");
                            } else {
                                skuGrpBean.setLastPurchasedMaterial(Constants.YES);
                            }
                            skuGrpBean.setChildItemTag(Constants.YES);


                            skuGrpBean.setMRP(getMaterialMRP(Constants.CPStockItemSnos
                                    + "?$select=" + Constants.MRP + " &$filter=" + Constants.MaterialNo + " eq '"
                                    + matNo + "' and " + Constants.CPStockItemGUID + " eq guid'" + mCpStockItemGuid.guidAsString36().toUpperCase() +
                                    "'   &$orderby=" + Constants.ManufacturingDate + "%20desc ") + "");

                            property = properties.get(ConstantsUtils.Brand);
                            skuGrpBean.setBrand((String) property.getValue());
                            property = properties.get(ConstantsUtils.SKUGroup);
                            skuGrpBean.setSKUGroupID((String) property.getValue());
                            property = properties.get(ConstantsUtils.Banner);
                            skuGrpBean.setBanner((String) property.getValue());
                            property = properties.get(ConstantsUtils.ProductCategoryID);
                            skuGrpBean.setProductCategoryID((String) property.getValue());
                            matList.add(skuGrpBean);
                            tempArrList.add(matNo);
                        }

                    }
                }
            }
        }
        return matList;

    }

    public static SchemeBean getNetAmount(String mStrSNoQry, String mStrOrderQty, String
            mStrMatNo, boolean calculateRatioScheme) throws OfflineODataStoreException {

        SchemeBean schemeBean = new SchemeBean();
        ArrayList<MaterialBatchBean> alMatBatch = new ArrayList<>();
        MaterialBatchBean materialBatchBean;
        Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobBatchQty = 0.0, mDoubleTempQty = 0.0, mDouTempQty = Double.parseDouble(mStrOrderQty);
        Double doubleIntermMatUnitPrice = 0.0, doubleMatMRP = 0.0, doubleMatUnitPrice = 0.0;
        Double mDouCalucaltedNetAmount = 0.0, mDouCalPriDis = 0.0;
        String mStrBatchNo = "", mStrMFD = "", mStrExpiryDate = "", mStrStkGuid = "", mStrUOm = "", mStrTransRefTypeId = "", mStrTransRefNo = "", mStrTransRefItemNo = "";
        Double mDouPrimaryPer = 0.0;

        boolean mBoolBatchQtyEmpty = false, mBoolBatchQtyNotEmpty = false;
        String mStrFirstBatchUnitPrice = "0", mStrFirstBatchIntermUnitPrice = "0", mStrFirstBatchPrimaryPer = "0", mStrFirstBatchMRP = "0",
                mStrFirstBatchNo = "", mStrFirstMFD = "", mStrFirstExpiryDate = "", mStrFirstStkGuid = "", mStrFirstTransRefTypeId = "", mStrFirstTransRefNo = "", mStrFirstTransRefItemNo = "";
        ODataEntity mOdataFirstEntity = null;

        Double mDobRatioSchDen = 0.0;
        Double doubleRatioSchNum = 0.0;
        String mStrFreeMaterialNo = "", matDesc = "";


        Double mDobRatioSchDenTemp = 0.0;
        Double doubleRatioSchNumTemp = 0.0;
        String mStrFreeMaterialNoTemp = "";
        boolean mRatioSchemeAval = false, mRatioSchemeAvalTemp = false;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            int incVal = 0;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    materialBatchBean = new MaterialBatchBean();

                    property = properties.get(Constants.Currency);
                    materialBatchBean.setCurrency(property.getValue().toString());

                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleIntermMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleIntermMatUnitPrice = 0.0;
                        }

                    }

                    property = properties.get(Constants.UnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }

                    }
                    property = properties.get(Constants.TransRefTypeID);
                    mStrTransRefTypeId = property.getValue().toString();
                    property = properties.get(Constants.TransRefNo);
                    mStrTransRefNo = property.getValue().toString();
                    property = properties.get(Constants.TransRefItemNo);
                    mStrTransRefItemNo = property.getValue().toString();


                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mDecimialMatMRP = (BigDecimal) property.getValue();

                        if (mDecimialMatMRP != null) {
                            doubleMatMRP = mDecimialMatMRP.doubleValue();
                        } else {
                            doubleMatMRP = 0.0;
                        }

                    }


                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }

                    }
                    property = properties.get(Constants.Batch);
                    mStrBatchNo = property.getValue().toString();

                    property = properties.get(Constants.FreeTypeID);
                    schemeBean.setISFreeTypeID(property.getValue().toString());

                    property = properties.get(Constants.UOM);
                    mStrUOm = property.getValue().toString();

                    property = properties.get(Constants.ManufacturingDate);
                    mStrMFD = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                    property = properties.get(Constants.ExpiryDate);
                    try {
                        mStrExpiryDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    } catch (Exception e) {
                        mStrExpiryDate = "";
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.CPSnoGUID);
                    ODataGuid mCpStockItemGuid = null;
                    try {
                        mCpStockItemGuid = (ODataGuid) property.getValue();
                        mStrStkGuid = mCpStockItemGuid.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        mStrStkGuid = "";
                        e.printStackTrace();
                    }
                    ;
                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mDecPriDis = (BigDecimal) property.getValue();
                        if (mDecPriDis != null) {
                            mDouPrimaryPer = mDecPriDis.doubleValue();
                            //mDouPrimaryPer = 0.0;
                        }else{
                            mDouPrimaryPer = 0.0;
                        }

                    }
                    property = properties.get(Constants.RatioSchNum);
                    try {
                        doubleRatioSchNum = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        doubleRatioSchNum = 0.0;
                    }

                    property = properties.get(Constants.RatioSchDen);

                    try {
                        mDobRatioSchDen = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        mDobRatioSchDen = 0.0;
                    }
                    property = properties.get(Constants.FreeMaterialNo);
                    mStrFreeMaterialNo = property.getValue().toString();

                    if (mDobBatchQty > 0) {
                        if (!mBoolBatchQtyNotEmpty) {
                            mBoolBatchQtyNotEmpty = true;
                            schemeBean.setmBoolBatchQtyNotEmpty(true);
                        }

                        if (mDobTempOrderQty >= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {
                            //Ratio scheme validation
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                if (!mRatioSchemeAvalTemp) {
                                    schemeBean.setRatioSchemeIndexVal(incVal + "");
                                    schemeBean.setmRatioSchemeAvalTemp(true);
                                    mRatioSchemeAvalTemp = true;
                                    mDobRatioSchDenTemp = mDobRatioSchDen;
                                    doubleRatioSchNumTemp = doubleRatioSchNum;
                                    mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                    schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                    schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                    schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                }
                            }


                            mDobTempOrderQty = mDobTempOrderQty - mDobBatchQty;

                            mDouTempQty = mDouTempQty - mDobBatchQty;

                            mDoubleTempQty = mDoubleTempQty + mDobBatchQty;

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleIntermMatUnitPrice;

                            mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                            String mStrTaxAmt = "0";
                            materialBatchBean.setMaterialNo(mStrMatNo);
                            materialBatchBean.setBatchNo(mStrBatchNo);
                            materialBatchBean.setQty(mDobBatchQty + "");
                            materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                            materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                            materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                            materialBatchBean.setMRP(doubleMatMRP + "");
                            materialBatchBean.setTransRefTypeID(mStrTransRefTypeId);
                            materialBatchBean.setTransRefNo(mStrTransRefNo);
                            materialBatchBean.setTransRefItemNo(mStrTransRefItemNo);

                            Double mDouBatQty = mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty;
                            Double mDouCalNetAmt = mDouBatQty * doubleIntermMatUnitPrice;
                            Double mDouPrimDisAmt = 0.0;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }
                            materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                            Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;
                            materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                            materialBatchBean.setoDataEntity(entity);
                            materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                            materialBatchBean.setTaxAmount(mStrTaxAmt);
                            materialBatchBean.setMFD(mStrMFD);
                            materialBatchBean.setExpiryDate(mStrExpiryDate);
                            materialBatchBean.setCPSnoGUID(mStrStkGuid);
                            alMatBatch.add(materialBatchBean);

                        } else if (mDobTempOrderQty <= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {


                            //Ratio scheme validation
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                if (!mRatioSchemeAvalTemp) {
                                    schemeBean.setRatioSchemeIndexVal(incVal + "");
                                    schemeBean.setmRatioSchemeAvalTemp(true);
                                    mRatioSchemeAvalTemp = true;
                                    mDobRatioSchDenTemp = mDobRatioSchDen;
                                    doubleRatioSchNumTemp = doubleRatioSchNum;
                                    mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                    schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                    schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                    schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                }
                            }

                            mDouTempQty = mDobTempOrderQty;

                            mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);

                            mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                            String mStrTaxAmt = "0";
                            materialBatchBean.setMaterialNo(mStrMatNo);
                            materialBatchBean.setBatchNo(mStrBatchNo);
                            materialBatchBean.setQty(mDouTempQty + "");
                            materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                            materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                            materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                            materialBatchBean.setMRP(doubleMatMRP + "");
                            Double mDouCalNetAmt = mDobTempOrderQty * doubleIntermMatUnitPrice;
                            Double mDouPrimDisAmt = 0.0;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }
                            materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                            Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                            materialBatchBean.setoDataEntity(entity);
                            materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                            materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                            materialBatchBean.setTaxAmount(mStrTaxAmt);
                            materialBatchBean.setMFD(mStrMFD);
                            materialBatchBean.setExpiryDate(mStrExpiryDate);
                            materialBatchBean.setCPSnoGUID(mStrStkGuid);

                            materialBatchBean.setTransRefTypeID(mStrTransRefTypeId);
                            materialBatchBean.setTransRefNo(mStrTransRefNo);
                            materialBatchBean.setTransRefItemNo(mStrTransRefItemNo);
                            alMatBatch.add(materialBatchBean);

                            break;

                        } else {
                            break;
                        }
                        incVal++;
                    } else {
                        if (!mBoolBatchQtyEmpty) {
                            mBoolBatchQtyEmpty = true;
                            mStrFirstBatchUnitPrice = doubleMatUnitPrice + "";
                            mStrFirstBatchIntermUnitPrice = doubleIntermMatUnitPrice + "";
                            mStrFirstBatchPrimaryPer = mDouPrimaryPer + "";
                            mStrFirstBatchMRP = doubleMatMRP + "";
                            mStrFirstBatchNo = mStrBatchNo + "";

                            mStrFirstTransRefTypeId = mStrTransRefTypeId + "";
                            mStrFirstTransRefNo = mStrTransRefNo + "";
                            mStrFirstTransRefItemNo = mStrTransRefItemNo + "";


                            mStrFirstMFD = mStrMFD + "";
                            mStrFirstExpiryDate = mStrExpiryDate + "";
                            mStrFirstStkGuid = mStrStkGuid + "";
                            mOdataFirstEntity = entity;


                            //Ratio scheme validation
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                if (!mRatioSchemeAval) {

                                    if (alMatBatch.size() == 0)
                                        schemeBean.setRatioSchemeIndexVal(0 + "");
                                    mRatioSchemeAval = true;
                                    mDobRatioSchDenTemp = mDobRatioSchDen;
                                    doubleRatioSchNumTemp = doubleRatioSchNum;
                                    mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                    schemeBean.setmRatioSchemeAval(true);
                                    schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                    schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                    schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                }
                            }
                        }
                    }

                }

                try {
                    if (mDobTempOrderQty < mDobOrderQty) {
                        double mdouRemaingQty = mDobOrderQty - mDoubleTempQty;
                        if (mdouRemaingQty > 0) {
                            materialBatchBean = new MaterialBatchBean();
                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);
                            if (alMatBatch != null && alMatBatch.size() > 0) {
                                MaterialBatchBean lastBatchItem = alMatBatch.get(alMatBatch.size() - 1);

                                mDouCalPriDis = mDouCalPriDis + Double.parseDouble(lastBatchItem.getPrimaryPer());

                                Double mDouLastBatchQty = Double.parseDouble(lastBatchItem.getQty());
                                ODataEntity oDataEntity = lastBatchItem.getoDataEntity();

                                Double mDoubSumOfQtyVal = mDouLastBatchQty + mDobTempOrderQty;
                                String mStrTaxAmtFromOData = "0";
                                materialBatchBean.setMaterialNo(mStrMatNo);
                                materialBatchBean.setBatchNo(lastBatchItem.getBatchNo());

                                materialBatchBean.setPrimaryPer(lastBatchItem.getPrimaryPer());

                                materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                                materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");

                                materialBatchBean.setMRP(doubleMatMRP + "");
                                materialBatchBean.setMFD(lastBatchItem.getMFD());
                                materialBatchBean.setExpiryDate(lastBatchItem.getExpiryDate());
                                materialBatchBean.setCPSnoGUID(lastBatchItem.getCPSnoGUID());
                                materialBatchBean.setoDataEntity(oDataEntity);
                                materialBatchBean.setQty(mDoubSumOfQtyVal + "");

                                Double mDouCalNetAmt = mDoubSumOfQtyVal * doubleIntermMatUnitPrice;
                                Double mDouPrimDisAmt = 0.0;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(lastBatchItem.getPrimaryPer(), mDouCalNetAmt + ""));
                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                }

                                Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                                materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                                materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                                materialBatchBean.setTaxAmount(mStrTaxAmtFromOData);
                                materialBatchBean.setNetAmount(mDouCalNetAmt + "");

                                materialBatchBean.setTransRefTypeID(lastBatchItem.getTransRefTypeID());
                                materialBatchBean.setTransRefNo(lastBatchItem.getTransRefNo());
                                materialBatchBean.setTransRefItemNo(lastBatchItem.getTransRefItemNo());

                                alMatBatch.set(alMatBatch.size() - 1, materialBatchBean);

                            }
                        }
                    } else {

                        if (!mBoolBatchQtyNotEmpty) {
                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice));

                            mDouCalPriDis = mDouCalPriDis + Double.parseDouble(mStrFirstBatchPrimaryPer);
                            String mStrTaxAmt = "0";
                            materialBatchBean = new MaterialBatchBean();
                            materialBatchBean.setMaterialNo(mStrMatNo);
                            materialBatchBean.setBatchNo(mStrFirstBatchNo);
                            materialBatchBean.setQty(mDobOrderQty + "");
                            materialBatchBean.setPrimaryPer(mStrFirstBatchPrimaryPer + "");

                            materialBatchBean.setLandingPrice(mStrFirstBatchUnitPrice + "");
                            materialBatchBean.setIntermUnitPrice(mStrFirstBatchIntermUnitPrice + "");

                            materialBatchBean.setMRP(mStrFirstBatchMRP + "");
                            Double mDouCalNetAmt = mDobOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice);
                            Double mDouPrimDisAmt = 0.0;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mStrFirstBatchPrimaryPer + "", mDouCalNetAmt + ""));
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                            materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                            Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                            materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");

                            materialBatchBean.setoDataEntity(mOdataFirstEntity);
                            materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                            materialBatchBean.setTaxAmount(mStrTaxAmt);
                            materialBatchBean.setMFD(mStrFirstMFD);
                            materialBatchBean.setExpiryDate(mStrFirstExpiryDate);
                            materialBatchBean.setCPSnoGUID(mStrFirstStkGuid);

                            materialBatchBean.setTransRefTypeID(mStrFirstTransRefTypeId);
                            materialBatchBean.setTransRefNo(mStrFirstTransRefNo);
                            materialBatchBean.setTransRefItemNo(mStrFirstTransRefItemNo);

                            alMatBatch.add(materialBatchBean);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }


        }

        // Ratio scheme caluculation
        if (mRatioSchemeAval && !mBoolBatchQtyNotEmpty && calculateRatioScheme) {
            if (mDobOrderQty >= doubleRatioSchNumTemp) {
                try {
                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "'", Constants.MaterialDesc);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNoTemp : matDesc);

                int mFreeQty = 0;
                try {
                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNumTemp) * mDobRatioSchDenTemp);
                } catch (Exception e) {
                    mFreeQty = 0;
                }
                schemeBean.setFreeQty(mFreeQty + "");
                // trade calculation
                if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                    int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                    try {
                        MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                        Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                        if (mUnitPrice > 0) {
                            Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                            Double mPriDisAmt = 0.0;
                            try {
                                mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                            } catch (NumberFormatException e) {
                                mPriDisAmt = 0.0;
                            }
                            materialBatchBeanTemp.setNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt) + "");
                            materialBatchBeanTemp.setNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
                            alMatBatch.set(indexVal, materialBatchBeanTemp);

                            String mStrTaxAmt = SalesOrderReviewActivity1.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                            try {
                                schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                            } catch (NumberFormatException e) {
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        } else {
                            schemeBean.setISFreeTypeID("");
                            schemeBean.setRatioSchMatPrice("0");
                            schemeBean.setRatioSchDisAmt("0");
                        }


                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {
                    schemeBean.setRatioSchMatPrice(Constants.str_0);
                    schemeBean.setRatioSchMatPrice("0");
                    schemeBean.setRatioSchDisAmt("0");
                }

            } else {
                schemeBean.setFreeQty("");
                schemeBean.setFreeMaterialNo("");
            }

        } else if (mRatioSchemeAvalTemp && calculateRatioScheme) {
            if (mDobOrderQty >= doubleRatioSchNumTemp) {
                try {
                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "'", Constants.MaterialDesc);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNoTemp : matDesc);

                int mFreeQty = 0;
                try {
                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNumTemp) * mDobRatioSchDenTemp);
                } catch (Exception e) {
                    mFreeQty = 0;
                }
                schemeBean.setFreeQty(mFreeQty + "");

                if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                    int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                    try {
                        MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                        Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                        if (mUnitPrice > 0) {
                            Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                            Double mPriDisAmt = 0.0;
                            try {
                                mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                            } catch (NumberFormatException e) {
                                mPriDisAmt = 0.0;
                            }

                            materialBatchBeanTemp.setNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt) + "");
                            materialBatchBeanTemp.setNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
                            alMatBatch.set(indexVal, materialBatchBeanTemp);

                            String mStrTaxAmt = SalesOrderReviewActivity1.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                            try {
                                schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                            } catch (NumberFormatException e) {
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        } else {
                            schemeBean.setISFreeTypeID("");
                            schemeBean.setRatioSchMatPrice("0");
                            schemeBean.setRatioSchDisAmt("0");
                        }


                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {
                    schemeBean.setRatioSchMatPrice(Constants.str_0);
                    schemeBean.setRatioSchDisAmt("0");
                }


            } else {
                schemeBean.setFreeQty("");
                schemeBean.setFreeMaterialNo("");
            }
        } else {
            schemeBean.setFreeQty("");
            schemeBean.setFreeMaterialNo("");

            schemeBean.setRatioSchMatPrice("0");
            schemeBean.setRatioSchDisAmt("0");
        }


        schemeBean.setMaterialBatchBeanArrayList(alMatBatch);
        schemeBean.setNetAmount(mDouCalucaltedNetAmount.toString());
        schemeBean.setPrimaryPer(mDouCalPriDis.toString());
        schemeBean.setUOM(mStrUOm);
        return schemeBean;
    }
    public static SchemeBean getNetAmountSalesReview(String mStrSNoQry, String mStrOrderQty, String
            mStrMatNo, boolean calculateRatioScheme) throws OfflineODataStoreException {

        SchemeBean schemeBean = new SchemeBean();
        ArrayList<MaterialBatchBean> alMatBatch = new ArrayList<>();
        MaterialBatchBean materialBatchBean;
        Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobBatchQty = 0.0, mDoubleTempQty = 0.0, mDouTempQty = Double.parseDouble(mStrOrderQty);
        Double doubleIntermMatUnitPrice = 0.0, doubleMatMRP = 0.0, doubleMatUnitPrice = 0.0;
        Double mDouCalucaltedNetAmount = 0.0, mDouCalPriDis = 0.0;
        String mStrBatchNo = "", mStrMFD = "", mStrExpiryDate = "", mStrStkGuid = "", mStrUOm = "", mStrTransRefTypeId = "", mStrTransRefNo = "", mStrTransRefItemNo = "";
        Double mDouPrimaryPer = 0.0;

        boolean mBoolBatchQtyEmpty = false, mBoolBatchQtyNotEmpty = false;
        String mStrFirstBatchUnitPrice = "0", mStrFirstBatchIntermUnitPrice = "0", mStrFirstBatchPrimaryPer = "0", mStrFirstBatchMRP = "0",
                mStrFirstBatchNo = "", mStrFirstMFD = "", mStrFirstExpiryDate = "", mStrFirstStkGuid = "", mStrFirstTransRefTypeId = "", mStrFirstTransRefNo = "", mStrFirstTransRefItemNo = "";
        ODataEntity mOdataFirstEntity = null;

        Double mDobRatioSchDen = 0.0;
        Double doubleRatioSchNum = 0.0;
        String mStrFreeMaterialNo = "", matDesc = "";


        Double mDobRatioSchDenTemp = 0.0;
        Double doubleRatioSchNumTemp = 0.0;
        String mStrFreeMaterialNoTemp = "";
        boolean mRatioSchemeAval = false, mRatioSchemeAvalTemp = false;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            int incVal = 0;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    materialBatchBean = new MaterialBatchBean();

                    property = properties.get(Constants.Currency);
                    materialBatchBean.setCurrency(property.getValue().toString());

                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleIntermMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleIntermMatUnitPrice = 0.0;
                        }

                    }

                    property = properties.get(Constants.UnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }

                    }
                    property = properties.get(Constants.TransRefTypeID);
                    mStrTransRefTypeId = property.getValue().toString();
                    property = properties.get(Constants.TransRefNo);
                    mStrTransRefNo = property.getValue().toString();
                    property = properties.get(Constants.TransRefItemNo);
                    mStrTransRefItemNo = property.getValue().toString();


                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mDecimialMatMRP = (BigDecimal) property.getValue();

                        if (mDecimialMatMRP != null) {
                            doubleMatMRP = mDecimialMatMRP.doubleValue();
                        } else {
                            doubleMatMRP = 0.0;
                        }

                    }


                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }

                    }
                    property = properties.get(Constants.Batch);
                    mStrBatchNo = property.getValue().toString();

                    property = properties.get(Constants.FreeTypeID);
                    schemeBean.setISFreeTypeID(property.getValue().toString());

                    property = properties.get(Constants.UOM);
                    mStrUOm = property.getValue().toString();

                    property = properties.get(Constants.ManufacturingDate);
                    mStrMFD = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                    property = properties.get(Constants.ExpiryDate);
                    try {
                        mStrExpiryDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    } catch (Exception e) {
                        mStrExpiryDate = "";
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.CPSnoGUID);
                    ODataGuid mCpStockItemGuid = null;
                    try {
                        mCpStockItemGuid = (ODataGuid) property.getValue();
                        mStrStkGuid = mCpStockItemGuid.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        mStrStkGuid = "";
                        e.printStackTrace();
                    }
                    ;
                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mDecPriDis = (BigDecimal) property.getValue();
                        if (mDecPriDis != null) {
                          //  mDouPrimaryPer = mDecPriDis.doubleValue();
                            mDouPrimaryPer = 0.0;
                        } else {
                            mDouPrimaryPer = 0.0;
                        }

                    }
                    property = properties.get(Constants.RatioSchNum);
                    try {
                        doubleRatioSchNum = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        doubleRatioSchNum = 0.0;
                    }

                    property = properties.get(Constants.RatioSchDen);

                    try {
                        mDobRatioSchDen = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        mDobRatioSchDen = 0.0;
                    }
                    property = properties.get(Constants.FreeMaterialNo);
                    mStrFreeMaterialNo = property.getValue().toString();

                    if (mDobBatchQty > 0) {
                        if (!mBoolBatchQtyNotEmpty) {
                            mBoolBatchQtyNotEmpty = true;
                            schemeBean.setmBoolBatchQtyNotEmpty(true);
                        }

                        if (mDobTempOrderQty >= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {
                            //Ratio scheme validation
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                if (!mRatioSchemeAvalTemp) {
                                    schemeBean.setRatioSchemeIndexVal(incVal + "");
                                    schemeBean.setmRatioSchemeAvalTemp(true);
                                    mRatioSchemeAvalTemp = true;
                                    mDobRatioSchDenTemp = mDobRatioSchDen;
                                    doubleRatioSchNumTemp = doubleRatioSchNum;
                                    mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                    schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                    schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                    schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                }
                            }


                            mDobTempOrderQty = mDobTempOrderQty - mDobBatchQty;

                            mDouTempQty = mDouTempQty - mDobBatchQty;

                            mDoubleTempQty = mDoubleTempQty + mDobBatchQty;

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleIntermMatUnitPrice;

                            mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                            String mStrTaxAmt = "0";
                            materialBatchBean.setMaterialNo(mStrMatNo);
                            materialBatchBean.setBatchNo(mStrBatchNo);
                            materialBatchBean.setQty(mDobBatchQty + "");
                            materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                            materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                            materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                            materialBatchBean.setMRP(doubleMatMRP + "");
                            materialBatchBean.setTransRefTypeID(mStrTransRefTypeId);
                            materialBatchBean.setTransRefNo(mStrTransRefNo);
                            materialBatchBean.setTransRefItemNo(mStrTransRefItemNo);

                            Double mDouBatQty = mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty;
                            Double mDouCalNetAmt = mDouBatQty * doubleIntermMatUnitPrice;
                            Double mDouPrimDisAmt = 0.0;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }
                            materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                            Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;
                            materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                            materialBatchBean.setoDataEntity(entity);
                            materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                            materialBatchBean.setTaxAmount(mStrTaxAmt);
                            materialBatchBean.setMFD(mStrMFD);
                            materialBatchBean.setExpiryDate(mStrExpiryDate);
                            materialBatchBean.setCPSnoGUID(mStrStkGuid);
                            alMatBatch.add(materialBatchBean);

                        } else if (mDobTempOrderQty <= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {


                            //Ratio scheme validation
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                if (!mRatioSchemeAvalTemp) {
                                    schemeBean.setRatioSchemeIndexVal(incVal + "");
                                    schemeBean.setmRatioSchemeAvalTemp(true);
                                    mRatioSchemeAvalTemp = true;
                                    mDobRatioSchDenTemp = mDobRatioSchDen;
                                    doubleRatioSchNumTemp = doubleRatioSchNum;
                                    mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                    schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                    schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                    schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                }
                            }

                            mDouTempQty = mDobTempOrderQty;

                            mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);

                            mDouCalPriDis = mDouCalPriDis + mDouPrimaryPer;
                            String mStrTaxAmt = "0";
                            materialBatchBean.setMaterialNo(mStrMatNo);
                            materialBatchBean.setBatchNo(mStrBatchNo);
                            materialBatchBean.setQty(mDouTempQty + "");
                            materialBatchBean.setPrimaryPer(mDouPrimaryPer + "");
                            materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                            materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");
                            materialBatchBean.setMRP(doubleMatMRP + "");
                            Double mDouCalNetAmt = mDobTempOrderQty * doubleIntermMatUnitPrice;
                            Double mDouPrimDisAmt = 0.0;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", mDouCalNetAmt + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }
                            materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                            Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                            materialBatchBean.setoDataEntity(entity);
                            materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                            materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                            materialBatchBean.setTaxAmount(mStrTaxAmt);
                            materialBatchBean.setMFD(mStrMFD);
                            materialBatchBean.setExpiryDate(mStrExpiryDate);
                            materialBatchBean.setCPSnoGUID(mStrStkGuid);

                            materialBatchBean.setTransRefTypeID(mStrTransRefTypeId);
                            materialBatchBean.setTransRefNo(mStrTransRefNo);
                            materialBatchBean.setTransRefItemNo(mStrTransRefItemNo);
                            alMatBatch.add(materialBatchBean);

                            break;

                        } else {
                            break;
                        }
                        incVal++;
                    } else {
                        if (!mBoolBatchQtyEmpty) {
                            mBoolBatchQtyEmpty = true;
                            mStrFirstBatchUnitPrice = doubleMatUnitPrice + "";
                            mStrFirstBatchIntermUnitPrice = doubleIntermMatUnitPrice + "";
                            mStrFirstBatchPrimaryPer = mDouPrimaryPer + "";
                            mStrFirstBatchMRP = doubleMatMRP + "";
                            mStrFirstBatchNo = mStrBatchNo + "";

                            mStrFirstTransRefTypeId = mStrTransRefTypeId + "";
                            mStrFirstTransRefNo = mStrTransRefNo + "";
                            mStrFirstTransRefItemNo = mStrTransRefItemNo + "";


                            mStrFirstMFD = mStrMFD + "";
                            mStrFirstExpiryDate = mStrExpiryDate + "";
                            mStrFirstStkGuid = mStrStkGuid + "";
                            mOdataFirstEntity = entity;


                            //Ratio scheme validation
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                if (!mRatioSchemeAval) {

                                    if (alMatBatch.size() == 0)
                                        schemeBean.setRatioSchemeIndexVal(0 + "");
                                    mRatioSchemeAval = true;
                                    mDobRatioSchDenTemp = mDobRatioSchDen;
                                    doubleRatioSchNumTemp = doubleRatioSchNum;
                                    mStrFreeMaterialNoTemp = mStrFreeMaterialNo;

                                    schemeBean.setmRatioSchemeAval(true);
                                    schemeBean.setmDobRatioSchDenTemp(mDobRatioSchDen);
                                    schemeBean.setDoubleRatioSchNumTemp(doubleRatioSchNum);
                                    schemeBean.setmStrFreeMaterialNoTemp(mStrFreeMaterialNo);
                                }
                            }
                        }
                    }

                }

                try {
                    if (mDobTempOrderQty < mDobOrderQty) {
                        double mdouRemaingQty = mDobOrderQty - mDoubleTempQty;
                        if (mdouRemaingQty > 0) {
                            materialBatchBean = new MaterialBatchBean();
                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleIntermMatUnitPrice);
                            if (alMatBatch != null && alMatBatch.size() > 0) {
                                MaterialBatchBean lastBatchItem = alMatBatch.get(alMatBatch.size() - 1);

                                mDouCalPriDis = mDouCalPriDis + Double.parseDouble(lastBatchItem.getPrimaryPer());

                                Double mDouLastBatchQty = Double.parseDouble(lastBatchItem.getQty());
                                ODataEntity oDataEntity = lastBatchItem.getoDataEntity();

                                Double mDoubSumOfQtyVal = mDouLastBatchQty + mDobTempOrderQty;
                                String mStrTaxAmtFromOData = "0";
                                materialBatchBean.setMaterialNo(mStrMatNo);
                                materialBatchBean.setBatchNo(lastBatchItem.getBatchNo());

                                materialBatchBean.setPrimaryPer(lastBatchItem.getPrimaryPer());

                                materialBatchBean.setLandingPrice(doubleMatUnitPrice + "");
                                materialBatchBean.setIntermUnitPrice(doubleIntermMatUnitPrice + "");

                                materialBatchBean.setMRP(doubleMatMRP + "");
                                materialBatchBean.setMFD(lastBatchItem.getMFD());
                                materialBatchBean.setExpiryDate(lastBatchItem.getExpiryDate());
                                materialBatchBean.setCPSnoGUID(lastBatchItem.getCPSnoGUID());
                                materialBatchBean.setoDataEntity(oDataEntity);
                                materialBatchBean.setQty(mDoubSumOfQtyVal + "");

                                Double mDouCalNetAmt = mDoubSumOfQtyVal * doubleIntermMatUnitPrice;
                                Double mDouPrimDisAmt = 0.0;
                                try {
                                    mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(lastBatchItem.getPrimaryPer(), mDouCalNetAmt + ""));
                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                }

                                Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                                materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");
                                materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                                materialBatchBean.setTaxAmount(mStrTaxAmtFromOData);
                                materialBatchBean.setNetAmount(mDouCalNetAmt + "");

                                materialBatchBean.setTransRefTypeID(lastBatchItem.getTransRefTypeID());
                                materialBatchBean.setTransRefNo(lastBatchItem.getTransRefNo());
                                materialBatchBean.setTransRefItemNo(lastBatchItem.getTransRefItemNo());

                                alMatBatch.set(alMatBatch.size() - 1, materialBatchBean);

                            }
                        }
                    } else {

                        if (!mBoolBatchQtyNotEmpty) {
                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice));

                            mDouCalPriDis = mDouCalPriDis + Double.parseDouble(mStrFirstBatchPrimaryPer);
                            String mStrTaxAmt = "0";
                            materialBatchBean = new MaterialBatchBean();
                            materialBatchBean.setMaterialNo(mStrMatNo);
                            materialBatchBean.setBatchNo(mStrFirstBatchNo);
                            materialBatchBean.setQty(mDobOrderQty + "");
                            materialBatchBean.setPrimaryPer(mStrFirstBatchPrimaryPer + "");

                            materialBatchBean.setLandingPrice(mStrFirstBatchUnitPrice + "");
                            materialBatchBean.setIntermUnitPrice(mStrFirstBatchIntermUnitPrice + "");

                            materialBatchBean.setMRP(mStrFirstBatchMRP + "");
                            Double mDouCalNetAmt = mDobOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice);
                            Double mDouPrimDisAmt = 0.0;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mStrFirstBatchPrimaryPer + "", mDouCalNetAmt + ""));
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                            materialBatchBean.setNetAmount(mDouCalNetAmt + "");
                            Double mDouCalNetTaxDisAmt = mDouCalNetAmt - mDouPrimDisAmt;

                            materialBatchBean.setPrimaryPerAmt(mDouPrimDisAmt + "");

                            materialBatchBean.setoDataEntity(mOdataFirstEntity);
                            materialBatchBean.setNetAmtAftPriDis(mDouCalNetTaxDisAmt + "");
                            materialBatchBean.setTaxAmount(mStrTaxAmt);
                            materialBatchBean.setMFD(mStrFirstMFD);
                            materialBatchBean.setExpiryDate(mStrFirstExpiryDate);
                            materialBatchBean.setCPSnoGUID(mStrFirstStkGuid);

                            materialBatchBean.setTransRefTypeID(mStrFirstTransRefTypeId);
                            materialBatchBean.setTransRefNo(mStrFirstTransRefNo);
                            materialBatchBean.setTransRefItemNo(mStrFirstTransRefItemNo);

                            alMatBatch.add(materialBatchBean);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }


        }

        // Ratio scheme caluculation
        if (mRatioSchemeAval && !mBoolBatchQtyNotEmpty && calculateRatioScheme) {
            if (mDobOrderQty >= doubleRatioSchNumTemp) {
                try {
                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "'", Constants.MaterialDesc);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNoTemp : matDesc);

                int mFreeQty = 0;
                try {
                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNumTemp) * mDobRatioSchDenTemp);
                } catch (Exception e) {
                    mFreeQty = 0;
                }
                schemeBean.setFreeQty(mFreeQty + "");
                // trade calculation
                if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                    int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                    try {
                        MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                        Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                        if (mUnitPrice > 0) {
                            Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                            Double mPriDisAmt = 0.0;
                            try {
                                mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                            } catch (NumberFormatException e) {
                                mPriDisAmt = 0.0;
                            }
                            materialBatchBeanTemp.setNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt) + "");
                            materialBatchBeanTemp.setNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
                            alMatBatch.set(indexVal, materialBatchBeanTemp);

                            String mStrTaxAmt = SalesOrderReviewActivity1.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                            try {
                                schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                            } catch (NumberFormatException e) {
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        } else {
                            schemeBean.setISFreeTypeID("");
                            schemeBean.setRatioSchMatPrice("0");
                            schemeBean.setRatioSchDisAmt("0");
                        }


                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {
                    schemeBean.setRatioSchMatPrice(Constants.str_0);
                    schemeBean.setRatioSchMatPrice("0");
                    schemeBean.setRatioSchDisAmt("0");
                }

            } else {
                schemeBean.setFreeQty("");
                schemeBean.setFreeMaterialNo("");
            }

        } else if (mRatioSchemeAvalTemp && calculateRatioScheme) {
            if (mDobOrderQty >= doubleRatioSchNumTemp) {
                try {
                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "'", Constants.MaterialDesc);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNoTemp : matDesc);

                int mFreeQty = 0;
                try {
                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNumTemp) * mDobRatioSchDenTemp);
                } catch (Exception e) {
                    mFreeQty = 0;
                }
                schemeBean.setFreeQty(mFreeQty + "");

                if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                    int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                    try {
                        MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                        Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + mStrFreeMaterialNoTemp + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                        if (mUnitPrice > 0) {
                            Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                            Double mPriDisAmt = 0.0;
                            try {
                                mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                            } catch (NumberFormatException e) {
                                mPriDisAmt = 0.0;
                            }

                            materialBatchBeanTemp.setNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt) + "");
                            materialBatchBeanTemp.setNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
                            alMatBatch.set(indexVal, materialBatchBeanTemp);

                            String mStrTaxAmt = SalesOrderReviewActivity1.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                            try {
                                schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                            } catch (NumberFormatException e) {
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        } else {
                            schemeBean.setISFreeTypeID("");
                            schemeBean.setRatioSchMatPrice("0");
                            schemeBean.setRatioSchDisAmt("0");
                        }


                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                } else {
                    schemeBean.setRatioSchMatPrice(Constants.str_0);
                    schemeBean.setRatioSchDisAmt("0");
                }


            } else {
                schemeBean.setFreeQty("");
                schemeBean.setFreeMaterialNo("");
            }
        } else {
            schemeBean.setFreeQty("");
            schemeBean.setFreeMaterialNo("");

            schemeBean.setRatioSchMatPrice("0");
            schemeBean.setRatioSchDisAmt("0");
        }


        schemeBean.setMaterialBatchBeanArrayList(alMatBatch);
        schemeBean.setNetAmount(mDouCalucaltedNetAmount.toString());
        schemeBean.setPrimaryPer(mDouCalPriDis.toString());
        schemeBean.setUOM(mStrUOm);
        return schemeBean;
    }

    public static SchemeBean applyRatioScheme(SchemeBean schemeBean, String
            mStrOrderQty, ArrayList<MaterialBatchBean> alMatBatch, String secAmt, MaterialBatchBean
                                                      matBatchItemBean) {
        // Ratio scheme caluculation

        try {
            schemeBean.setMatNetAmtAftPriDis((Double.parseDouble(matBatchItemBean.getNetAmtAftPriDis()) - Double.parseDouble(secAmt)) + "");
            if (!schemeBean.isRatioSchemeApplied()) {
                Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
                Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
                String matDesc = "";
                if (schemeBean.ismRatioSchemeAval() && !schemeBean.ismBoolBatchQtyNotEmpty()) {
                    if (mDobOrderQty >= schemeBean.getDoubleRatioSchNumTemp()) {
                        try {
                            matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                                    + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "'", Constants.MaterialDesc);
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }

                        schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? schemeBean.getmStrFreeMaterialNoTemp() : matDesc);

                        int mFreeQty = 0;
                        try {
                            mFreeQty = (int) ((mDobOrderQty / schemeBean.getDoubleRatioSchNumTemp()) * schemeBean.getmDobRatioSchDenTemp());
                        } catch (Exception e) {
                            mFreeQty = 0;
                        }
                        schemeBean.setFreeQty(mFreeQty + "");
                        // trade calculation
                        if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                            int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                            MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);
                            try {
                                Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                                if (mUnitPrice > 0) {
                                    Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                                    Double mPriDisAmt = 0.0;
                                    try {
                                        mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                                    } catch (NumberFormatException e) {
                                        mPriDisAmt = 0.0;
                                    }
                                    schemeBean.setRatioSchemeApplied(true);
                                    schemeBean.setMatNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt - Double.parseDouble(secAmt)) + "");
                                    schemeBean.setMatNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
//                            alMatBatch.set(indexVal,materialBatchBeanTemp);

                                    String mStrTaxAmt = SalesOrderReviewActivity1.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                                    try {
                                        schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                        schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                                    } catch (NumberFormatException e) {
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                } else {
                                    if (!schemeBean.isRatioSchemeApplied()) {
                                        schemeBean.setISFreeTypeID("");
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                }


                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                        } else {
                            if (!schemeBean.isRatioSchemeApplied()) {
                                schemeBean.setRatioSchMatPrice(Constants.str_0);
                                schemeBean.setRatioSchMatPrice("0");
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        }

                    } else {
                        schemeBean.setFreeQty("");
                        schemeBean.setFreeMaterialNo("");
                    }

                } else if (schemeBean.ismRatioSchemeAvalTemp()) {
                    if (mDobOrderQty >= schemeBean.getDoubleRatioSchNumTemp()) {
                        try {
                            matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                                    + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "'", Constants.MaterialDesc);
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }
                        schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? schemeBean.getmStrFreeMaterialNoTemp() : matDesc);

                        int mFreeQty = 0;
                        try {
                            mFreeQty = (int) ((mDobOrderQty / schemeBean.getDoubleRatioSchNumTemp()) * schemeBean.getmDobRatioSchDenTemp());
                        } catch (Exception e) {
                            mFreeQty = 0;
                        }
                        schemeBean.setFreeQty(mFreeQty + "");

                        if (schemeBean.getISFreeTypeID().equalsIgnoreCase(Constants.str_2)) {
                            int indexVal = Integer.parseInt(schemeBean.getRatioSchemeIndexVal());
                            try {
                                MaterialBatchBean materialBatchBeanTemp = alMatBatch.get(indexVal);

                                Double mUnitPrice = getRatioSchUnitPtice(Constants.CPStockItemSnos + "?$select=" + Constants.Quantity + "," + Constants.IntermUnitPrice + " &$filter=" + Constants.MaterialNo + " eq '" + schemeBean.getmStrFreeMaterialNoTemp() + "' and " + Constants.StockTypeID + " ne '" + Constants.str_2 + "'  &$orderby=" + Constants.ManufacturingDate + "%20asc ");

                                if (mUnitPrice > 0) {
                                    Double mCalDisAmtFreeMat = mUnitPrice * mFreeQty;
                                    Double mPriDisAmt = 0.0;
                                    try {
                                        mPriDisAmt = Double.parseDouble(materialBatchBeanTemp.getPrimaryPerAmt());
                                    } catch (NumberFormatException e) {
                                        mPriDisAmt = 0.0;
                                    }
                                    schemeBean.setRatioSchemeApplied(true);
                                    schemeBean.setMatNetAmtAftPriDis((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat - mPriDisAmt - Double.parseDouble(secAmt)) + "");
                                    schemeBean.setMatNetAmount((Double.parseDouble(materialBatchBeanTemp.getNetAmount()) - mCalDisAmtFreeMat) + "");
//                            alMatBatch.set(indexVal,materialBatchBeanTemp);

                                    String mStrTaxAmt = SalesOrderReviewActivity1.getTaxAmount(mCalDisAmtFreeMat + "", "0", materialBatchBeanTemp.getoDataEntity(), mFreeQty + "");

                                    try {
                                        schemeBean.setRatioSchMatPrice((mCalDisAmtFreeMat + Double.parseDouble(mStrTaxAmt)) + "");
                                        schemeBean.setRatioSchDisAmt(mCalDisAmtFreeMat + "");
                                    } catch (NumberFormatException e) {
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                } else {
                                    if (!schemeBean.isRatioSchemeApplied()) {
                                        schemeBean.setISFreeTypeID("");
                                        schemeBean.setRatioSchMatPrice("0");
                                        schemeBean.setRatioSchDisAmt("0");
                                    }
                                }


                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                        } else {
                            if (!schemeBean.isRatioSchemeApplied()) {
                                schemeBean.setRatioSchMatPrice(Constants.str_0);
                                schemeBean.setRatioSchDisAmt("0");
                            }
                        }


                    } else {
                        schemeBean.setFreeQty("");
                        schemeBean.setFreeMaterialNo("");
                    }
                } else {
                    if (!schemeBean.isRatioSchemeApplied()) {
                        schemeBean.setFreeQty("");
                        schemeBean.setFreeMaterialNo("");
                        schemeBean.setRatioSchMatPrice("0");
                        schemeBean.setRatioSchDisAmt("0");
                    }
                }
            } else {
                if (!schemeBean.isRatioSchemeApplied()) {
                    schemeBean.setFreeQty("");
                    schemeBean.setFreeMaterialNo("");
                    schemeBean.setRatioSchMatPrice("0");
                    schemeBean.setRatioSchDisAmt("0");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return schemeBean;
    }

    public static Double getRatioSchUnitPtice(String unitPriQry) throws
            OfflineODataStoreException {
        double doubleUnitPrice = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, unitPriQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();

                        try {
                            if (mStrQty.doubleValue() > 0) {
                                property = properties.get(Constants.IntermUnitPrice);
                                if (property != null) {
                                    BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();
                                    if (mDecimialMatUnitPrice != null) {
                                        doubleUnitPrice = mDecimialMatUnitPrice.doubleValue();
                                    } else {
                                        doubleUnitPrice = 0.0;
                                    }
                                    if (doubleUnitPrice > 0) {
                                        return doubleUnitPrice;
                                    }

                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                }
            }

        }
        return doubleUnitPrice;
    }

    public static Double getCBBQty(String cpStockQry, Double mDoubOrderQty) throws
            OfflineODataStoreException {
        double doublAltUom1Num = 0.0;
        double doublAltUom1Den = 0.0;
        Double doublCBBQty = 0.0;
        Double doublCalQty = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStockQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();

                        try {
                            if (mStrQty.doubleValue() > 0) {
                                property = properties.get(Constants.AlternativeUOM1Num);
                                if (property != null) {
                                    BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();
                                    if (mDecimialMatUnitPrice != null) {
                                        doublAltUom1Num = mDecimialMatUnitPrice.doubleValue();
                                    } else {
                                        doublAltUom1Num = 0.0;
                                    }


                                }

                                property = properties.get(Constants.AlternativeUOM1Den);
                                if (property != null) {
                                    BigDecimal mDecimialUom1Den = (BigDecimal) property.getValue();
                                    if (mDecimialUom1Den != null) {
                                        doublAltUom1Den = mDecimialUom1Den.doubleValue();
                                    } else {
                                        doublAltUom1Den = 0.0;
                                    }

                                }

                                if (doublAltUom1Num > 0) {
                                    try {
                                        doublCalQty = mDoubOrderQty / doublAltUom1Den;
                                    } catch (Exception e) {
                                        doublCalQty = 0.0;
                                    }
                                    if (doublCalQty.isNaN() || doublCalQty.isInfinite()) {
                                        doublCalQty = 0.0;
                                    }

                                    try {
                                        doublCBBQty = doublCalQty * doublAltUom1Num;
                                    } catch (Exception e) {
                                        doublCBBQty = 0.0;
                                    }

                                    if (doublCBBQty.isNaN() || doublCBBQty.isInfinite()) {
                                        doublCBBQty = 0.0;
                                    }

                                    int mTruncateVale = 0;
                                    try {
                                        mTruncateVale = doublCBBQty.intValue();
                                    } catch (Exception e) {
                                        mTruncateVale = 0;
                                    }

                                    return Double.parseDouble(mTruncateVale + "");
                                }

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                }
            }

        }
        return doublCBBQty;
    }

    public static SchemeBean getFreeMaterial(String mStrSNoQry, String mStrOrderQty, String
            mStrMatNo) throws OfflineODataStoreException {
        boolean mBoolBatchQtyEmpty = false, mBoolBatchQtyNotEmpty = false;
        SchemeBean schemeBean = new SchemeBean();
        Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobRatioSchDen = 0.0;
        Double doubleRatioSchNum = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
        Double mDobBatchQty = 0.0;
        String mStrFreeMaterialNo = "", matDesc = "";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    property = properties.get(Constants.RatioSchNum);
                    try {
                        doubleRatioSchNum = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        doubleRatioSchNum = 0.0;
                    }


                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }

                    }

                    property = properties.get(Constants.RatioSchDen);

                    try {
                        mDobRatioSchDen = Double.parseDouble((short) property.getValue() + "");
                    } catch (NumberFormatException e) {
                        mDobRatioSchDen = 0.0;
                    }
                    property = properties.get(Constants.FreeMaterialNo);
                    mStrFreeMaterialNo = property.getValue().toString();

                    if (mDobBatchQty > 0) {
                        if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                            if (mDobOrderQty >= doubleRatioSchNum) {


                                try {
                                    matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                                            + Constants.MaterialNo + " eq '" + mStrFreeMaterialNo + "'", Constants.MaterialDesc);
                                } catch (OfflineODataStoreException e) {
                                    e.printStackTrace();
                                }

                                schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNo : matDesc);

                                int mFreeQty = 0;
                                try {
                                    mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNum) * mDobRatioSchDen);
                                } catch (Exception e) {
                                    mFreeQty = 0;
                                }
                                schemeBean.setFreeQty(mFreeQty + "");
                                break;
                            }

                        }

                    } else {
                        if (!mBoolBatchQtyEmpty) {
                            if (!mStrFreeMaterialNo.equalsIgnoreCase("") && mDobRatioSchDen > 0 && doubleRatioSchNum > 0) {
                                mBoolBatchQtyEmpty = true;
                                if (mDobOrderQty >= doubleRatioSchNum) {
                                    try {
                                        matDesc = OfflineManager.getValueByColumnName(Constants.CPStockItems + "?$top=1 &$select=" + Constants.MaterialDesc + " &$filter = "
                                                + Constants.MaterialNo + " eq '" + mStrFreeMaterialNo + "'", Constants.MaterialDesc);
                                    } catch (OfflineODataStoreException e) {
                                        e.printStackTrace();
                                    }

                                    schemeBean.setFreeMaterialNo(matDesc.equalsIgnoreCase("") ? mStrFreeMaterialNo : matDesc);

                                    int mFreeQty = 0;
                                    try {
                                        mFreeQty = (int) ((mDobOrderQty / doubleRatioSchNum) * mDobRatioSchDen);
                                    } catch (Exception e) {
                                        mFreeQty = 0;
                                    }
                                    schemeBean.setFreeQty(mFreeQty + "");
                                }

                            }
                        }
                    }
                }

            }

        }

        return schemeBean;
    }

    public static String getDBStk(String dbStkQry) throws OfflineODataStoreException {
        double doubleDBStk = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStkQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        if (mStrQty != null) {
                            doubleDBStk = doubleDBStk + mStrQty.doubleValue();
                        } else {
                            doubleDBStk = doubleDBStk + 0.0;
                        }

                    }
                }
            }

        }
        return String.format("%.3f", doubleDBStk);
    }

    public static String getSOQ(String mStrTargetQty, String mStrActualQty, int mBalVisit) throws
            OfflineODataStoreException {
        Double doubleSOQ = 0.0;


        try {
            doubleSOQ = (Double.parseDouble(mStrTargetQty) - Double.parseDouble(mStrActualQty)) / (mBalVisit > 0 ? mBalVisit : 1);
        } catch (NumberFormatException e) {
            doubleSOQ = 0.0;
        }


        if (doubleSOQ.isNaN() || doubleSOQ.isInfinite()) {
            doubleSOQ = 0.0;
        }

        if (doubleSOQ < -0) {
            doubleSOQ = 0.0;
        }

        return String.format("%.3f", doubleSOQ);
    }

    public static String getSOQNew(String mStrMustCellQty, String mStrActualQty) {
        Double doubleSOQ = 0.0;


        try {
            doubleSOQ = (Double.parseDouble(mStrMustCellQty) - Double.parseDouble(mStrActualQty));
        } catch (NumberFormatException e) {
            doubleSOQ = 0.0;
        }


        if (doubleSOQ.isNaN() || doubleSOQ.isInfinite()) {
            doubleSOQ = 0.0;
        }

        if (doubleSOQ < -0) {
            doubleSOQ = 0.0;
        }

        return String.format("%.3f", doubleSOQ);
    }

    public static HashMap<String, String> getMaterialMRPByCpStockItem(String mrpQry) throws
            OfflineODataStoreException {
        double doubleMRP = 0.0, mDobBatchQty = 0.0;
        HashMap<String, String> mapMrp = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mrpQry);
            if (entities != null && entities.size() > 0) {
                // getting first manufacturing date mrp value
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mCpStockItemGuid = null;
                    try {
                        mCpStockItemGuid = (ODataGuid) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    property = properties.get(Constants.ManufacturingDate);
//                    String ManufacturingDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
//                    Log.d("get MFD "+mCpStockItemGuid.guidAsString36().toUpperCase(), ManufacturingDate);

                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        if (mStrQty != null) {
                            doubleMRP = mStrQty.doubleValue();
                        } else {
                            doubleMRP = 0.0;
                        }
                    }
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }

                    } else {
                        mDobBatchQty = 0.0;
                    }
                    if (!hmMRPByItemIfQtyAval.containsKey(mCpStockItemGuid.guidAsString36().toUpperCase()) && doubleMRP > 0 /*&& mDobBatchQty>0*/) {
                        hmMRPByItemIfQtyAval.put(mCpStockItemGuid.guidAsString36().toUpperCase(), doubleMRP + "");
                    }

                    if (!mapMrp.containsKey(mCpStockItemGuid.guidAsString36().toUpperCase()) && doubleMRP > 0) {
                        mapMrp.put(mCpStockItemGuid.guidAsString36().toUpperCase(), doubleMRP + "");
                    }

                }

            }

        }

        return mapMrp;
    }

    public static double getMRP(String mrpQry) throws OfflineODataStoreException {
        double doubleMRP = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mrpQry);
            if (entities != null && entities.size() > 0) {
                // getting first manufacturing date mrp value
                ODataEntity entity = entities.get(0);
                properties = entity.getProperties();
                property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrQty = (BigDecimal) property.getValue();
                    if (mStrQty != null) {
                        doubleMRP = doubleMRP + mStrQty.doubleValue();
                    } else {
                        doubleMRP = doubleMRP + 0.0;
                    }
                }
            }

        }

        return doubleMRP;
    }

    public static double getMaterialMRP(String mrpQry) throws OfflineODataStoreException {
        double doubleMRP = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mrpQry);
            if (entities != null && entities.size() > 0) {
                // getting first manufacturing date mrp value
                ODataEntity entity = entities.get(0);
                properties = entity.getProperties();
                property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrQty = (BigDecimal) property.getValue();
                    if (mStrQty != null) {
                        doubleMRP = doubleMRP + mStrQty.doubleValue();
                    } else {
                        doubleMRP = doubleMRP + 0.0;
                    }
                }
            }

        }

        return doubleMRP;
    }

    public static String getRLSTK(String rlSTKQry) throws OfflineODataStoreException {
        double doubleRLSTK = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, rlSTKQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        if (mStrQty != null) {
                            doubleRLSTK = doubleRLSTK + mStrQty.doubleValue();
                        } else {
                            doubleRLSTK = doubleRLSTK + 0.0;
                        }

                    }
                }
            }
        }
        return String.format("%.3f", doubleRLSTK);
    }

    public static double getBMT(String bmtQry) throws OfflineODataStoreException {
        double doubleBMT = 0.0;
        if (offlineStore != null) {

        }
        return doubleBMT;
    }

    public static String makeInvoiceQry(String invQry) throws OfflineODataStoreException {

        String invListQry = "";
        ArrayList<InvoiceHistoryBean> invArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        invoiceBean = new InvoiceHistoryBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.InvoiceGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        invArrayList.add(invoiceBean);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }
        }


        if (invArrayList != null && invArrayList.size() > 0) {
            int i = 0;
            for (InvoiceHistoryBean invoiceHistoryBean : invArrayList) {
                if (i == 0 && i == invArrayList.size() - 1) {
                    invListQry = invListQry
                            + "(" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invoiceHistoryBean.getInvoiceGuid() + "')";

                } else if (i == 0) {
                    invListQry = invListQry
                            + "(" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invoiceHistoryBean.getInvoiceGuid() + "'";

                } else if (i == invArrayList.size() - 1) {
                    invListQry = invListQry
                            + "%20or%20" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invoiceHistoryBean.getInvoiceGuid() + "')";
                } else {
                    invListQry = invListQry
                            + "%20or%20" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invoiceHistoryBean.getInvoiceGuid() + "'";
                }
                i++;
            }
           /* for (int i = 0; i < invArrayList.size(); i++) {
                if (i == 0 && i == invArrayList.size() - 1) {
                    invListQry = invListQry
                            + "(" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "')";

                } else if (i == 0) {
                    invListQry = invListQry
                            + "(" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "'";

                } else if (i == invArrayList.size() - 1) {
                    invListQry = invListQry
                            + "%20or%20" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "')";
                } else {
                    invListQry = invListQry
                            + "%20or%20" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "'";
                }
            }*/
        } else {
            invListQry = "";
        }

        return invListQry;
    }

    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getDistributorListByCPGUID(String qry) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[11][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.PartnerMgrGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[0][incVal] = mInvoiceGUID.guidAsString36();
                            distVal[1][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.PartnerMgrNo);
                        distVal[2][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.PartnerMgrName);
                        distVal[3][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentID);
                        distVal[4][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentTypeID);
                        distVal[5][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentTypDesc);
                        distVal[6][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.ParentName);
                        distVal[7][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.CPTypeID);
                        distVal[8][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.CPTypeDesc);
                        distVal[9][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";

                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue() != null ? (String) property.getValue() : "";
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getDMSDivisionByCPGUID(String qry) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        distVal = new String[2][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.DMSDivision);
                            distVal[0][incVal] = (String) property.getValue();

                            property = properties.get(Constants.DMSDivisionDesc);
                            distVal[1][incVal] = (String) property.getValue();

                            incVal++;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static String[][] getDMSDivisionFromCPS(String qry) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        distVal = new String[2][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.DMSDivisionID);
                            distVal[0][incVal] = (String) property.getValue();

                            property = properties.get(Constants.DmsDivsionDesc);
                            distVal[1][incVal] = (String) property.getValue();

                            incVal++;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static String getDealerCodeByCPGUID(String qry) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized

        String dealerCode = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.ParentID);
                            dealerCode = (String) property.getValue();

                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return dealerCode;

    }

    /**
     * returns Visit status for retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getMoreThanOneMaterial(String strQry) throws
            OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, strQry);
        if (entities != null && entities.size() > 0) {
            if (entities.size() > 1) {
                mBooleanVisitStatus = true;
            } else {
                mBooleanVisitStatus = false;
            }
        } else {
            mBooleanVisitStatus = false;
        }
        return mBooleanVisitStatus;

    }

    public static ArrayList<SKUGroupBean> getLastInvNoAndMaterialNo(String invListQry) throws
            OfflineODataStoreException {
        ArrayList<SKUGroupBean> alLastInvNo = new ArrayList<>();
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invListQry);
        SKUGroupBean skuGrpBean = null;
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                skuGrpBean = new SKUGroupBean();
//                property = properties.get(Constants.InvoiceNo);
//                skuGrpBean.setLastInvoiceNo((String) property.getValue());
                property = properties.get(Constants.MaterialNo);
                skuGrpBean.setLastMaterialNo((String) property.getValue());
                alLastInvNo.add(skuGrpBean);
                break;
            }
        }
        return alLastInvNo;
    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListArray(String retListQry) throws
            OfflineODataStoreException {
        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        ODataProperty property;
        ODataPropMap properties;
        CustomerBean retBean;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retListQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.CPNo);
                retBean = new CustomerBean((String) property.getValue());
                retBean.setCPNo((String) property.getValue());
                property = properties.get(Constants.RetailerName);
                retBean.setRetailerName((String) property.getValue());
                property = properties.get(Constants.CPGUID);
                ODataGuid mCpGuid = null;
                try {
                    mCpGuid = (ODataGuid) property.getValue();
                    retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                    retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                retailerList.add(retBean);
            }
        }
        return retailerList;
    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargets
    (ArrayList<MyTargetsBean> arrayList, String mStrSPGuid) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();
        for (int incVal = 0; incVal < arrayList.size(); incVal++) {
            String qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                    + arrayList.get(incVal).getKpiGuid() + "'";
            ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getMyTargetsList(qryTargets, mStrSPGuid,
                    arrayList.get(incVal).getKPIName(), arrayList.get(incVal).getKPICode(), arrayList.get(incVal).getKpiGuid(),
                    arrayList.get(incVal).getCalculationBase(), arrayList.get(incVal).getKPIFor(),
                    arrayList.get(incVal).getCalculationSource(), arrayList.get(incVal).getRollUpTo(), arrayList.get(incVal).getKPICategory(), true);
            if (myTargetsBeanArrayList != null && myTargetsBeanArrayList.size() > 0) {
                if (myTargetList != null && myTargetList.size() > 0) {
                    myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
                } else {
                    myTargetList.addAll(myTargetsBeanArrayList);
                }
            } else {
                MyTargetsBean targetsBean = new MyTargetsBean();
                targetsBean.setKPICode(arrayList.get(incVal).getKPICode());
                targetsBean.setKPIName(arrayList.get(incVal).getKPIName());
                targetsBean.setKpiGuid(arrayList.get(incVal).getKpiGuid());
                targetsBean.setCalculationBase(arrayList.get(incVal).getCalculationBase());
                targetsBean.setCalculationSource(arrayList.get(incVal).getCalculationBase());
                targetsBean.setKPIFor(arrayList.get(incVal).getKPIFor());
                targetsBean.setKPICategory(arrayList.get(incVal).getKPICategory());
                targetsBean.setMonthTarget("0");
                targetsBean.setMTDA("0");
                targetsBean.setAchivedPercentage("0");
                targetsBean.setBTD("0");
                myTargetList.add(targetsBean);
            }
        }

        return myTargetList;
    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getTargetsDaySummary
    (ArrayList<MyTargetsBean> arrayList, String mStrSPGuid) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();
        for (int incVal = 0; incVal < arrayList.size(); incVal++) {
            String qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                    + arrayList.get(incVal).getKpiGuid() + "'";
            ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getMyTargetsList(qryTargets, mStrSPGuid,
                    arrayList.get(incVal).getKPIName(), arrayList.get(incVal).getKPICode(), arrayList.get(incVal).getKpiGuid(),
                    arrayList.get(incVal).getCalculationBase(), arrayList.get(incVal).getKPIFor(),
                    arrayList.get(incVal).getCalculationSource(), arrayList.get(incVal).getRollUpTo(), arrayList.get(incVal).getKPICategory(), false);
            if (myTargetsBeanArrayList != null && myTargetsBeanArrayList.size() > 0) {
                if (myTargetList != null && myTargetList.size() > 0) {
                    myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
                } else {
                    myTargetList.addAll(myTargetsBeanArrayList);
                }
            } else {
                MyTargetsBean targetsBean = new MyTargetsBean();
                targetsBean.setKPICode(arrayList.get(incVal).getKPICode());
                targetsBean.setKPIName(arrayList.get(incVal).getKPIName());
                targetsBean.setKpiGuid(arrayList.get(incVal).getKpiGuid());
                targetsBean.setCalculationBase(arrayList.get(incVal).getCalculationBase());
                targetsBean.setCalculationSource(arrayList.get(incVal).getCalculationBase());
                targetsBean.setKPIFor(arrayList.get(incVal).getKPIFor());
                targetsBean.setKPICategory(arrayList.get(incVal).getKPICategory());
                targetsBean.setMonthTarget("0");
                targetsBean.setMTDA("0");
                targetsBean.setAchivedPercentage("0");
                targetsBean.setBTD("0");
                myTargetList.add(targetsBean);


            }
        }

        return myTargetList;
    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargetsByKPI(MyTargetsBean arrayList, String
            mStrSPGuid) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        String qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                + arrayList.getKpiGuid() + "'";
        ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getMyTargetsListByTodayRouteRetailer(qryTargets, mStrSPGuid,
                arrayList.getKPIName(), arrayList.getKPICode(), arrayList.getKpiGuid(),
                arrayList.getCalculationBase(), arrayList.getKPIFor(),
                arrayList.getCalculationSource(), arrayList.getRollUpTo(), arrayList.getKPICategory());
        if (myTargetsBeanArrayList != null && myTargetsBeanArrayList.size() > 0) {
            if (myTargetList != null && myTargetList.size() > 0) {
                myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
            } else {
                myTargetList.addAll(myTargetsBeanArrayList);
            }
        } else {
            MyTargetsBean targetsBean = new MyTargetsBean();
            targetsBean.setKPICode(arrayList.getKPICode());
            targetsBean.setKPIName(arrayList.getKPIName());
            targetsBean.setKpiGuid(arrayList.getKpiGuid());
            targetsBean.setCalculationBase(arrayList.getCalculationBase());
            targetsBean.setCalculationSource(arrayList.getCalculationBase());
            targetsBean.setKPIFor(arrayList.getKPIFor());
            targetsBean.setKPICategory(arrayList.getKPICategory());
            targetsBean.setMonthTarget("0");
            targetsBean.setMTDA("0");
            targetsBean.setAchivedPercentage("0");
            targetsBean.setBTD("0");
            myTargetList.add(targetsBean);


        }

        return myTargetList;
    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargetsList(String myTargetQry, String
            mStrSPGuid,
                                                            String mStrKpiName, String mStrKpiCode, String mStrKpiGuid,
                                                            String mStrCalBase, String mStrKpiFor, String mStrCalSource
            , String mStrRollUPto, String mStrKPICat, boolean comingFromTargets) throws
            OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myTargetQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();

                    property = properties.get(Constants.TargetGUID);
                    ODataGuid mTargetGuid = null;
                    try {
                        mTargetGuid = (ODataGuid) property.getValue();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    ArrayList<MyTargetsBean> arrayList = getMyTargetItemsList(mTargetGuid.guidAsString36(), mStrSPGuid,
                            mStrCalBase, mStrRollUPto, mStrKpiName, mStrKpiGuid, mStrKPICat, comingFromTargets);

                    if (myTargetList != null && myTargetList.size() > 0) {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(myTargetList.size(), arrayList);
                        }
                    } else {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(arrayList);
                        }
                    }
                }
            }
        }

        return myTargetList;

    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargetsListByTodayRouteRetailer(String
                                                                                        myTargetQry, String mStrSPGuid,
                                                                                String mStrKpiName, String mStrKpiCode, String mStrKpiGuid,
                                                                                String mStrCalBase, String mStrKpiFor, String mStrCalSource
            , String mStrRollUPto, String mStrKPICAT) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myTargetQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();

                    property = properties.get(Constants.TargetGUID);
                    ODataGuid mTargetGuid = null;
                    try {
                        mTargetGuid = (ODataGuid) property.getValue();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    ArrayList<MyTargetsBean> arrayList = getMyTargetItemsListByTodayRetailer(mTargetGuid.guidAsString36(), mStrSPGuid,
                            mStrCalBase, mStrRollUPto, mStrKpiName, mStrKpiGuid, mStrKPICAT);

                    if (myTargetList != null && myTargetList.size() > 0) {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(myTargetList.size(), arrayList);
                        }
                    } else {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(arrayList);
                        }
                    }
                }
            }
        }

        return myTargetList;

    }

    public static ArrayList<MyTargetsBean> getMyTargetItemsList(String targetGuid, String
            mSPGuid,
                                                                String mStrCalBase, String mStrRollUp,
                                                                String mStrKpiName, String mStrKpiGuid, String mStrKPICat, boolean comingFromTargets) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";

        try {

            if (comingFromTargets) {
                if (getVisitStatusForCustomer("" + Constants.TargetItems +
                        "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mSPGuid + "' and "
                        + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {

                    if (mStrCalBase.equalsIgnoreCase("01")) {
                        mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                                + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                                + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    } else {

                        mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                                + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                                + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                    }


                    mStrTargetQry = Constants.TargetItems +
                            "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                            + "' and " + Constants.PartnerGUID + " eq '" + mSPGuid + "'";

                } else if (getVisitStatusForCustomer("" + Constants.TargetItems +
                        "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " ne '" + mSPGuid + "' and "
                        + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {
//				if (mStrRollUp.equalsIgnoreCase("02")) {

                    if (mStrCalBase.equalsIgnoreCase("01")) {
                        mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                                + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                                + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    } else {

                        mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                                + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                                + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                    }

                    mStrTargetQry = Constants.TargetItems +
                            "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                            + "' and " + Constants.PartnerGUID + " ne '" + mSPGuid + "'";
//				}
                }
            } else {
                if (Constants.alRetailersGuid.size() > 0) {
                    String cpQry = Constants.makeCPQry(Constants.alRetailersGuid, Constants.PartnerGUID);

                    if (mStrCalBase.equalsIgnoreCase("01")) {
                        mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                                + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                                + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    } else {

                        mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                                + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                                + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                    }

                    mStrTargetQry = Constants.TargetItems +
                            "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                            + "' and (" + cpQry + ")";
                }

            }


        } catch (Exception e) {
            e.printStackTrace();
        }


        if (mStrTargetQry != null && !mStrTargetQry.equalsIgnoreCase("")) {
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();


                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;
                if (mStrCalBase.equalsIgnoreCase("01")) {


                    property = properties.get(Constants.TargetQty);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
//                    monthTarget = mDobTargetQty + "";
                    monthTarget = String.format("%.3f", mDobTargetQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            monthTarget = trimQtyDecimalPlace(monthTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.ActualQty);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
//                    actualTarget = mDobActQty + "";
                    actualTarget = String.format("%.3f", mDobActQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            actualTarget = trimQtyDecimalPlace(actualTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else {

                    property = properties.get(Constants.TargetValue);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
                    monthTarget = mDobTargetQty + "";

                    property = properties.get(Constants.ActualValue);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
                    actualTarget = mDobActQty + "";
                }

                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }

                double mDouAchivedPercentage = getAchivedPer(monthTarget, actualTarget);

                double mDoubBTD = getBTD(monthTarget, actualTarget);

                myTargetBean.setAchivedPercentage(mDouAchivedPercentage + "");
                myTargetBean.setBTD(mDoubBTD + "");

                property = properties.get(Constants.MaterialNo);
                myTargetBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.MaterialDesc);
                myTargetBean.setMaterialDesc((String) property.getValue());

                property = properties.get(Constants.MaterialGroup);
                myTargetBean.setMaterialGroup((String) property.getValue());

                property = properties.get(Constants.MaterialGrpDesc);
                myTargetBean.setMaterialGrpDesc((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                myTargetBean.setKPIName(mStrKpiName);

                property = properties.get(Constants.KPICode);
                String mStrKpiCodeVal = (String) property.getValue();

                myTargetBean.setKPICode(mStrKpiCodeVal);

                myTargetBean.setKpiGuid(mStrKpiGuid);

                myTargetBean.setCalculationBase(mStrCalBase);
                myTargetBean.setKPICategory(mStrKPICat);

                arrayList.add(myTargetBean);
            }
        }
        return arrayList;
    }

    public static ArrayList<MyTargetsBean> getMyTargetItemsListByTodayRetailer(String
                                                                                       targetGuid, String mCPGuid,
                                                                               String mStrCalBase, String mStrRollUp,
                                                                               String mStrKpiName, String mStrKpiGuid, String mStrKPICAT) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";

        try {

            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and "
                    + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                }


                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.PartnerGUID + " eq '" + mCPGuid + "'";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        if (!mStrTargetQry.equalsIgnoreCase("")) {
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();


                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;
                if (mStrCalBase.equalsIgnoreCase("01")) {


                    property = properties.get(Constants.TargetQty);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
//                    monthTarget = mDobTargetQty + "";
                    monthTarget = String.format("%.3f", mDobTargetQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            monthTarget = trimQtyDecimalPlace(monthTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.ActualQty);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
//                    actualTarget = mDobActQty + "";
                    actualTarget = String.format("%.3f", mDobActQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            actualTarget = trimQtyDecimalPlace(actualTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else {

                    property = properties.get(Constants.TargetValue);
                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobTargetQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobTargetQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                        mDobTargetQty = 0.0;
                    }
                    monthTarget = mDobTargetQty + "";

                    property = properties.get(Constants.ActualValue);

                    try {
                        BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                        mDobActQty = monthTargetVal.doubleValue();
                    } catch (Exception e) {
                        mDobActQty = 0.0;
                        e.printStackTrace();
                    }

                    if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                        mDobActQty = 0.0;
                    }
                    actualTarget = mDobActQty + "";
                }

                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }

                double mDouAchivedPercentage = getAchivedPer(monthTarget, actualTarget);

                double mDoubBTD = getBTD(monthTarget, actualTarget);

                myTargetBean.setAchivedPercentage(mDouAchivedPercentage + "");
                myTargetBean.setBTD(mDoubBTD + "");

                property = properties.get(Constants.MaterialNo);
                myTargetBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.MaterialDesc);
                myTargetBean.setMaterialDesc((String) property.getValue());

                property = properties.get(Constants.MaterialGroup);
                myTargetBean.setMaterialGroup((String) property.getValue());

                property = properties.get(Constants.MaterialGrpDesc);
                myTargetBean.setMaterialGrpDesc((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                myTargetBean.setKPIName(mStrKpiName);

                property = properties.get(Constants.KPICode);
                String mStrKpiCodeVal = (String) property.getValue();

                myTargetBean.setKPICode(mStrKpiCodeVal);

                myTargetBean.setKpiGuid(mStrKpiGuid);

                myTargetBean.setKPICategory(mStrKPICAT);

                myTargetBean.setCalculationBase(mStrCalBase);

                arrayList.add(myTargetBean);
            }
        }
        return arrayList;
    }

    public static Map<String, MyTargetsBean> getTargetByRetailer(String mCPGuid,
                                                                 String mStrOrderMatGrp) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";
        try {
            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' ")) {

                mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                        + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;

                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and " + Constants.OrderMaterialGroupID + " eq '" + mStrOrderMatGrp + "' ";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();

                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;

                property = properties.get(Constants.TargetQty);
                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobTargetQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobTargetQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                    mDobTargetQty = 0.0;
                }
//                monthTarget = mDobTargetQty + "";
                monthTarget = String.format("%.3f", mDobTargetQty);
                property = properties.get(Constants.UOM);
                try {
                    if (checkNoUOMZero(String.valueOf(property.getValue())))
                        monthTarget = trimQtyDecimalPlace(monthTarget);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

                property = properties.get(Constants.ActualQty);

                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobActQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobActQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                    mDobActQty = 0.0;
                }
//                actualTarget = mDobActQty + "";
                actualTarget = String.format("%.3f", mDobActQty);
                property = properties.get(Constants.UOM);
                try {
                    if (checkNoUOMZero(String.valueOf(property.getValue())))
                        actualTarget = trimQtyDecimalPlace(actualTarget);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }


                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }


                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                arrayList.add(myTargetBean);
            }
        }
        Map<String, MyTargetsBean> mapMyTargetBean = new HashMap<>();
        if (arrayList != null && arrayList.size() > 0) {
            Map<String, Double> mapMonthTarget = new HashMap<>();
            Map<String, Double> mapMonthAchived = new HashMap<>();

            for (MyTargetsBean bean : arrayList)
                if (mapMyTargetBean.containsKey(bean.getOrderMaterialGroupID())) {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget()) + mapMonthTarget.get(bean.getOrderMaterialGroupID());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA()) + mapMonthAchived.get(bean.getOrderMaterialGroupID());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    bean.setMonthTarget(mDoubMonthTarget + "");
                    bean.setMTDA(mDoubMonthAchived + "");
                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                } else {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                }
        } else {
            MyTargetsBean myTargetsBean = new MyTargetsBean();
            myTargetsBean.setMonthTarget("0.00");
            myTargetsBean.setMTDA("0.00");
            myTargetsBean.setOrderMaterialGroupID(mStrOrderMatGrp);
            mapMyTargetBean.put(mStrOrderMatGrp, myTargetsBean);
        }
        return mapMyTargetBean;
    }

    public static Map<String, MyTargetsBean> getTargetByRetailerByCalBase(String mCPGuid,
                                                                          String mStrOrderMatGrp, String mStrCalBase) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";
        try {
            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' ")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                } else {
                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc;
                }

                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and " + Constants.OrderMaterialGroupID + " eq '" + mStrOrderMatGrp + "' ";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ODataProperty property = null;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();

                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.TargetQty);
                } else {
                    property = properties.get(Constants.TargetValue);
                }
                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobTargetQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobTargetQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                    mDobTargetQty = 0.0;
                }
//                monthTarget = mDobTargetQty + "";
                if (mStrCalBase.equalsIgnoreCase("01")) {
                    monthTarget = String.format("%.3f", mDobTargetQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            monthTarget = trimQtyDecimalPlace(monthTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else
                    monthTarget = mDobTargetQty + "";

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.ActualQty);
                } else {
                    property = properties.get(Constants.ActualValue);
                }

                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobActQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobActQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                    mDobActQty = 0.0;
                }
//                actualTarget = mDobActQty + "";
                if (mStrCalBase.equalsIgnoreCase("01")) {
                    actualTarget = String.format("%.3f", mDobActQty);
                    property = properties.get(Constants.UOM);
                    try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            actualTarget = trimQtyDecimalPlace(actualTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }
                } else
                    actualTarget = mDobActQty + "";


                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }


                property = properties.get(Constants.OrderMaterialGroupID);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                arrayList.add(myTargetBean);
            }
        }
        Map<String, MyTargetsBean> mapMyTargetBean = new HashMap<>();
        if (arrayList != null && arrayList.size() > 0) {
            Map<String, Double> mapMonthTarget = new HashMap<>();
            Map<String, Double> mapMonthAchived = new HashMap<>();

            for (MyTargetsBean bean : arrayList)
                if (mapMyTargetBean.containsKey(bean.getOrderMaterialGroupID())) {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget()) + mapMonthTarget.get(bean.getOrderMaterialGroupID());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA()) + mapMonthAchived.get(bean.getOrderMaterialGroupID());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    bean.setMonthTarget(mDoubMonthTarget + "");
                    bean.setMTDA(mDoubMonthAchived + "");
                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                } else {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                }
        } else {
            MyTargetsBean myTargetsBean = new MyTargetsBean();
            myTargetsBean.setMonthTarget("0.00");
            myTargetsBean.setMTDA("0.00");
            myTargetsBean.setOrderMaterialGroupID(mStrOrderMatGrp);
            mapMyTargetBean.put(mStrOrderMatGrp, myTargetsBean);
        }
        return mapMyTargetBean;
    }

    public static double getAchivedPer(String monthTarget, String actualTarget) {
        double mDouAchivedPercentage = 0.0;
        try {
            mDouAchivedPercentage = Double.parseDouble(actualTarget) / Double.parseDouble(monthTarget) * 100;
        } catch (NumberFormatException e) {
            mDouAchivedPercentage = 0.0;
        }

        if (Double.isNaN(mDouAchivedPercentage) || Double.isInfinite(mDouAchivedPercentage)) {
            mDouAchivedPercentage = 0.0;
        }

        return mDouAchivedPercentage;
    }

    public static double getBTD(String monthTarget, String actualTarget) {
        double mDoubBTD = 0.0;
        try {
            mDoubBTD = Double.parseDouble(monthTarget) - Double.parseDouble(actualTarget);

        } catch (NumberFormatException e) {
            mDoubBTD = 0.0;
        }
        if (Double.isNaN(mDoubBTD) || Double.isInfinite(mDoubBTD)) {
            mDoubBTD = 0.0;
        }

        return mDoubBTD;
    }

    /*Returns KPI set GUID  based on current month and year */
    public static ArrayList<MyTargetsBean> getKpiSetGuidList(String kpiQry, String
            mStrDmsDivQry) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> kpiArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean kpiBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    kpiBean = new MyTargetsBean();
                    properties = entity.getProperties();
                    String mStrRollUp = "";
                    property = properties.get(Constants.KPIGUID);
                    ODataGuid kpiGuid = null;
                    try {
                        kpiGuid = (ODataGuid) property.getValue();
                        kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
                            + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' and " + mStrDmsDivQry + "";
                    if (getVisitActivityStatusForVisit(activityStatusForVisitQry)) {

                        /*mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                        kpiBean.setRollUpTo(mStrRollUp);*/
                        kpiBean.setRollUpTo("");

                        property = properties.get(Constants.KPIName);
                        kpiBean.setKPIName((String) property.getValue());

                        property = properties.get(Constants.KPICode);
                        kpiBean.setKPICode((String) property.getValue());

                        property = properties.get(Constants.KPIFor);
                        kpiBean.setKPIFor((String) property.getValue());

                        property = properties.get(Constants.CalculationSource);
                        kpiBean.setCalculationSource((String) property.getValue());

                        property = properties.get(Constants.CalculationBase);
                        kpiBean.setCalculationBase((String) property.getValue());

                        property = properties.get(Constants.KPICategory);
                        kpiBean.setKPICategory((String) property.getValue());

                        kpiArrayList.add(kpiBean);
                    }

                }
            }


        }

        return kpiArrayList;


    }

    public static byte[] getImageList(String mediaLink) throws OfflineODataStoreException {

        final byte[][] bytes = {null};
        //Check if the offline oData store is initialized
        final boolean[] isDataAvailable = {false};
        if (offlineStore != null) {

            ODataDownloadMediaSyncListener oDataDownloadMediaListener = new ODataDownloadMediaSyncListener() {
                @Override
                public void mediaDownloadServerResponse(ODataDownloadMediaResult oDataDownloadMediaResult) {
                    oDataDownloadMediaResult.getAllHttpHeaders();

                    ODataDownloadMediaResultDefaultImpl oDataDownloadMediaResultDefault = (ODataDownloadMediaResultDefaultImpl) oDataDownloadMediaResult;


                    InputStream is = oDataDownloadMediaResultDefault.getInputStream();
                    byte[] buf = null;
                    try {
                        int len;
                        int size = 100 * 1024;


                        if (is instanceof ByteArrayInputStream) {
                            size = is.available();
                            buf = new byte[size];
                            len = is.read(buf, 0, size);
                        } else {
                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
                            buf = new byte[size];
                            while ((len = is.read(buf, 0, size)) != -1)
                                bos.write(buf, 0, len);
                            buf = bos.toByteArray();


                        }
                    } catch (IOException e) {

                    }
                    isDataAvailable[0] = true;
                    bytes[0] = buf;


                }
            };


            URL mediaURL = null;
            try {
                mediaURL = new URL(mediaLink);
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }

            try {
                offlineStore.executeMediaDownload(mediaURL, oDataDownloadMediaListener);
            } catch (ODataException e) {
                e.printStackTrace();
            }
        }

        while (!isDataAvailable[0]) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        isDataAvailable[0] = false;
        return bytes[0];

    }

    public static void createCompetitorInfo(Hashtable<String, String> table, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createCompetitorInfoEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CompetitorInfos,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CompetitorInfos),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createCompetitorInfoEntity
            (Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CompetitorInfoEntity);


                newEntity.getProperties().put(Constants.CompInfoGUID,
                        new ODataPropertyDefaultImpl(Constants.CompInfoGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CompInfoGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.SPGUID,
                        new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));

                newEntity.getProperties().put(Constants.CompGUID,
                        new ODataPropertyDefaultImpl(Constants.CompGUID, hashtable.get(Constants.CompGUID)));

                newEntity.getProperties().put(Constants.CompName,
                        new ODataPropertyDefaultImpl(Constants.CompName, hashtable.get(Constants.CompName)));


//info
                newEntity.getProperties().put(Constants.MRP,
                        new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP)))));
                newEntity.getProperties().put(Constants.Margin,
                        new ODataPropertyDefaultImpl(Constants.Margin, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Margin)))));
                newEntity.getProperties().put(Constants.LandingPrice,
                        new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice)))));
                newEntity.getProperties().put(Constants.WholeSalesLandingPrice,
                        new ODataPropertyDefaultImpl(Constants.WholeSalesLandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.WholeSalesLandingPrice)))));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                newEntity.getProperties().put(Constants.ConsumerOffer,
                        new ODataPropertyDefaultImpl(Constants.ConsumerOffer, hashtable.get(Constants.ConsumerOffer)));
                newEntity.getProperties().put(Constants.TradeOffer,
                        new ODataPropertyDefaultImpl(Constants.TradeOffer, hashtable.get(Constants.TradeOffer)));
//                if (hashtable.get(Constants.ShelfLife).equals(""))
                newEntity.getProperties().put(Constants.ShelfLife,
                        new ODataPropertyDefaultImpl(Constants.ShelfLife, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.ShelfLife)))));
//                else
//                    newEntity.getProperties().put(Constants.ShelfLife,
//                            new ODataPropertyDefaultImpl(Constants.ShelfLife, new BigDecimal("0")));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

//info


                newEntity.getProperties().put(Constants.Earnings,
                        new ODataPropertyDefaultImpl(Constants.Earnings, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Earnings)))));

                newEntity.getProperties().put(Constants.SchemeName,
                        new ODataPropertyDefaultImpl(Constants.SchemeName, hashtable.get(Constants.SchemeName)));
                newEntity.getProperties().put(Constants.Currency,
                        new ODataPropertyDefaultImpl(Constants.Currency, hashtable.get(Constants.Currency)));


                newEntity.getProperties().put(Constants.Period,
                        new ODataPropertyDefaultImpl(Constants.Period, hashtable.get(Constants.Period)));

                newEntity.getProperties().put(Constants.UpdatedOn,
                        new ODataPropertyDefaultImpl(Constants.UpdatedOn, UtilConstants.convertDateFormat(hashtable.get(Constants.UpdatedOn))));

           /*     newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/


                if (!TextUtils.isEmpty(hashtable.get(Constants.CompInfoGUID))) {
                    String resourcePath = UtilConstants.getEditResourcePath(Constants.CompetitorInfos, hashtable.get(Constants.CompInfoGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static String[][] getCompMaster(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CompGUID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CompName);
                        configVal[1][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    @SuppressLint("NewApi")
    public static ArrayList<CompetitorInfoBean> getCompInfoListDetails(String compInfoQry) throws
            OfflineODataStoreException {

        ArrayList<CompetitorInfoBean> alCompInfo = new ArrayList<CompetitorInfoBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CompetitorInfoBean compInfoBean;
            ODataProperty property;
            ODataPropMap properties;
            ODataAnnotationDefaultImpl localAnnotations;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(compInfoQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        compInfoBean = new CompetitorInfoBean();

                        property = properties.get(Constants.MatGrp1Amount);
                        try {
                            BigDecimal mtargetAmount = (BigDecimal) property.getValue();
                            if (mtargetAmount != null) {
                                compInfoBean.setMatGrp1Amount(mtargetAmount.toString());
                            } else {
                                compInfoBean.setMatGrp1Amount("0");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.MatGrp2Amount);
                        try {
                            BigDecimal mtargetAmount = (BigDecimal) property.getValue();
                            if (mtargetAmount != null) {
                                compInfoBean.setMatGrp2Amount(mtargetAmount.toString());
                            } else {
                                compInfoBean.setMatGrp2Amount("0");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.MatGrp3Amount);
                        try {
                            BigDecimal mtargetAmount = (BigDecimal) property.getValue();
                            if (mtargetAmount != null) {
                                compInfoBean.setMatGrp3Amount(mtargetAmount.toString());
                            } else {
                                compInfoBean.setMatGrp3Amount("0");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Earnings);
                        try {
                            BigDecimal mtargetAmount = (BigDecimal) property.getValue();
                            if (mtargetAmount != null) {
                                compInfoBean.setEarnings(mtargetAmount.toString());
                            } else {
                                compInfoBean.setEarnings("0");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.SchemeAmount);
                        try {
                            BigDecimal mtargetAmount = (BigDecimal) property.getValue();
                            if (mtargetAmount != null) {
                                compInfoBean.setSchemeAmount(mtargetAmount.toString());
                            } else {
                                compInfoBean.setSchemeAmount("0");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.MatGrp4Amount);
                        try {
                            BigDecimal mtargetAmount = (BigDecimal) property.getValue();
                            if (mtargetAmount != null) {
                                compInfoBean.setMatGrp4Amount(mtargetAmount.toString());
                            } else {
                                compInfoBean.setMatGrp4Amount("0");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        compInfoBean.setEtag(entity.getEtag());
                        compInfoBean.setResourcePath(entity.getResourcePath());

                        alCompInfo.add(compInfoBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException
                        (e)
                        ;
            }
        }
        return alCompInfo;

    }

    public static void deleteCompInfo(CompetitorInfoBean competitorInfoBean) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            offlineStore.scheduleDeleteEntity(competitorInfoBean.getResourcePath(),
                    competitorInfoBean.getEtag(), new OfflineRequestListener(Operation.Create.getValue(), Constants.CompetitorInfos), null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }

    }

    @SuppressLint("NewApi")
    public static ArrayList<CompetitorInfoBean> getCompInfoList(String compInfoQry) throws
            OfflineODataStoreException {

        ArrayList<CompetitorInfoBean> alCompInfo = new ArrayList<CompetitorInfoBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CompetitorInfoBean compInfoBean;
            ODataProperty property;
            ODataPropMap properties;
            ODataAnnotationDefaultImpl localAnnotations;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(compInfoQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        compInfoBean = new CompetitorInfoBean();
                        property = properties.get(Constants.UpdatedOn);
                        String convertDateFormat = UtilConstants.convertGregorianCalendarToYYYYMMDDFormat((GregorianCalendar) property.getValue());
                        compInfoBean.setUpdatedOn(convertDateFormat + "T00:00:00");


                        property = properties.get(Constants.CompetitorName);
                        compInfoBean.setCompetitorName((String) property.getValue());

                        property = properties.get(Constants.CompInfoGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            compInfoBean.setCompetitorGUID(mInvoiceGUID.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        alCompInfo.add(compInfoBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException
                        (e)
                        ;
            }
        }
        return alCompInfo;

    }

    public static ArrayList<InvoiceBean> getMustSellMatList(String focusedPrdQry, String
            strMaterialType) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> spStockList = new ArrayList<InvoiceBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceBean spStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(focusedPrdQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        spStockBean = new InvoiceBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);

                        String matNo = (String) property.getValue();

//                        ArrayList<InvoiceBean> arrayListSPVal = getSPGuid(Constants.SPStockItems + "?$filter=" + Constants.Material_No + " eq '" + matNo + "'");
                        ArrayList<InvoiceBean> arrayListSPVal = getSPGuid(Constants.CPStockItems + "?$filter=" + Constants.Material_No + " eq '" + matNo + "'");
                        if (arrayListSPVal != null && arrayListSPVal.size() > 0) {
                            spStockBean.setMatCode((String) property.getValue());

                            spStockBean.setUom(arrayListSPVal.get(0).getUom());
                            spStockBean.setMatDesc(arrayListSPVal.get(0).getMatDesc());
                            spStockBean.setMatGrp(strMaterialType);
                            spStockBean.setCPStockItemGUID(arrayListSPVal.get(0).getCPStockItemGUID());
                            spStockBean.setStockValue(arrayListSPVal.get(0).getStockValue());
                            spStockBean.setZzindicator(arrayListSPVal.get(0).getZzindicator());
                            spStockBean.setUnrestrictedQty(arrayListSPVal.get(0).getUnrestrictedQty());
                            spStockList.add(spStockBean);
                        }


                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return spStockList;

    }

    public static ArrayList<InvoiceBean> getSPGuid(String matQry) throws
            OfflineODataStoreException {
        InvoiceBean invoiceBean;
//		String spguid="";
        ArrayList<InvoiceBean> arrayListInv = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
//			InvoiceBean matBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!matQry.equalsIgnoreCase("")) {
//				String resourcePath = Constants.ChannelPartners+"?$filter="+Constants.ParentID+" eq '"+distCode+"'" ;
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(matQry);
                    //Send a request to read the HelpLine from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceBean = new InvoiceBean();

                            property = properties.get(Constants.SPStockItemGUID);
                            try {
                                ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                                invoiceBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.Material_Desc);
                            invoiceBean.setMatDesc((String) property.getValue());


                            property = properties.get(Constants.UOM);
                            invoiceBean.setUom((String) property.getValue());

//							property = properties.get(Constants.Zzindicator);
//							invoiceBean.setZzindicator((String) property.getValue());

//							if(!((String) property.getValue()).equalsIgnoreCase("S")){
                            property = properties.get(Constants.StockValue);
                            if (property != null) {
                                BigDecimal mDecStockVal = (BigDecimal) property.getValue();
                                invoiceBean.setStockValue(Constants.removeLeadingZero(mDecStockVal.toString()));
                            }
//							}else{
//								invoiceBean.setStockValue("0");
//							}

                            property = properties.get(Constants.UnrestrictedQty);
                            if (property != null) {
                                BigDecimal mDecStockVal = (BigDecimal) property.getValue();
                                invoiceBean.setUnrestrictedQty(UtilConstants.removeLeadingZeroVal(mDecStockVal.toString()));
                            } else {
                                invoiceBean.setUnrestrictedQty("0");
                            }

                            arrayListInv.add(invoiceBean);
                        }
                    } else {
                        throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                                + "but got " + response.getPayloadType().name());
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
//		if(spguid.equalsIgnoreCase("")){
//			GUID guid= GUID.newRandom();
//			spguid = guid.toString36();
//		}
        return arrayListInv;

    }

    public static ODataEntity getMaterialDesc(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        String attdVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
//				String resourcePath = Constants.Attendances+"?$filter=StartDate eq '"+strDate+"'" ;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
//					boolVal =true;
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
					/*ODataEntitySet feed = (ODataEntitySet) response.getPayload();
					List<ODataEntity> entities = feed.getEntities();


					for (ODataEntity entity: entities) {
						odataEntity = entity;
					}*/
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerEntity;

    }

    public static ArrayList<InvoiceBean> getSegMatList(String focusedPrdQry, String
            strMaterialType, String qryMatAvalible) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> spStockList = new ArrayList<InvoiceBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceBean spStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(focusedPrdQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        spStockBean = new InvoiceBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);

                        String matNo = (String) property.getValue();

                        if (!OfflineManager.getVisitStatusForCustomer(qryMatAvalible + " and " + Constants.Material_No + " eq '" + matNo + "' ")) {
                            ArrayList<InvoiceBean> arrayListSPVal = getSPGuid(Constants.SPStockItems + "?$filter=" + Constants.Material_No + " eq '" + matNo + "'");
                            if (arrayListSPVal != null && arrayListSPVal.size() > 0) {
                                spStockBean.setMatCode((String) property.getValue());


                                spStockBean.setMatGrp(strMaterialType);
                                spStockBean.setUom(arrayListSPVal.get(0).getUom());
                                spStockBean.setMatDesc(arrayListSPVal.get(0).getMatDesc());
                                spStockBean.setCPStockItemGUID(arrayListSPVal.get(0).getCPStockItemGUID());
                                spStockBean.setStockValue(arrayListSPVal.get(0).getStockValue());
                                spStockBean.setZzindicator(arrayListSPVal.get(0).getZzindicator());
                                spStockBean.setUnrestrictedQty(arrayListSPVal.get(0).getUnrestrictedQty());

                                spStockList.add(spStockBean);
                            }
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return spStockList;

    }

    public static ArrayList<InvoiceBean> getOtherMaterialsList(String focusedPrdQry, String
            strMatSyncType) throws OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(focusedPrdQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        focsBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        focsBean.setValue((String) property.getValue());
                        focList.add(focsBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        String segMatURl = "", appendSpItemUrl = "";
        if (focList != null && focList.size() > 0) {
            for (int i = 0; i < focList.size(); i++) {
                if (i == 0 && i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "(MaterialNo%20ne%20'"
                            + focList.get(i).getValue() + "')";

                } else if (i == 0) {
                    segMatURl = segMatURl
                            + "(MaterialNo%20ne%20'"
                            + focList.get(i).getValue() + "'";

                } else if (i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "%20and%20MaterialNo%20ne%20'"
                            + focList.get(i).getValue() + "')";
                } else {
                    segMatURl = segMatURl
                            + "%20and%20MaterialNo%20ne%20'"
                            + focList.get(i).getValue() + "'";
                }
            }
//            appendSpItemUrl = Constants.SPStockItems + "?$filter=" + segMatURl + " ";
            appendSpItemUrl = Constants.CPStockItems + "?$filter=" + segMatURl + " ";
        }

        if (appendSpItemUrl.equalsIgnoreCase("")) {
//            appendSpItemUrl = Constants.SPStockItems;
            appendSpItemUrl = Constants.CPStockItems;
        }

        return getMaterialList(appendSpItemUrl, strMatSyncType);

    }

    public static ArrayList<InvoiceBean> getMaterialList(String matQry, String matGrp) throws
            OfflineODataStoreException {

        ArrayList<InvoiceBean> spStockList = new ArrayList<InvoiceBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceBean spStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!matQry.equalsIgnoreCase("")) {
//				String resourcePath = Constants.ChannelPartners+"?$filter="+Constants.ParentID+" eq '"+distCode+"'" ;
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(matQry);
                    //Send a request to read the HelpLine from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            spStockBean = new InvoiceBean();
                            property = properties.get(Constants.Material_No);

                            String matNo = (String) property.getValue();

                            spStockBean.setMatCode((String) property.getValue());

                            property = properties.get(Constants.Material_Desc);
                            spStockBean.setMatDesc((String) property.getValue());

                            property = properties.get(Constants.UOM);
                            spStockBean.setUom((String) property.getValue());

//                            property = properties.get(Constants.SPStockItemGUID);
                            property = properties.get(Constants.CPStockItemGUID);
                            try {
                                ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                                spStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            spStockBean.setMatGrp(matGrp);


//							property = properties.get(Constants.Zzindicator);
//							spStockBean.setZzindicator((String) property.getValue());


//							if(!((String) property.getValue()).equalsIgnoreCase("S")){
                            property = properties.get(Constants.StockValue);
                            if (property != null) {
                                BigDecimal mDecStockVal = (BigDecimal) property.getValue();
                                spStockBean.setStockValue(UtilConstants.removeLeadingZeroVal(mDecStockVal.toString()));
                            }
//							}else{
                            else
                                spStockBean.setStockValue("0");
//							}

//                            property = properties.get(Constants.MRP);
//                            if (property != null) {
//                                BigDecimal mDecStockVal = (BigDecimal) property.getValue();
//                                spStockBean.setUnitPrice(UtilConstants.removeLeadingZeroVal(mDecStockVal.toString()));
//                            }
////							}else{
//                            else
//                                spStockBean.setUnitPrice("0");
////							}

                            spStockBean.setUnitPrice(getMRP(Constants.CPStockItemSnos
                                    + "?$select=" + Constants.MRP + " &$filter=" + Constants.CPStockItemGUID + " eq guid'" + spStockBean.getCPStockItemGUID().toUpperCase()
                                    + "'   &$orderby=" + Constants.ManufacturingDate + "%20desc ") + "");

                            spStockBean.setCurrency(Constants.getCurrency());

                            property = properties.get(Constants.UnrestrictedQty);
                            if (property != null) {
                                BigDecimal mDecStockVal = (BigDecimal) property.getValue();
                                spStockBean.setUnrestrictedQty(UtilConstants.removeLeadingZeroVal(mDecStockVal.toString()));
                            } else {
                                spStockBean.setUnrestrictedQty("0");
                            }

                            spStockList.add(spStockBean);
                        }
                    } else {
                        throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                                + "but got " + response.getPayloadType().name());
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return spStockList;

    }

    public static String getInvListQryByCpGUID(String invListGry) throws
            OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invListGry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        focsBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.InvoiceNo);
                        focsBean.setValue((String) property.getValue());
                        focList.add(focsBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        String invNoURl = "", appendSpItemUrl = "";
        if (focList != null && focList.size() > 0) {
            for (int i = 0; i < focList.size(); i++) {
                if (i == 0 && i == focList.size() - 1) {
                    invNoURl = invNoURl
                            + "(InvoiceNo%20eq%20'"
                            + focList.get(i).getValue() + "')";

                } else if (i == 0) {
                    invNoURl = invNoURl
                            + "(InvoiceNo%20eq%20'"
                            + focList.get(i).getValue() + "'";

                } else if (i == focList.size() - 1) {
                    invNoURl = invNoURl
                            + "%20or%20InvoiceNo%20eq%20'"
                            + focList.get(i).getValue() + "')";
                } else {
                    invNoURl = invNoURl
                            + "%20or%20InvoiceNo%20eq%20'"
                            + focList.get(i).getValue() + "'";
                }
            }
            appendSpItemUrl = invNoURl;
        }


        return appendSpItemUrl;

    }

    public static String getLastPurchasesQty(String mStrInvListQry, String soldTOGUID, String
            matNo, Context context) throws OfflineODataStoreException {
        String lastPurQty = "0";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!mStrInvListQry.equalsIgnoreCase("")) {

                    String itmQry = Constants.SSInvoiceItemDetails + "?$filter=" + Constants.Material_No + " eq '" + matNo + "'" +
                            " and " + mStrInvListQry + " &$orderby=" + Constants.InvoiceNo + "%20desc";


                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(itmQry);
                    //Send a request to read the ChannelPartners from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.InvoiceHisQty);
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                lastPurQty = mStrQty.toString();
                            }
                            break;
                        }
                    } else {
                        throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                                + "but got " + response.getPayloadType().name());
                    }


                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }


        String deviceLastPurQty = UtilConstants.removeLeadingZeroVal(getDeviceLastInvQty(context, soldTOGUID, matNo));
        if (!deviceLastPurQty.equalsIgnoreCase("0")) {
            lastPurQty = deviceLastPurQty;
        }

        return lastPurQty;

    }

    @SuppressLint("NewApi")
    public static String getDeviceLastInvQty(Context context, String soldTOGUID, String
            materialNo) {

        String mStrLatPurQty = "0";
        ArrayList<InvoiceBean> invList = new ArrayList<>();
        InvoiceBean invoiceBean;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet("InvList", null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString("EntityType").equalsIgnoreCase("SSInvoice")
                                && fetchJsonHeaderObject.getString(Constants.SoldToCPGUID).equalsIgnoreCase(soldTOGUID)) {

                            String itemsString = fetchJsonHeaderObject.getString("ITEMS");

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                if (materialNo.equalsIgnoreCase(singleRow.get("MatCode"))) {
                                    invoiceBean = new InvoiceBean();

                                    invoiceBean.setInvoiceNo(fetchJsonHeaderObject.getString(Constants.InvoiceNo));
                                    invoiceBean.setInvQty(singleRow.get("Qty"));
                                    invList.add(invoiceBean);
                                }

                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

        if (invList != null && invList.size() > 0) {


            Collections.sort(invList, new Comparator<InvoiceBean>() {
                public int compare(InvoiceBean one, InvoiceBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

            mStrLatPurQty = invList.get(0).getInvQty();
        }

        return mStrLatPurQty;
    }

    /*Creates entity for deletion of sp stock serial number after creation of invoice and schedule it*/
    public static void deleteSpStockSNos(InvoiceBean serialNoInvoiceBean, String itemGuid) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = deleteSpStockSnosEntity(serialNoInvoiceBean, itemGuid);

            offlineStore.executeDeleteEntity(newEntity, null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates entity for deletion of sp stock serial number after creation of invoice and returns*/
    private static ODataEntity deleteSpStockSnosEntity(InvoiceBean invBean, String itemGuid) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (invBean != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.SPStockSNosEntity);

                newEntity.getProperties().put(Constants.SPSNoGUID,
                        new ODataPropertyDefaultImpl(Constants.SPSNoGUID, ODataGuidDefaultImpl.initWithString32(invBean.getSPSNoGUID())));

                newEntity.getProperties().put(Constants.SPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.SPStockItemGUID, ODataGuidDefaultImpl.initWithString32(itemGuid)));
                newEntity.getProperties().put(Constants.SerialNoFrom,
                        new ODataPropertyDefaultImpl(Constants.SerialNoFrom, invBean.getSerialNoFrom()));
                newEntity.getProperties().put(Constants.SerialNoTo,
                        new ODataPropertyDefaultImpl(Constants.SerialNoTo, invBean.getSerialNoTo()));
                newEntity.getProperties().put(Constants.Option,
                        new ODataPropertyDefaultImpl(Constants.Option, invBean.getOption()));
                newEntity.getProperties().put(Constants.PrefixLength,
                        new ODataPropertyDefaultImpl(Constants.PrefixLength, invBean.getPrefixLength()));

                newEntity.getProperties().put(Constants.InvoiceStatus,
                        new ODataPropertyDefaultImpl(Constants.InvoiceStatus, "01"));

                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, invBean.getUom()));


                String resourcePath = Constants.SPStockItemSNos + "(guid'" + invBean.getSPSNoGUID() + "')";

                newEntity.setResourcePath(resourcePath, resourcePath);

                if (!invBean.getEtag().equalsIgnoreCase("")) {
                    newEntity.setEtag(invBean.getEtag());
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates Entity for sp stock serial number and store in offline store*/
    public static void createSpStockSNos(InvoiceBean serialNoInvoiceBean, String itemGuid) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createSpStockSnosEntity(serialNoInvoiceBean, itemGuid);

            offlineStore.executeCreateEntity(newEntity, Constants.SPStockItemSNos, null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates entity for creation of sales person  stock serial numbers and returns*/
    private static ODataEntity createSpStockSnosEntity(InvoiceBean invBean, String itemGuid) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (invBean != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.SPStockSNosEntity);

                newEntity.getProperties().put(Constants.SPSNoGUID,
                        new ODataPropertyDefaultImpl(Constants.SPSNoGUID, ODataGuidDefaultImpl.initWithString32(invBean.getSPSNoGUID())));

                newEntity.getProperties().put(Constants.SPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.SPStockItemGUID, ODataGuidDefaultImpl.initWithString32(itemGuid)));
                newEntity.getProperties().put(Constants.SerialNoFrom,
                        new ODataPropertyDefaultImpl(Constants.SerialNoFrom, invBean.getSerialNoFrom()));
                newEntity.getProperties().put(Constants.SerialNoTo,
                        new ODataPropertyDefaultImpl(Constants.SerialNoTo, invBean.getSerialNoTo()));
                newEntity.getProperties().put(Constants.Option,
                        new ODataPropertyDefaultImpl(Constants.Option, invBean.getOption()));
                newEntity.getProperties().put(Constants.PrefixLength,
                        new ODataPropertyDefaultImpl(Constants.PrefixLength, invBean.getPrefixLength()));
                newEntity.getProperties().put(Constants.InvoiceStatus,
                        new ODataPropertyDefaultImpl(Constants.InvoiceStatus, invBean.getStatus()));

                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, invBean.getUom()));

                newEntity.getProperties().put(Constants.StockTypeID,
                        new ODataPropertyDefaultImpl(Constants.StockTypeID, invBean.getStockTypeID()));


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Returns Sales person stock invoice serial number based on query*/
    public static ArrayList<InvoiceBean> getSPStockInvoiceSerialNo(String spSerialNoQry, String
            mStrType, String mStrSPStockItemGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> invoiceList = new ArrayList<InvoiceBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            InvoiceBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(spSerialNoQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        invoiceBean = new InvoiceBean();
                        properties = entity.getProperties();


                        String spItemGuid = "";
                        property = properties.get(Constants.SPStockItemGUID);
                        try {
                            ODataGuid mSPSNoGUID = (ODataGuid) property.getValue();
                            spItemGuid = mSPSNoGUID.guidAsString36();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Option);
                        String optionValue = (String) property.getValue();

                        if (spItemGuid.equalsIgnoreCase(mStrSPStockItemGUID.toUpperCase()) /*&& !optionValue.equalsIgnoreCase("")*/) {


                            property = properties.get(Constants.SerialNoFrom);
                            invoiceBean.setSerialNoFrom((String) property.getValue());
                            invoiceBean.setSelectedSerialNoFrom((String) property.getValue());

                            if (mStrType.equalsIgnoreCase("BT")) {
                                property = properties.get(Constants.SerialNoTo);
                                invoiceBean.setSerialNoTo((String) property.getValue());
                                invoiceBean.setSelectedSerialNoTo((String) property.getValue());
                            }

                            property = properties.get(Constants.SPSNoGUID);
                            try {
                                ODataGuid mSPSNoGUID = (ODataGuid) property.getValue();
                                invoiceBean.setSPSNoGUID(mSPSNoGUID.guidAsString36());
                                invoiceBean.setOldSPSNoGUID(mSPSNoGUID.guidAsString36());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            property = properties.get(Constants.Option);
                            invoiceBean.setOption((String) property.getValue());
                            property = properties.get(Constants.PrefixLength);
                            invoiceBean.setPrefixLength((String) property.getValue());
                            invoiceBean.setCPStockItemGUID(spItemGuid);
                            invoiceBean.setEtag(entity.getEtag() != null ? entity.getEtag() : "");

                            property = properties.get(Constants.UOM);
                            invoiceBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");

                            property = properties.get(Constants.StockTypeID);
                            invoiceBean.setStockTypeID((String) property.getValue() != null ? (String) property.getValue() : "");
                            invoiceList.add(invoiceBean);
                        }

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return invoiceList;

    }

    /*Returns serial numbers for sales person stock based on query*/
    public static ArrayList<MyStockBean> getMyStockSerialNo(String spSerialNoQry, String
            mStrType) throws OfflineODataStoreException {

        ArrayList<MyStockBean> myStockList = new ArrayList<MyStockBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            MyStockBean myStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(spSerialNoQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        myStockBean = new MyStockBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.SerialNoFrom);
                        myStockBean.setSerialNoFrom(((String) property.getValue()));

                        if (mStrType.equalsIgnoreCase("BT")) {
                            property = properties.get(Constants.SerialNoTo);
                            myStockBean.setSerialNoTo(((String) property.getValue()));
                        }

                        property = properties.get(Constants.PrefixLength);
                        myStockBean.setPrefixLen(((String) property.getValue()));

                        property = properties.get(Constants.SPSNoGUID);
                        try {
                            ODataGuid mSPSNoGUID = (ODataGuid) property.getValue();
                            myStockBean.setSPSNoGUID(mSPSNoGUID.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        myStockList.add(myStockBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return myStockList;

    }

    /*Returns Serial numbers for retailer stock based on query*/
    public static ArrayList<RetailerStockBean> getRetailerStockSerialNo(String
                                                                                cpSerialNoQry, String mStrType) throws OfflineODataStoreException {

        ArrayList<RetailerStockBean> retailerStockList = new ArrayList<RetailerStockBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            RetailerStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(cpSerialNoQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        retailerStockBean = new RetailerStockBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.SerialNoFrom);
                        retailerStockBean.setSerialNoFrom((String) property.getValue());

                        if (mStrType.equalsIgnoreCase("BT")) {
                            property = properties.get(Constants.SerialNoTo);
                            retailerStockBean.setSerialNoTo((String) property.getValue());
                        }

                        retailerStockList.add(retailerStockBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    /*Returns retailer number based on query*/
    public static String getRetailerNo(String retailerQry) throws OfflineODataStoreException {
        String mStrCPno = "0";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        mStrCPno = (String) property.getValue();
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrCPno;

    }

    /*Creates entity to create new retailer an store it in offline store*/
    public static void createRetailerMaster
    (Hashtable<String, String> table, ArrayList<Hashtable> alCPDMS, UIListener uiListener) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
//            ODataEntity retailerCreateEntity = createRetailerMasterEntity(table,cpDMSDIVTable);
            ODataRequestParamBatch oDataRequestParamBatch = createRetailerMasterEntity(table, alCPDMS);
            //Send the request to create the new master in the local database
//            offlineStore.scheduleCreateEntity(retailerCreateEntity, Constants.ChannelPartners,
//                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ChannelPartners),
//                    null);

            offlineStore.scheduleRequest(oDataRequestParamBatch, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ChannelPartners));
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates update retailer entity and store it on offline store*/
    public static void updateRetailerMaster(Hashtable<String, String> table, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity retailerUpdateEntity = updateRetailerMasterEntity(table);
            //Send the request to create the new master in the local database
            offlineStore.scheduleUpdateEntity(retailerUpdateEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.ChannelPartners), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates entity to create new retailer and returns*/
    private static ODataRequestParamBatch createRetailerMasterEntity
    (Hashtable<String, String> hashtable, ArrayList<Hashtable> alCPDMS) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
//                newEntity.setResourcePath(Constants.ChannelPartners,Constants.ChannelPartners);
                newEntity.setResourcePath(Constants.ChannelPartners + "(guid'" + hashtable.get(Constants.CPGUID).toUpperCase() + "')", Constants.ChannelPartners + "(guid'" + hashtable.get(Constants.CPGUID).toUpperCase() + "')");
                offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                offlineStore.allocateNavigationProperties(newEntity);

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID).toUpperCase())));
                newEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                newEntity.getProperties().put(Constants.Country,
                        new ODataPropertyDefaultImpl(Constants.Country, hashtable.get(Constants.Country)));
                newEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                newEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                newEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                newEntity.getProperties().put(Constants.StateDesc,
                        new ODataPropertyDefaultImpl(Constants.StateDesc, hashtable.get(Constants.StateDesc)));
                newEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                newEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                newEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                newEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                newEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                newEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                newEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                newEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                newEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                newEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                newEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                newEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                newEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                newEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                newEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                newEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                newEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                newEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                newEntity.getProperties().put(Constants.PartnerMgrGUID,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID).toUpperCase())));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashtable.get(Constants.CPTypeDesc)));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
//        return newEntity;

        ODataRequestParamSingle batchHeader = new ODataRequestParamSingleDefaultImpl();
        // Create change set
        ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
        batchHeader.setResourcePath(Constants.ChannelPartners);
        batchHeader.setMode(Mode.Create);
        batchHeader.setContentID("10");
        batchHeader.setPayload(newEntity);

        Map<String, String> createHeaders = new HashMap<String, String>();

        createHeaders.put("accept", "application/atom+xml");

        createHeaders.put("content-type", "application/atom+xml");

        batchHeader.setOptions(createHeaders);

        try {
            changeSetItem.add(batchHeader);
        } catch (ODataException e) {
            e.printStackTrace();
        }
        ODataEntity cpdmsEntity = null;
        try {
            if (alCPDMS != null) {

                for (Hashtable cpDMSVal : alCPDMS) {
                    ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
                    cpdmsEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);
                    cpdmsEntity.setResourcePath(Constants.CPDMSDivisions + "(guid'" + cpDMSVal.get(Constants.CP1GUID).toString().toUpperCase() + "')", Constants.CPDMSDivisions + "(guid'" + cpDMSVal.get(Constants.CP1GUID).toString().toUpperCase() + "')");
                    offlineStore.allocateProperties(cpdmsEntity, ODataStore.PropMode.Keys);

                    cpdmsEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID).toUpperCase())));
                    cpdmsEntity.getProperties().put(Constants.CP1GUID,
                            new ODataPropertyDefaultImpl(Constants.CP1GUID, ODataGuidDefaultImpl.initWithString32(cpDMSVal.get(Constants.CP1GUID).toString().toUpperCase())));
                    cpdmsEntity.getProperties().put(Constants.ParentID,
                            new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                    cpdmsEntity.getProperties().put(Constants.ParentName,
                            new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                    cpdmsEntity.getProperties().put(Constants.ParentTypeID,
                            new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                    cpdmsEntity.getProperties().put(Constants.DMSDivision,
                            new ODataPropertyDefaultImpl(Constants.DMSDivision, cpDMSVal.get(Constants.DMSDivision)));
                    cpdmsEntity.getProperties().put(Constants.SalesPersonMobileNo,
                            new ODataPropertyDefaultImpl(Constants.SalesPersonMobileNo, hashtable.get(Constants.MobileNo)));
                    cpdmsEntity.getProperties().put(Constants.CPTypeID,
                            new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                    cpdmsEntity.getProperties().put(Constants.CPTypeDesc,
                            new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashtable.get(Constants.CPTypeDesc)));
                    cpdmsEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID).toUpperCase())));
                    cpdmsEntity.getProperties().put(Constants.Group2,
                            new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));


//                    ODataRequestParamSingle batchItems = new ODataRequestParamSingleDefaultImpl();
//                    batchItems.setResourcePath("$"+Constants.ChannelPartners+"(guid'"+hashtable.get(Constants.CPGUID).toUpperCase()+"')/"+Constants.CPDMSDivisions+"");
                    batchItem.setResourcePath("$10/" + Constants.CPDMSDivisions + "");
                    batchItem.setMode(Mode.Create);
                    batchItem.setPayload(cpdmsEntity);
                    batchItem.setOptions(createHeaders);

//                    changeSetItemVal.add(batchItems);
                    try {
                        changeSetItem.add(batchItem);
                    } catch (ODataException e) {
                        e.printStackTrace();
                    }
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        ODataRequestParamBatch requestParamBatch = null;
        try {
            requestParamBatch = new ODataRequestParamBatchDefaultImpl();
            requestParamBatch.add(changeSetItem);
        } catch (ODataException e) {
            e.printStackTrace();
        }

        return requestParamBatch;
    }

    /*Creates entity for updation of retailer and returns*/
    private static ODataEntity updateRetailerMasterEntity
    (Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        ODataEntity retailerEntity;

        ODataPropMap oDataProperties;
        ODataProperty oDataProperty;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                newEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                newEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                newEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                newEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                newEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                newEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                newEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                newEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                newEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                newEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                newEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
//				newEntity.getProperties().put(Constants.TIN,
//						new ODataPropertyDefaultImpl(Constants.TIN, hashtable.get(Constants.TIN)));

                newEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                newEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                newEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));

                newEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));


                newEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));

                newEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));

                if (!hashtable.get(Constants.CPNo).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.CPNo,
                            new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                }

                if (!hashtable.get(Constants.Group2).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.Group2,
                            new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                }

                newEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));

/*
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/


                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.PartnerMgrGUID,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                try {
                    retailerEntity = OfflineManager.getRetDetails(hashtable.get("Query"));
                    ;

                    oDataProperties = retailerEntity.getProperties();

                    newEntity.getProperties().put(Constants.AccountGrp,
                            new ODataPropertyDefaultImpl(Constants.AccountGrp, oDataProperties.get(Constants.AccountGrp).getValue()));

                    newEntity.getProperties().put(Constants.Address2,
                            new ODataPropertyDefaultImpl(Constants.Address2, oDataProperties.get(Constants.Address2).getValue()));

                    newEntity.getProperties().put(Constants.Address3,
                            new ODataPropertyDefaultImpl(Constants.Address3, oDataProperties.get(Constants.Address3).getValue()));

                    newEntity.getProperties().put(Constants.Address4,
                            new ODataPropertyDefaultImpl(Constants.Address4, oDataProperties.get(Constants.Address4).getValue()));

                    newEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, oDataProperties.get(Constants.Anniversary).getValue()));

                    newEntity.getProperties().put(Constants.ApprovedAt,
                            new ODataPropertyDefaultImpl(Constants.ApprovedAt, oDataProperties.get(Constants.ApprovedAt).getValue()));

                    newEntity.getProperties().put(Constants.ApprovedBy,
                            new ODataPropertyDefaultImpl(Constants.ApprovedBy, oDataProperties.get(Constants.ApprovedBy).getValue()));

                    newEntity.getProperties().put(Constants.ApprovedOn,
                            new ODataPropertyDefaultImpl(Constants.ApprovedOn, oDataProperties.get(Constants.ApprovedOn).getValue()));

//					newEntity.getProperties().put(Constants.ApprvlStatusDesc,
//							new ODataPropertyDefaultImpl(Constants.ApprvlStatusDesc, oDataProperties.get(Constants.ApprvlStatusDesc).getValue()));
//
//					newEntity.getProperties().put(Constants.ApprvlStatusID,
//							new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, oDataProperties.get(Constants.ApprvlStatusID).getValue()));

                    newEntity.getProperties().put(Constants.ChangedAt,
                            new ODataPropertyDefaultImpl(Constants.ChangedAt, oDataProperties.get(Constants.ChangedAt).getValue()));

                    newEntity.getProperties().put(Constants.ChangedBy,
                            new ODataPropertyDefaultImpl(Constants.ChangedBy, oDataProperties.get(Constants.ChangedBy).getValue()));

                    newEntity.getProperties().put(Constants.ChangedOn,
                            new ODataPropertyDefaultImpl(Constants.ChangedOn, oDataProperties.get(Constants.ChangedOn).getValue()));

                    newEntity.getProperties().put(Constants.Country,
                            new ODataPropertyDefaultImpl(Constants.Country, oDataProperties.get(Constants.Country).getValue()));

                    newEntity.getProperties().put(Constants.CountryName,
                            new ODataPropertyDefaultImpl(Constants.CountryName, oDataProperties.get(Constants.CountryName).getValue()));

                    newEntity.getProperties().put(Constants.CPStock,
                            new ODataPropertyDefaultImpl(Constants.CPStock, oDataProperties.get(Constants.CPStock).getValue()));

                    newEntity.getProperties().put(Constants.CPTypeDesc,
                            new ODataPropertyDefaultImpl(Constants.CPTypeDesc, oDataProperties.get(Constants.CPTypeDesc).getValue()));

                    newEntity.getProperties().put(Constants.CreatedAt, new ODataPropertyDefaultImpl(Constants.CreatedAt, oDataProperties.get(Constants.CreatedAt).getValue()));
                    newEntity.getProperties().put(Constants.CreatedBy, new ODataPropertyDefaultImpl(Constants.CreatedBy, oDataProperties.get(Constants.CreatedBy).getValue()));
                    newEntity.getProperties().put(Constants.CreatedOn, new ODataPropertyDefaultImpl(Constants.CreatedOn, oDataProperties.get(Constants.CreatedOn).getValue()));
                    newEntity.getProperties().put(Constants.CreditDays, new ODataPropertyDefaultImpl(Constants.CreditDays, oDataProperties.get(Constants.CreditDays).getValue()));
                    newEntity.getProperties().put(Constants.CreditLimit, new ODataPropertyDefaultImpl(Constants.CreditLimit, oDataProperties.get(Constants.CreditLimit).getValue()));
                    newEntity.getProperties().put(Constants.Currency, new ODataPropertyDefaultImpl(Constants.Currency, oDataProperties.get(Constants.Currency).getValue()));
                    newEntity.getProperties().put(Constants.Group1Desc, new ODataPropertyDefaultImpl(Constants.Group1Desc, oDataProperties.get(Constants.Group1Desc).getValue()));
                    newEntity.getProperties().put(Constants.Group2Desc, new ODataPropertyDefaultImpl(Constants.Group2Desc, oDataProperties.get(Constants.Group2Desc).getValue()));
                    newEntity.getProperties().put(Constants.Group3, new ODataPropertyDefaultImpl(Constants.Group3, oDataProperties.get(Constants.Group3).getValue()));
                    newEntity.getProperties().put(Constants.Group3Desc, new ODataPropertyDefaultImpl(Constants.Group3Desc, oDataProperties.get(Constants.Group3Desc).getValue()));
                    newEntity.getProperties().put(Constants.Group4, new ODataPropertyDefaultImpl(Constants.Group4, oDataProperties.get(Constants.Group4).getValue()));

                    newEntity.getProperties().put(Constants.Group4Desc, new ODataPropertyDefaultImpl(Constants.Group4Desc, oDataProperties.get(Constants.Group4Desc).getValue()));
                    newEntity.getProperties().put(Constants.IsKeyCP, new ODataPropertyDefaultImpl(Constants.IsKeyCP, oDataProperties.get(Constants.IsKeyCP).getValue()));
                    newEntity.getProperties().put(Constants.Landline, new ODataPropertyDefaultImpl(Constants.Landline, oDataProperties.get(Constants.Landline).getValue()));
                    newEntity.getProperties().put(Constants.Mobile2, new ODataPropertyDefaultImpl(Constants.Mobile2, oDataProperties.get(Constants.Mobile2).getValue()));
                    newEntity.getProperties().put(Constants.ParentName, new ODataPropertyDefaultImpl(Constants.ParentName, oDataProperties.get(Constants.ParentName).getValue()));
                    newEntity.getProperties().put(Constants.ParentTypDesc, new ODataPropertyDefaultImpl(Constants.ParentTypDesc, oDataProperties.get(Constants.ParentTypDesc).getValue()));
                    newEntity.getProperties().put(Constants.ParentTypeID, new ODataPropertyDefaultImpl(Constants.ParentTypeID, oDataProperties.get(Constants.ParentTypeID).getValue()));
                    newEntity.getProperties().put(Constants.PartnerMgrName, new ODataPropertyDefaultImpl(Constants.PartnerMgrName, oDataProperties.get(Constants.PartnerMgrName).getValue()));
                    newEntity.getProperties().put(Constants.PartnerMgrNo, new ODataPropertyDefaultImpl(Constants.PartnerMgrNo, oDataProperties.get(Constants.PartnerMgrNo).getValue()));
                    newEntity.getProperties().put(Constants.RouteDesc, new ODataPropertyDefaultImpl(Constants.RouteDesc, oDataProperties.get(Constants.RouteDesc).getValue()));
                    newEntity.getProperties().put(Constants.RouteID, new ODataPropertyDefaultImpl(Constants.RouteID, oDataProperties.get(Constants.RouteID).getValue()));

                    newEntity.getProperties().put(Constants.SalesGroupID, new ODataPropertyDefaultImpl(Constants.SalesGroupID, oDataProperties.get(Constants.SalesGroupID).getValue()));
                    newEntity.getProperties().put(Constants.SalesGrpDesc, new ODataPropertyDefaultImpl(Constants.SalesGrpDesc, oDataProperties.get(Constants.SalesGrpDesc).getValue()));
                    newEntity.getProperties().put(Constants.SalesOffDesc, new ODataPropertyDefaultImpl(Constants.SalesOffDesc, oDataProperties.get(Constants.SalesOffDesc).getValue()));
                    newEntity.getProperties().put(Constants.SalesOfficeID, new ODataPropertyDefaultImpl(Constants.SalesOfficeID, oDataProperties.get(Constants.SalesOfficeID).getValue()));
                    newEntity.getProperties().put(Constants.SearchTerm, new ODataPropertyDefaultImpl(Constants.SearchTerm, oDataProperties.get(Constants.SearchTerm).getValue()));
                    newEntity.getProperties().put(Constants.StateDesc, new ODataPropertyDefaultImpl(Constants.StateDesc, oDataProperties.get(Constants.StateDesc).getValue()));
                    newEntity.getProperties().put(Constants.StatusDesc, new ODataPropertyDefaultImpl(Constants.StatusDesc, oDataProperties.get(Constants.StatusDesc).getValue()));
                    newEntity.getProperties().put(Constants.StatusID, new ODataPropertyDefaultImpl(Constants.StatusID, oDataProperties.get(Constants.StatusID).getValue()));
                    newEntity.getProperties().put(Constants.TestRun, new ODataPropertyDefaultImpl(Constants.TestRun, oDataProperties.get(Constants.TestRun).getValue()));
                    newEntity.getProperties().put(Constants.TownDesc, new ODataPropertyDefaultImpl(Constants.TownDesc, oDataProperties.get(Constants.TownDesc).getValue()));
                    newEntity.getProperties().put(Constants.TownID, new ODataPropertyDefaultImpl(Constants.TownID, oDataProperties.get(Constants.TownID).getValue()));
                    newEntity.getProperties().put(Constants.UOM, new ODataPropertyDefaultImpl(Constants.UOM, oDataProperties.get(Constants.UOM).getValue()));
                    newEntity.getProperties().put(Constants.ZoneDesc, new ODataPropertyDefaultImpl(Constants.ZoneDesc, oDataProperties.get(Constants.ZoneDesc).getValue()));
                    newEntity.getProperties().put(Constants.ZoneID, new ODataPropertyDefaultImpl(Constants.ZoneID, oDataProperties.get(Constants.ZoneID).getValue()));

                    newEntity.getProperties().put(Constants.ApprvlStatusID, new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, oDataProperties.get(Constants.ApprvlStatusID).getValue()));

                } catch (OfflineODataStoreException e) {
                    LogManager.writeLogError(Constants.strErrorWithColon + e.getMessage());
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;
    }

    /*Returns list of Behavior of customers*//*
	public static List<CustomerBean> getBehavoiurList(String retListQry) throws OfflineODataStoreException{

		ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
		//Check if the offline oData store is initialized
		if (offlineStore!=null){
			CustomerBean retBean;
			ODataProperty property;
			ODataPropMap properties;
			try {
				//Define the resource path

				ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
				request.setMode(Mode.Read);
				request.setResourcePath(retListQry);
				//Send a request to read the ChannelPartners from the local database
				ODataResponseSingle response = (ODataResponseSingle) offlineStore.
						executeRequest(request);
				//Check if the response is an error
				if (response.getPayloadType() == ODataPayload.Type.Error) {
					ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
							response.getPayload();
					throw new OfflineODataStoreException(error.getMessage());
					//Check if the response contains EntitySet
				}else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
					ODataEntitySet feed = (ODataEntitySet) response.getPayload();
					List<ODataEntity> entities = feed.getEntities();
					//Retrieve the data from the response
					for (ODataEntity entity: entities){
						properties = entity.getProperties();
						property = properties.get(Constants.CPNo);
						retBean = new CustomerBean((String)property.getValue());
						property = properties.get(Constants.CPName);
						retBean.setRetailerName((String) property.getValue());

						property = properties.get(Constants.Address1);
						retBean.setAddress1((String) property.getValue());
						property = properties.get(Constants.Address2);
						retBean.setAddress2((String) property.getValue());
						property = properties.get(Constants.Address3);
						retBean.setAddress3((String) property.getValue());
						property = properties.get(Constants.TownDesc);
						retBean.setTownDesc((String) property.getValue());
						property = properties.get(Constants.CPMobileNo);
						retBean.setMobileNumber((String) property.getValue());
						retailerList.add(retBean);
					}
				} else {
					throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
							+ response.getPayloadType().name());
				}
			} catch (Exception e) {
				throw new OfflineODataStoreException(e);
			}
		}
		return retailerList;

	}*/

    /*Returns list of retailers from device(Which is local to db)*/
    public static List<CustomerBean> getDeviceRetailerList(String retListQry) throws
            OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());
                        property = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());
                        property = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) property.getValue());
                        property = properties.get(Constants.CPGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID("guid'" + mCpGuid.guidAsString36() + "'");
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString36() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        retBean.setEtag(entity.getEtag());
                        retBean.setSetResourcePath(entity.getResourcePath());
                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static void deleteRetailer(String resourcePath, String etag) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            offlineStore.scheduleDeleteEntity(resourcePath,
                    etag, new OfflineRequestListener(Operation.Create.getValue(), Constants.ChannelPartners), null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }

    }

    public static ArrayList<CustomerBean> getBehavoiurList(String retListQry) throws
            OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());
                        property = properties.get(Constants.CPName);
                        retBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.CPNo);
                        retBean.setUID((String) property.getValue());


                        retBean.setMtdValue(getTotalSumByCondition("" + Constants.SSInvoices +
                                "?$select=" + Constants.NetAmount + " &$filter=" + Constants.InvoiceDate + " ge datetime'"
                                + Constants.getFirstDateOfCurrentMonth() + "' and " + Constants.SoldToID + " eq '" + (String) property.getValue() + "' ", Constants.NetAmount));

                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        /*if (retailerList != null && retailerList.size() > 0) {
            Collections.sort(retailerList, new Comparator<CustomerBean>() {
                public int compare(CustomerBean one, CustomerBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getMtdValue());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getMtdValue());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getMtdValue().compareTo(one.getMtdValue());
                    }
                }
            });
        }*/
        return retailerList;

    }

    /*Returns List of helpline data from offline store based on query*/
    public static ArrayList<HelpLineBean> getHelpLineList(String helpLineQry) throws
            OfflineODataStoreException {

        ArrayList<HelpLineBean> helpLineList = new ArrayList<HelpLineBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            HelpLineBean helpLineBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

//				String resourcePath = Constants.ChannelPartners+"?$filter="+Constants.ParentID+" eq '"+distCode+"'" ;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(helpLineQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        helpLineBean = new HelpLineBean();
                        property = properties.get(Constants.TextCategoryID);
                        helpLineBean.setTextCategoryID((String) property.getValue());
                        property = properties.get(Constants.TextCategoryTypeID);
                        helpLineBean.setTextCategoryTypeID((String) property.getValue());
                        property = properties.get(Constants.TextCategoryDesc);
                        helpLineBean.setTextCategoryDesc((String) property.getValue());
                        property = properties.get(Constants.TextCategoryTypeDesc);
                        helpLineBean.setTextCategoryTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Text);
                        helpLineBean.setText((String) property.getValue());
                        helpLineList.add(helpLineBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return helpLineList;

    }

    /*List of stock for retailer based on query*/
    public static ArrayList<MyStockBean> getMyStockList(String myStockQry, Context
            context, String cpGuid) throws OfflineODataStoreException {

        ArrayList<MyStockBean> myStockList = new ArrayList<MyStockBean>();

        ArrayList<MyStockBean> alDevStock = Constants.getDevStock(context, cpGuid);


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyStockBean myStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(myStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        double simStockVal = 0.0, rcvStockVal = 0.0;

                        properties = entity.getProperties();

                        myStockBean = new MyStockBean();
                        property = properties.get(Constants.SPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            myStockBean.setSPStockItemGUID(mSpItemGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.UOM);
                        myStockBean.setUOM((String) property.getValue());

                        Constants.SIMStockUOM = (String) property.getValue();

                        property = properties.get(Constants.Currency);
                        myStockBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.Material_No);
                        String materialNo = (String) property.getValue();
                        myStockBean.setMaterialNo(materialNo);
                        String mStrDevStock = "0", mStrDevStockValue = "0";
                        double mdoutotQty = 0.0, mDouUnResQty = 0.0;
                        if (alDevStock != null && alDevStock.size() > 0) {
                            for (int i = 0; i < alDevStock.size(); i++) {
                                if (materialNo.equalsIgnoreCase(alDevStock.get(i).getMaterialNo())) {
                                    mDouUnResQty = 0.0;
                                    try {
                                        mDouUnResQty = Double.parseDouble(alDevStock.get(i).getUnrestrictedQty());
                                    } catch (NumberFormatException e) {
                                        mDouUnResQty = 0.0;
                                        e.printStackTrace();
                                    }
                                    mdoutotQty = mdoutotQty + mDouUnResQty;
//									mStrDevStock = alDevStock.get(i).getUnrestrictedQty();
//									mStrDevStockValue= alDevStock.get(i).getStockValue();
//									break;
                                }
                            }
                        }


                        property = properties.get(Constants.Material_Desc);
                        myStockBean.setMaterialDesc((String) property.getValue());

                        //TODO ID4 comment below code .
//						property = properties.get(Constants.Zzindicator);
//						String zIndicatorVal = (String) property.getValue();

//						if(zIndicatorVal==null){
//							zIndicatorVal = "";
//						}
                        property = properties.get(Constants.QAQty);
                        if (property != null) {
                            BigDecimal mStrQty = (BigDecimal) property.getValue();
                            myStockBean.setQAQty(mStrQty.toString());
                        }

                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            BigDecimal mStrQty = (BigDecimal) property.getValue();
                            double unresQty = 0;
                            try {
                                unresQty = Double.parseDouble(mStrQty.toString()) - Double.parseDouble(mdoutotQty + "");
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                            myStockBean.setUnrestrictedQty(unresQty + "");
                        }
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            BigDecimal mStrQty = (BigDecimal) property.getValue();
                            myStockBean.setBlockedQty(mStrQty.toString());
                            try {
                                rcvStockVal = mStrQty.doubleValue();
                            } catch (Exception e) {
                                rcvStockVal = 0.0;
                                e.printStackTrace();
                            }
                        }

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            myStockBean.setStockValue(mStrAmount.toString());
                            try {
                                simStockVal = mStrAmount.doubleValue();
                            } catch (Exception e) {
                                simStockVal = 0.0;
                                e.printStackTrace();
                            }
                        }

                        /*Need to discuss on this part of code*/

//						if(zIndicatorVal.equalsIgnoreCase("S")){
                        Constants.RCVStockValueDouble = Constants.RCVStockValueDouble + rcvStockVal - Double.parseDouble(mdoutotQty + "");
//						}else if(zIndicatorVal.equalsIgnoreCase("R")){
                        Constants.SIMStockValue = Constants.SIMStockValue + (simStockVal * rcvStockVal) - (simStockVal * mdoutotQty);
//						}

                        myStockList.add(myStockBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return myStockList;

    }

    /*Returns LIst of Performance of retailers based on query*/
    public static ArrayList<MyPerformanceBean> getMyPerfomnceList(String myPerfQry) throws
            OfflineODataStoreException {

        ArrayList<MyPerformanceBean> myPerfList = new ArrayList<MyPerformanceBean>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyPerformanceBean myPerfBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(myPerfQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        myPerfBean = new MyPerformanceBean();

                        property = properties.get(Constants.PerformanceOnID);
                        myPerfBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.PerformanceOnIDDesc);
                        myPerfBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.ReportOnID);
                        String mStrReportType = (String) property.getValue();
                        // TODO ReportOnID equal to  '02' display amount values other wise quantity values
                        if (mStrReportType.equalsIgnoreCase("02")) {
                            property = properties.get(Constants.AmtLMTD);
                            BigDecimal mAmtLmtdQty = null;
                            ;
                            if (property != null) {
                                mAmtLmtdQty = (BigDecimal) property.getValue();

                                myPerfBean.setAmtLMTD(UtilConstants.removeLeadingZeroVal(mAmtLmtdQty.toString()));
                            }

                            property = properties.get(Constants.AmtMTD);
                            BigDecimal mAmtMTD = null;
                            ;
                            if (property != null) {
                                mAmtMTD = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMTD(UtilConstants.removeLeadingZeroVal(mAmtMTD.toString()));
                            }

                            property = properties.get(Constants.AmtMonthlyGrowth);
                            BigDecimal mAmtGr = null;
                            ;
                            if (property != null) {
                                mAmtGr = (BigDecimal) property.getValue();
                                myPerfBean.setGrPer(UtilConstants.removeLeadingZeroVal(mAmtGr.toString()));
                            }

                            property = properties.get(Constants.AmtMonth1PrevPerf);
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth1PrevPerf(UtilConstants.removeLeadingZeroVal(mStrQty.toString()));
                            }

                            property = properties.get(Constants.AmtMonth2PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth2PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }

                            property = properties.get(Constants.AmtMonth3PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth3PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }
                        } else if (mStrReportType.equalsIgnoreCase("01")) {

                            property = properties.get(Constants.QtyLMTD);
                            BigDecimal mAmtLmtdQty = null;
                            if (property != null) {
                                mAmtLmtdQty = (BigDecimal) property.getValue();
                                myPerfBean.setAmtLMTD(UtilConstants.removeLeadingZeroVal(mAmtLmtdQty.toString()));
                            }

                            property = properties.get(Constants.QtyMTD);
                            BigDecimal mAmtMTD = null;
                            if (property != null) {
                                mAmtMTD = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMTD(UtilConstants.removeLeadingZeroVal(mAmtMTD.toString()));
                            }

                            property = properties.get(Constants.QtyMonthlyGrowth);
                            BigDecimal mAmtGr = null;
                            ;
                            if (property != null) {
                                mAmtGr = (BigDecimal) property.getValue();
                                myPerfBean.setGrPer(UtilConstants.removeLeadingZeroVal(mAmtGr.toString()));
                            }

                            property = properties.get(Constants.QtyMonth1PrevPerf);
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth1PrevPerf(UtilConstants.removeLeadingZeroVal(mStrQty.toString()));
                            }

                            property = properties.get(Constants.QtyMonth2PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth2PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }

                            property = properties.get(Constants.QtyMonth3PrevPerf);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                myPerfBean.setAmtMonth3PrevPerf(UtilConstants.removeLeadingZeroVal(mStrAmount.toString()));
                            }
                        }


                        myPerfList.add(myPerfBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return myPerfList;

    }

    /*Returns list of performances from offline store*/
    public static ArrayList<MyPerformanceBean> getMyPerfomnceListNew(String myPerfQry) throws
            OfflineODataStoreException {

        ArrayList<MyPerformanceBean> myPerfList = new ArrayList<MyPerformanceBean>();
        double mDoubleAmtLMTDVal = 0.0;
        double mDoubleAmtMTD = 0.0;
        Double mDoubleGRPer = 0.0;
        double mDoubleMonOne = 0.0;
        double mDoubleMonTwo = 0.0;
        double mDoubleMonThree = 0.0;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyPerformanceBean myPerfBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(myPerfQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    myPerfBean = new MyPerformanceBean();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        /*We may need this code*/

//						property = properties.get(Constants.PerformanceOnID);
//						myPerfBean.setMaterialNo((String) property.getValue());
//						property = properties.get(Constants.PerformanceOnIDDesc);
//						myPerfBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.ReportOnID);
                        String mStrReportType = (String) property.getValue();
                        // TODO ReportOnID equal to  '02' display amount values other wise quantity values
                        if (mStrReportType.equalsIgnoreCase("02")) {
                            property = properties.get(Constants.AmtLMTD);
                            BigDecimal mAmtLmtdQty = null;
                            ;
                            Double mDobAmountLmtd = 0.0;
                            if (property != null) {
                                mAmtLmtdQty = (BigDecimal) property.getValue();
                                mDobAmountLmtd = mAmtLmtdQty.doubleValue();

                            }

                            if (mDobAmountLmtd.isNaN() || mDobAmountLmtd.isInfinite()) {
                                mDobAmountLmtd = 0.0;
                            }

                            mDoubleAmtLMTDVal = mDoubleAmtLMTDVal + mDobAmountLmtd;

                            property = properties.get(Constants.AmtMTD);
                            BigDecimal mAmtMTD = null;
                            ;
                            Double mDobAmountMtd = 0.0;
                            if (property != null) {
                                mAmtMTD = (BigDecimal) property.getValue();
                                mDobAmountMtd = mAmtMTD.doubleValue();
                            }

                            if (mDobAmountMtd.isNaN() || mDobAmountMtd.isInfinite()) {
                                mDobAmountMtd = 0.0;
                            }

                            mDoubleAmtMTD = mDoubleAmtMTD + mDobAmountMtd;


                            property = properties.get(Constants.AmtMonthlyGrowth);
                            BigDecimal mAmtGr = null;
                            ;
                            Double mDobAmountGr = 0.0;
                            if (property != null) {
                                mAmtGr = (BigDecimal) property.getValue();
                                mDobAmountGr = mAmtGr.doubleValue();
                            }

                            if (mDobAmountGr.isNaN() || mDobAmountGr.isInfinite()) {
                                mDobAmountGr = 0.0;
                            }

                            mDoubleGRPer = mDoubleGRPer + mDobAmountGr;

                            property = properties.get(Constants.AmtMonth1PrevPerf);
                            Double mDobMonOne = 0.0;
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                mDobMonOne = mStrQty.doubleValue();
                            }

                            if (mDobMonOne.isNaN() || mDobMonOne.isInfinite()) {
                                mDobMonOne = 0.0;
                            }

                            mDoubleMonOne = mDoubleMonOne + mDobMonOne;

                            property = properties.get(Constants.AmtMonth2PrevPerf);
                            Double mDobMonTwo = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                mDobMonTwo = mStrAmount.doubleValue();
                            }

                            if (mDobMonTwo.isNaN() || mDobMonTwo.isInfinite()) {
                                mDobMonTwo = 0.0;
                            }

                            mDoubleMonTwo = mDoubleMonTwo + mDobMonTwo;

                            property = properties.get(Constants.AmtMonth3PrevPerf);
                            Double mDobMonThree = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                mDobMonThree = mStrAmount.doubleValue();
                            }

                            if (mDobMonThree.isNaN() || mDobMonThree.isInfinite()) {
                                mDobMonThree = 0.0;
                            }

                            mDoubleMonThree = mDoubleMonThree + mDobMonThree;

                        } else if (mStrReportType.equalsIgnoreCase("01")) {

                            property = properties.get(Constants.QtyLMTD);
                            BigDecimal mAmtLmtdQty = null;
                            Double mDobAmountLmtd = 0.0;
                            if (property != null) {
                                mAmtLmtdQty = (BigDecimal) property.getValue();
                                mDobAmountLmtd = mAmtLmtdQty.doubleValue();
                            }

                            if (mDobAmountLmtd.isNaN() || mDobAmountLmtd.isInfinite()) {
                                mDobAmountLmtd = 0.0;
                            }

                            mDoubleAmtLMTDVal = mDoubleAmtLMTDVal + mDobAmountLmtd;

                            property = properties.get(Constants.QtyMTD);
                            BigDecimal mAmtMTD = null;
                            Double mDobAmountMtd = 0.0;
                            if (property != null) {
                                mAmtMTD = (BigDecimal) property.getValue();
                                mDobAmountMtd = mAmtMTD.doubleValue();
                            }

                            if (mDobAmountMtd.isNaN() || mDobAmountMtd.isInfinite()) {
                                mDobAmountMtd = 0.0;
                            }

                            mDoubleAmtMTD = mDoubleAmtMTD + mDobAmountMtd;

                            property = properties.get(Constants.QtyMonthlyGrowth);
                            BigDecimal mAmtGr = null;
                            ;
                            Double mDobAmountGr = 0.0;
                            if (property != null) {
                                mAmtGr = (BigDecimal) property.getValue();
                                mDobAmountGr = mAmtGr.doubleValue();
                            }

                            if (mDobAmountGr.isNaN() || mDobAmountGr.isInfinite()) {
                                mDobAmountGr = 0.0;
                            }

                            mDoubleGRPer = mDoubleGRPer + mDobAmountGr;


                            property = properties.get(Constants.QtyMonth1PrevPerf);
                            Double mDobMonOne = 0.0;
                            if (property != null) {
                                BigDecimal mStrQty = (BigDecimal) property.getValue();
                                mDobMonOne = mStrQty.doubleValue();
                            }

                            if (mDobMonOne.isNaN() || mDobMonOne.isInfinite()) {
                                mDobMonOne = 0.0;
                            }

                            mDoubleMonOne = mDoubleMonOne + mDobMonOne;

                            property = properties.get(Constants.QtyMonth2PrevPerf);
                            Double mDobMonTwo = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                mDobMonTwo = mStrAmount.doubleValue();
                            }

                            if (mDobMonTwo.isNaN() || mDobMonTwo.isInfinite()) {
                                mDobMonTwo = 0.0;
                            }

                            mDoubleMonTwo = mDoubleMonTwo + mDobMonTwo;

                            property = properties.get(Constants.QtyMonth3PrevPerf);
                            Double mDobMonThree = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                mDobMonThree = mStrAmount.doubleValue();
                            }

                            if (mDobMonThree.isNaN() || mDobMonThree.isInfinite()) {
                                mDobMonThree = 0.0;
                            }

                            mDoubleMonThree = mDoubleMonThree + mDobMonThree;
                        }


                    }

                    myPerfBean.setAmtLMTD(UtilConstants.removeLeadingZeroVal(mDoubleAmtLMTDVal + ""));
                    myPerfBean.setAmtMTD(UtilConstants.removeLeadingZeroVal(mDoubleAmtMTD + ""));
                    myPerfBean.setAmtMonth1PrevPerf(UtilConstants.removeLeadingZeroVal(mDoubleMonOne + ""));
                    myPerfBean.setAmtMonth2PrevPerf(UtilConstants.removeLeadingZeroVal(mDoubleMonTwo + ""));
                    myPerfBean.setAmtMonth3PrevPerf(UtilConstants.removeLeadingZeroVal(mDoubleMonThree + ""));
                    myPerfBean.setGrPer(UtilConstants.removeLeadingZeroVal(mDoubleGRPer + ""));

                    myPerfList.add(myPerfBean);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return myPerfList;

    }

    /*Returns values for helpline from offline store based on query*/
    public static String getConfigValue(String heplLineQry) throws OfflineODataStoreException {
        String mStrHelpLineNo = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(heplLineQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.TypeValue);

                        mStrHelpLineNo = (String) property.getValue();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrHelpLineNo;

    }

    public static String getConfigValueDistancemm(String heplLineQry) throws OfflineODataStoreException {
        String distance = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(heplLineQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.TypeValue);

                        distance = (String) property.getValue();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distance;

    }


    public static String getconfigValuemustsell(String heplLineQry) throws OfflineODataStoreException {
        String mustselltype = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(heplLineQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.TypeValue);

                        mustselltype = (String) property.getValue();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mustselltype;

    }


    /*Returns KPI set guid for performance based on query*/
    public static String getKpiSetGuidPerfQuery(String focusedPrdQry) throws
            OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(focusedPrdQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        focsBean = new Config();
                        properties = entity.getProperties();

                        property = properties.get(Constants.KPIGUID);
                        try {
                            ODataGuid minvGuid = (ODataGuid) property.getValue();

                            focsBean.setValue("guid'" + minvGuid.guidAsString36().toUpperCase() + "'");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        focList.add(focsBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        String segMatURl = "", appendSpItemUrl = "";
        if (focList != null && focList.size() > 0) {
            for (int i = 0; i < focList.size(); i++) {
                if (i == 0 && i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "(KPIGUID%20eq%20"
                            + focList.get(i).getValue() + ")";

                } else if (i == 0) {
                    segMatURl = segMatURl
                            + "(KPIGUID%20eq%20"
                            + focList.get(i).getValue() + "";

                } else if (i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "%20or%20KPIGUID%20eq%20"
                            + focList.get(i).getValue() + ")";
                } else {
                    segMatURl = segMatURl
                            + "%20or%20KPIGUID%20eq%20"
                            + focList.get(i).getValue() + "";
                }
            }

            if (!segMatURl.equalsIgnoreCase("")) {
                appendSpItemUrl = Constants.Targets + "?$filter=" + segMatURl;
            }

        }


        return appendSpItemUrl;


    }

    /*Returns list of performance based on query from offline store*/
    public static ArrayList<MyTargetsBean> getMyPerfList(String myStockQry, String mStrSpGuid) throws
            OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<MyTargetsBean>();
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(myStockQry);
                //Send a request to read the Targets from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();

                        myTargetBean = new MyTargetsBean();

                        property = properties.get(Constants.TargetGUID);
                        ODataGuid mtargetGuid = null;
                        try {
                            mtargetGuid = (ODataGuid) property.getValue();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (getVisitStatusForCustomer("" + Constants.TargetItems +
                                "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mStrSpGuid.toUpperCase() + "' and " + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36().toUpperCase() + "' ")) {

                            property = properties.get(Constants.KPIGUID);
                            ODataGuid mKpiGuid = null;
                            try {
                                mKpiGuid = (ODataGuid) property.getValue();
                                myTargetBean.setKpiGuid(mKpiGuid.guidAsString36().toUpperCase());
                                myTargetBean.setKpiGuid32(mKpiGuid.guidAsString32().toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            try {
                                myTargetBean.setKPIName(getKPIName(Constants.KPISet + "?$filter=" + Constants.KPIGUID + " eq guid'" + mKpiGuid.guidAsString36() + "' "));
                            } catch (OfflineODataStoreException e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.KPICode);
                            String kpiCode = (String) property.getValue();
                            myTargetBean.setKPICode(kpiCode);

                            ArrayList<MyPerformanceBean> myPerfList = null;
                            try {
                                myPerfList = getMyPerfomnceListNew("" + Constants.Performances + " ?$filter=" + Constants.PerformanceOnID + " eq '" + kpiCode + "'");
                            } catch (OfflineODataStoreException e) {
                                e.printStackTrace();
                            }


                            try {
                                if (myPerfList != null && myPerfList.size() > 0) {
                                    myTargetBean.setAmtLMTD(myPerfList.get(0).getAmtLMTD());
                                    myTargetBean.setAmtMTD(myPerfList.get(0).getAmtMTD());
                                    myTargetBean.setGrPer(myPerfList.get(0).getGrPer());
                                    myTargetBean.setAmtMonth1PrevPerf(myPerfList.get(0).getAmtMonth1PrevPerf());
                                    myTargetBean.setAmtMonth2PrevPerf(myPerfList.get(0).getAmtMonth2PrevPerf());
                                    myTargetBean.setAmtMonth3PrevPerf(myPerfList.get(0).getAmtMonth3PrevPerf());

                                }
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }


//							myTargetList.add(myTargetBean);


                            if (myTargetList != null && myTargetList.size() > 0) {
                                double mDouLMTD = 0.0;
                                double mDougetAmtMTD = 0.0;

                                double mDouGrPer = 0.0;
                                double mDouMonOne = 0.0;
                                double mDouMonTwo = 0.0;
                                double mDouMonthree = 0.0;
                                int i;
                                for (i = 0; i < myTargetList.size(); i++) {
                                    if (kpiCode.equalsIgnoreCase(myTargetList.get(i).getKPICode())) {
										/*try {
											mDouLMTD = Double.parseDouble(myTargetList.get(i).getAmtLMTD()) + Double.parseDouble(myTargetBean.getAmtLMTD());
											mDougetAmtMTD = Double.parseDouble(myTargetList.get(i).getAmtMTD()) + Double.parseDouble(myTargetBean.getAmtMTD());

											mDouGrPer = Double.parseDouble(myTargetList.get(i).getGrPer()) + Double.parseDouble(myTargetBean.getGrPer());
											mDouMonOne = Double.parseDouble(myTargetList.get(i).getAmtMonth1PrevPerf()) + Double.parseDouble(myTargetBean.getAmtMonth1PrevPerf());

											mDouMonTwo = Double.parseDouble(myTargetList.get(i).getAmtMonth2PrevPerf()) + Double.parseDouble(myTargetBean.getAmtMonth2PrevPerf());
											mDouMonthree = Double.parseDouble(myTargetList.get(i).getAmtMonth3PrevPerf()) + Double.parseDouble(myTargetBean.getAmtMonth3PrevPerf());

										} catch (NumberFormatException e) {
											e.printStackTrace();
										}


										myTargetList.get(i).setAmtLMTD(mDouLMTD + "");
										myTargetList.get(i).setAmtMTD(mDougetAmtMTD + "");
										myTargetList.get(i).setGrPer(mDouGrPer + "");
										myTargetList.get(i).setAmtMonth1PrevPerf(mDouMonOne + "");
										myTargetList.get(i).setAmtMonth2PrevPerf(mDouMonTwo + "");
										myTargetList.get(i).setAmtMonth3PrevPerf(mDouMonthree + "");*/
                                        break;
                                    }
                                }
                                if (i == myTargetList.size()) {

                                    myTargetList.add(myTargetBean);


                                }

                            } else {
                                myTargetList.add(myTargetBean);
                            }
                        }


                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }


        return myTargetList;

    }

    /*Retuns KPI Name based on query*/
    public static String getKPIName(String kpiNameQry) throws OfflineODataStoreException {

        String kpiName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(kpiNameQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.KPIName);
                        kpiName = (String) property.getValue();

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return kpiName;

    }

    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargetsItemsList(String myStockQry, String
            mStrSPGuid) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<MyTargetsBean>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(myStockQry);
                //Send a request to read the Targets from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();

                        myTargetBean = new MyTargetsBean();


                        property = properties.get(Constants.TargetGUID);
                        ODataGuid mtargetGuid = null;
                        try {
                            mtargetGuid = (ODataGuid) property.getValue();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.KPIGUID);
                        String mStrRollUp = "";
                        try {
                            ODataGuid kpiGuid = (ODataGuid) property.getValue();
                            mStrRollUp = getValueByColumnName(Constants.KPISet + "?$select=" + Constants.RollupStatus + " &$filter = " + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollupStatus);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String calBased = "";
                        property = properties.get(Constants.KPIGUID);
                        try {
                            ODataGuid kpiGuid = (ODataGuid) property.getValue();
                            calBased = getValueByColumnName(Constants.KPISet + "?$select=" + Constants.CalculationBase + " &$filter = " + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.CalculationBase);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String monthTarget = "", mtdaval = "";
                        if (getVisitStatusForCustomer("" + Constants.TargetItems +
                                "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mStrSPGuid + "' and " + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36() + "' ")) {

                            try {
                                if (calBased.equalsIgnoreCase("01")) {
                                    monthTarget = getTotalSumByCondition("" + Constants.TargetItems +
                                            "?$select=" + Constants.TargetQty + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                            + "' and " + Constants.PartnerGUID + " eq '" + mStrSPGuid + "'", Constants.TargetQty);

                                    mtdaval = getTotalSumByCondition("" + Constants.TargetItems +
                                            "?$select=" + Constants.ActualQty + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                            + "' and " + Constants.PartnerGUID + " eq '" + mStrSPGuid + "'", Constants.ActualQty);


                                } else {
                                    monthTarget = getTotalSumByCondition("" + Constants.TargetItems +
                                            "?$select=" + Constants.TargetValue + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                            + "' and " + Constants.PartnerGUID + " eq '" + mStrSPGuid + "'", Constants.TargetValue);

                                    mtdaval = getTotalSumByCondition("" + Constants.TargetItems +
                                            "?$select=" + Constants.ActualValue + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                            + "' and " + Constants.PartnerGUID + " eq '" + mStrSPGuid + "'", Constants.ActualValue);


                                }


                            } catch (Exception e) {
                                e.printStackTrace();
                            }


                        } else if (getVisitStatusForCustomer("" + Constants.TargetItems +
                                "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " ne '" + mStrSPGuid + "' and " + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36() + "' ")) {
                            if (mStrRollUp.equalsIgnoreCase("01")) {
                                try {
                                    if (calBased.equalsIgnoreCase("01")) {
                                        monthTarget = getTotalSumByCondition("" + Constants.TargetItems +
                                                "?$select=" + Constants.TargetQty + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                                + "' and " + Constants.PartnerGUID + " ne '" + mStrSPGuid + "' ", Constants.TargetQty);

                                        mtdaval = getTotalSumByCondition("" + Constants.TargetItems +
                                                "?$select=" + Constants.ActualQty + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                                + "' and " + Constants.PartnerGUID + " ne '" + mStrSPGuid + "'", Constants.ActualQty);
                                    } else {
                                        monthTarget = getTotalSumByCondition("" + Constants.TargetItems +
                                                "?$select=" + Constants.TargetValue + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                                + "' and " + Constants.PartnerGUID + " ne '" + mStrSPGuid + "' ", Constants.TargetValue);

                                        mtdaval = getTotalSumByCondition("" + Constants.TargetItems +
                                                "?$select=" + Constants.ActualValue + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36()
                                                + "' and " + Constants.PartnerGUID + " ne '" + mStrSPGuid + "'", Constants.ActualValue);
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            } else {
                                continue;
                            }
                        }

                        if (monthTarget != null) {
                            myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                        } else {
                            myTargetBean.setMonthTarget("0");
                        }

                        if (mtdaval != null) {
                            myTargetBean.setMTDA(!mtdaval.toString().equalsIgnoreCase("") ? mtdaval.toString() : "0");
                        } else {
                            myTargetBean.setMTDA("0");
                        }

                        property = properties.get(Constants.KPIGUID);
                        ODataGuid mKpiGuid = null;
                        try {
                            mKpiGuid = (ODataGuid) property.getValue();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        try {
                            myTargetBean.setKPIName(getKPIName(Constants.KPISet + "?$filter=" + Constants.KPIGUID + " eq guid'" + mKpiGuid.guidAsString36() + "' "));
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.KPICode);
                        myTargetBean.setKPICode((String) property.getValue());

                        if (myTargetList != null && myTargetList.size() > 0) {
                            double mDouMonthTarget = 0.0;
                            double mDouActuavalTarget = 0.0;
                            int i;
                            for (i = 0; i < myTargetList.size(); i++) {
                                if (((String) property.getValue()).equalsIgnoreCase(myTargetList.get(i).getKPICode())) {
                                    try {
                                        mDouMonthTarget = Double.parseDouble(myTargetList.get(i).getMonthTarget()) + Double.parseDouble(myTargetBean.getMonthTarget());
                                        mDouActuavalTarget = Double.parseDouble(myTargetList.get(i).getMTDA()) + Double.parseDouble(myTargetBean.getMTDA());
                                    } catch (NumberFormatException e) {
                                        e.printStackTrace();
                                    }


                                    myTargetList.get(i).setMonthTarget(mDouMonthTarget + "");
                                    myTargetList.get(i).setAmtLMTD(mDouActuavalTarget + "");
                                    break;
                                }
                            }
                            if (i == myTargetList.size()) {

                                myTargetList.add(myTargetBean);


                            }

                        } else {
                            myTargetList.add(myTargetBean);
                        }


                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return myTargetList;

    }

    /*Returns invoice amount base don query from offline store*/
    public static String getInvAmmountByMonthYear(String focusedPrdQry) throws
            OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(focusedPrdQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        focsBean = new Config();
                        properties = entity.getProperties();

                        property = properties.get(Constants.KPIGUID);
                        try {
                            ODataGuid minvGuid = (ODataGuid) property.getValue();

                            focsBean.setValue("guid'" + minvGuid.guidAsString36() + "'");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        focList.add(focsBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        String segMatURl = "", appendSpItemUrl = "";
        if (focList != null && focList.size() > 0) {
            for (int i = 0; i < focList.size(); i++) {
                if (i == 0 && i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "(KPIGUID%20eq%20"
                            + focList.get(i).getValue() + ")";

                } else if (i == 0) {
                    segMatURl = segMatURl
                            + "(KPIGUID%20eq%20"
                            + focList.get(i).getValue() + "";

                } else if (i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "%20or%20KPIGUID%20eq%20"
                            + focList.get(i).getValue() + ")";
                } else {
                    segMatURl = segMatURl
                            + "%20or%20KPIGUID%20eq%20"
                            + focList.get(i).getValue() + "";
                }
            }

            appendSpItemUrl = Constants.Targets + "?$select=" + Constants.TargetGUID + "," + Constants.KPIGUID + " &$filter=" + segMatURl;
        }

        if (appendSpItemUrl.equalsIgnoreCase("")) {
            return "0";
        } else {
            return getInvoiceSumValue(appendSpItemUrl);
        }


    }

    /*Returns sum of invoice values based on query*/
    public static String getInvoiceSumValue(String invQry) throws OfflineODataStoreException {
        double mDouSumAmount = 0.0;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invQry);
                //Send a request to read the Targets from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();

                        String calBased = "";
                        property = properties.get(Constants.KPIGUID);
                        try {
                            ODataGuid kpiGuid = (ODataGuid) property.getValue();
                            calBased = getValueByColumnName(Constants.KPISet + "?$select=" + Constants.CalculationBase + " &$filter = " + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.CalculationBase);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.TargetGUID);

                        double mDoubInvAmount = 0.0;
                        try {
                            ODataGuid mtargetGuid = (ODataGuid) property.getValue();
                            BigDecimal monthTarget;
                            if (calBased.equalsIgnoreCase("01")) {
                                monthTarget = getMonthTarget("" + Constants.TargetItems +
                                        "?$select=" + Constants.ActualQty + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36() + "'", Constants.ActualQty);
                            } else {
                                monthTarget = getMonthTarget("" + Constants.TargetItems +
                                        "?$select=" + Constants.ActualValue + " &$filter=" + Constants.TargetGUID + " eq guid'" + mtargetGuid.guidAsString36() + "'", Constants.ActualValue);
                            }


                            if (monthTarget != null) {
                                mDoubInvAmount = monthTarget.doubleValue();
                            } else {
                                mDoubInvAmount = 0.0;
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        mDouSumAmount = mDouSumAmount + mDoubInvAmount;


                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return mDouSumAmount + "";

    }

    /*Returns monthly target as string based on query */
    public static BigDecimal getMonthTarget(String monthTargetQry, String columnValue) throws
            OfflineODataStoreException {

        BigDecimal monthTargetVal = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(monthTargetQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnValue);

                        if (property != null) {
                            monthTargetVal = (BigDecimal) property.getValue();
                        }

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return monthTargetVal;

    }

    /*Returns KPI set GUID  based on query*/
    public static String getKpiSetGuidQuery(String focusedPrdQry) throws
            OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(focusedPrdQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        focsBean = new Config();
                        properties = entity.getProperties();

                        property = properties.get(Constants.KPIGUID);
                        try {
                            ODataGuid minvGuid = (ODataGuid) property.getValue();

                            focsBean.setValue("guid'" + minvGuid.guidAsString36() + "'");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        focList.add(focsBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        String segMatURl = "", appendSpItemUrl = "";
        if (focList != null && focList.size() > 0) {
            for (int i = 0; i < focList.size(); i++) {
                if (i == 0 && i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "(KPIGUID%20eq%20"
                            + focList.get(i).getValue() + ")";

                } else if (i == 0) {
                    segMatURl = segMatURl
                            + "(KPIGUID%20eq%20"
                            + focList.get(i).getValue() + "";

                } else if (i == focList.size() - 1) {
                    segMatURl = segMatURl
                            + "%20or%20KPIGUID%20eq%20"
                            + focList.get(i).getValue() + ")";
                } else {
                    segMatURl = segMatURl
                            + "%20or%20KPIGUID%20eq%20"
                            + focList.get(i).getValue() + "";
                }
            }

            appendSpItemUrl = Constants.Targets + "?$filter=" + segMatURl;
        }


        return appendSpItemUrl;


    }

    /*Returns mobile number of retailer based on query*/
    public static String getRetilerMobileNo(String strQry) throws OfflineODataStoreException {

        ODataEntity odataEntity = null;

        String mobileNoVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.MobileNo);
                        mobileNoVal = property.getValue().toString();


                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mobileNoVal;

    }

    /*Returns list of stock for particular retailer*/
    public static ArrayList<RetailerStockBean> getRetailerStockList(String retailerStockQry) throws
            OfflineODataStoreException {

        ArrayList<RetailerStockBean> retailerStockList = new ArrayList<RetailerStockBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new RetailerStockBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        ODataGuid mCPStkItmGuid = null;
                        try {
                            mCPStkItmGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mCPStkItmGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue() != null ? (String) property.getValue() : "");


                        property = properties.get(Constants.CPNo);
                        String mStrCPNo = (String) property.getValue();


                        property = properties.get(Constants.StockOwner);
                        retailerStockBean.setStockOwner((String) property.getValue());


                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            if (mStrAmount != null) {
                                retailerStockBean.setStockValue(mStrAmount.toString());
                            } else {
                                retailerStockBean.setStockValue("0.0");
                            }

                        }

                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");

                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            if (mStrMrp != null) {
                                retailerStockBean.setMRP(mStrMrp.toString());
                            } else {
                                retailerStockBean.setMRP("0.0");
                            }

                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            if (mStrLandingPrice != null) {
                                retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                            } else {
                                retailerStockBean.setLandingPrice("0.0");
                            }

                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue() != null ? (String) property.getValue() : "");
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);
                        retailerStockBean.setNewStockItem(false);

                        String unrestrictedQty = getDBStk(Constants.CPStockItems
                                + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGroup + "' and  "
                                + Constants.CPNo + " eq '" + mStrCPNo + "' and " + Constants.StockOwner + " eq '02' ");
                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                        else
                            retailerStockBean.setQAQty(unrestrictedQty);

                        if (entity.getEtag() != null) {
                            retailerStockBean.setEtag(entity.getEtag());
                        } else {
                            retailerStockBean.setEtag("");
                        }


                        if (tempArrList.size() == 0) {
                            retailerStockList.add(retailerStockBean);
                            tempArrList.add(orderMatGroup);
                        } else if (!tempArrList.contains(orderMatGroup)) {
                            retailerStockList.add(retailerStockBean);
                            tempArrList.add(orderMatGroup);
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    /*Returns list of feedback from offline store*/
    @SuppressLint("NewApi")
    public static ArrayList<FeedbackBean> getFeedBackList(String feedbackListQry) throws
            OfflineODataStoreException {

        ArrayList<FeedbackBean> alFeedback = new ArrayList<FeedbackBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            FeedbackBean feedBackBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(feedbackListQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        feedBackBean = new FeedbackBean();
                        property = properties.get(Constants.FeebackGUID);
                        try {
                            ODataGuid mFeedbackGuid = (ODataGuid) property.getValue();
                            feedBackBean.setFeebackGUID(mFeedbackGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.FeedbackNo);
                        feedBackBean.setFeedbackNo((String) property.getValue());

                        property = properties.get(Constants.FeedbackType);
                        feedBackBean.setFeedbackType((String) property.getValue());

                        property = properties.get(Constants.FeedbackTypeDesc);
                        feedBackBean.setFeedbackTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Remarks);
                        feedBackBean.setRemarks((String) property.getValue());

//						property = properties.get(Constants.Material_Desc);
//						retailerStockBean.setMaterialDesc((String) property.getValue());
//						property = properties.get(Constants.UnrestrictedQty);
//						if(property!=null){
//							BigDecimal mStrQty = (BigDecimal) property.getValue();
//							retailerStockBean.setQAQty(mStrQty.toString());
//						}
//						property = properties.get(Constants.StockValue);
//						if(property!=null){
//							BigDecimal mStrAmount = (BigDecimal) property.getValue();
//							retailerStockBean.setStockValue(mStrAmount.toString());
//						}
//
//						property = properties.get(Constants.Currency);
//						retailerStockBean.setCurrency((String) property.getValue());
//						property = properties.get(Constants.UOM);
//						retailerStockBean.setUom((String) property.getValue());
//
//						retailerStockList.add(retailerStockBean);
//						feedBackBean.setFeedbackType(fetchJsonHeaderObject.getString(Constants.FeedbackType));
//						feedBackBean.setFeedbackTypeDesc(fetchJsonHeaderObject.getString(Constants.FeedbackTypeDesc));
//						feedBackBean.setBTSID(fetchJsonHeaderObject.getString(Constants.BTSID));
//						feedBackBean.setLocation1(fetchJsonHeaderObject.getString(Constants.Location1));
//						feedBackBean.setFeebackGUID(fetchJsonHeaderObject.getString(Constants.FeebackGUID));
//						feedBackBean.setRemarks(fetchJsonHeaderObject.getString(Constants.Remarks));
                        alFeedback.add(feedBackBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alFeedback;

    }

    /*Returns list of feedback from offline store*/
    @SuppressLint("NewApi")
    public static ArrayList<FeedbackBean> getDeviceFeedBackList(Context context, String
            mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<FeedbackBean> alFeedback = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            FeedbackBean feedBackBean;
            try {
                Set<String> set = new HashSet<>();
                SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
                set = sharedPreferences.getStringSet(Constants.FeedbackList, null);
                if (set != null && !set.isEmpty()) {
                    Iterator itr = set.iterator();
                    while (itr.hasNext()) {
                        String store = null, deviceNo = "";
                        try {
                            deviceNo = itr.next().toString();
                            store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                        } catch (LogonCoreException e) {
                            e.printStackTrace();
                        }
                        try {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            if (fetchJsonHeaderObject.getString(Constants.entityType).equalsIgnoreCase(Constants.Feedback)
                                    && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(mStrCPGUID)) {
                                feedBackBean = new FeedbackBean();
                                feedBackBean.setDeviceStatus("X");
                                feedBackBean.setDeviceNo(deviceNo);
                                feedBackBean.setFeedbackNo(fetchJsonHeaderObject.getString(Constants.FeedbackNo) != null
                                        ? fetchJsonHeaderObject.getString(Constants.FeedbackNo) : "");

                                feedBackBean.setFeedbackType(fetchJsonHeaderObject.getString(Constants.FeedbackType));
                                feedBackBean.setFeedbackTypeDesc(fetchJsonHeaderObject.getString(Constants.FeedbackTypeDesc));
                                feedBackBean.setBTSID(fetchJsonHeaderObject.getString(Constants.BTSID));
                                feedBackBean.setLocation1(fetchJsonHeaderObject.getString(Constants.Location1));
                                feedBackBean.setFeebackGUID(fetchJsonHeaderObject.getString(Constants.FeebackGUID));
                                feedBackBean.setRemarks(fetchJsonHeaderObject.getString(Constants.Remarks));
                                alFeedback.add(feedBackBean);
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alFeedback;

    }

    /*Returns list of schemes*/
    public static ArrayList<SchemeBean> getSchemeList(String schemeQry) throws
            OfflineODataStoreException {

        ArrayList<SchemeBean> alSchemes = new ArrayList<SchemeBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

//				String resourcePath = Constants.ChannelPartners+"?$filter="+Constants.ParentID+" eq '"+distCode+"'" ;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(schemeQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        schemeBean = new SchemeBean();
                        property = properties.get(Constants.ItemNo);
                        schemeBean.setItemNo((String) property.getValue());
                        property = properties.get(Constants.SchemeDesc);
                        schemeBean.setSchemeDesc((String) property.getValue());

                        alSchemes.add(schemeBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alSchemes;

    }

    public static ArrayList<SchemeBean> getSchemeGuidSetFlagEmpty(String schemeQry) throws
            OfflineODataStoreException {

        ArrayList<SchemeBean> alSchemes = new ArrayList<SchemeBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(schemeQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        schemeBean = new SchemeBean();
                        schemeBean.setFlag("");
                        property = properties.get(Constants.SchemeGuid);
                        try {
                            ODataGuid mSchemeGuid = (ODataGuid) property.getValue();
                            schemeBean.setSchemeGuid(mSchemeGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        alSchemes.add(schemeBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alSchemes;

    }

    /*Returns KPI set GUID  based on current month and year */
    public static ArrayList<DBStockBean> getCPStockSNosList(String cpStockSnosQry) throws
            OfflineODataStoreException {

        ArrayList<DBStockBean> dbStockArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean dbStockBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStockSnosQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    dbStockBean = new DBStockBean();
                    properties = entity.getProperties();

                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mStrMrp = (BigDecimal) property.getValue();
                        dbStockBean.setMRP(mStrMrp.toString());
                    }
                    Double mDouPrimaryPer = 0.0;
                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mStrPriDiscPer = (BigDecimal) property.getValue();
                        mDouPrimaryPer = mStrPriDiscPer.doubleValue();
                        dbStockBean.setPrimDiscPer(mStrPriDiscPer.toString());
                    }

                    property = properties.get(Constants.Quantity);
                    String mStrQty = "0.0";
                    Double mDobBatchQty = 0.0, doubleMatUnitPrice = 0.0;
                    if (property != null) {
                        mStrQty = String.valueOf(property.getValue());
                    }

                    try {
                        mDobBatchQty = Double.parseDouble(mStrQty);
                    } catch (NumberFormatException e) {
                        mDobBatchQty = 0.0;
                    }

//                    property = properties.get(Constants.UnitPrice);
                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();

                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }

                    }
                    String mStrTaxAmt = getPriceOnFieldByMatBatch(entity, mDobBatchQty + "");

                    Double mDouCalNetAmt = mDobBatchQty * doubleMatUnitPrice;

//                    Double mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer+"",mDouCalNetAmt+""));
                    Double mDouPrimDisAmt = 0.0;

                    Double mDouCalNetTaxDisAmt = mDouCalNetAmt + Double.parseDouble(mStrTaxAmt) - mDouPrimDisAmt;

                    dbStockBean.setLandingPrice(mDouCalNetTaxDisAmt + "");

                    property = properties.get(Constants.UOM);
                    dbStockBean.setUom((String) property.getValue());

                    if (checkNoUOMZero(String.valueOf(property.getValue())))
                        dbStockBean.setQAQty(trimQtyDecimalPlace(mStrQty));
                    else
                        dbStockBean.setQAQty(mStrQty);

                    property = properties.get(Constants.DbBatch);
                    dbStockBean.setBatch((String) property.getValue());

                    property = properties.get(Constants.Currency);
                    dbStockBean.setCurrency((String) property.getValue());

                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mSpItemGuid = null;
                    try {
                        mSpItemGuid = (ODataGuid) property.getValue();
                        dbStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.MaterialNo);
                    dbStockBean.setMaterialNo((String) property.getValue());
                    property = properties.get(Constants.MaterialDesc);
                    dbStockBean.setMaterialDesc((String) property.getValue());

                    dbStockBean.setFirstMrpQty(dbStockBean.getQAQty());
                    dbStockBean.setFirstMrpLandingPrice(dbStockBean.getLandingPrice());

                    property = properties.get(Constants.ManufacturingDate);
                    String convertDateFormat = "";
                    if (property != null) {
                        convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    }
                    dbStockBean.setMFD(convertDateFormat);

                    boolean isAddedInExisting = false;
                    for (DBStockBean item : dbStockArrayList) {
                        if (dbStockBean.getBatch().equalsIgnoreCase(item.getBatch()) &&
                                dbStockBean.getMRP().equalsIgnoreCase(item.getMRP()) &&
                                dbStockBean.getPrimDiscPer().equalsIgnoreCase(item.getPrimDiscPer()) && dbStockBean.getMaterialNo().equalsIgnoreCase(item.getMaterialNo())) {
                            double updateQty = Double.parseDouble(item.getQAQty()) + Double.parseDouble(dbStockBean.getQAQty());
                            double updateAmt = Double.parseDouble(item.getLandingPrice()) + Double.parseDouble(dbStockBean.getLandingPrice());
                            if (!item.getUom().equalsIgnoreCase("")) {
                                item.setQAQty(trimQtyDecimalPlace(String.valueOf(updateQty)));
                            } else {
                                item.setQAQty(String.format("%.3f", updateQty));
                            }
                            item.setLandingPrice(updateAmt + "");
                            isAddedInExisting = true;
                            break;
                        }
                    }
                    if (!isAddedInExisting)
                        dbStockArrayList.add(dbStockBean);

                }
            }


        }

        return dbStockArrayList;


    }

    //Current Working
    public static ArrayList<DBStockBean> getDBStockList(String retailerStockQry,
                                                        String mStrSelDMSDIVID, String stockOwner,
                                                        String mStrMatType, String selDistGuid) throws OfflineODataStoreException {

        ArrayList<DBStockBean> retailerStockList = new ArrayList<DBStockBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new DBStockBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Material_No);

                        String MatNo = (String) property.getValue();
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue());


                        property = properties.get(Constants.Material_Desc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            retailerStockBean.setStockValue(mStrAmount.toString());
                        }

                        retailerStockBean.setMRP("");
                        retailerStockBean.setRLPrice("");
                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            retailerStockBean.setMRP(mStrMrp.toString());
                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue());
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);
                        String unrestrictedQty = "";
                        if (mStrMatType.equalsIgnoreCase(Constants.str_01)) {
                            orderMatGroup = MatNo;
                            unrestrictedQty = getDBStk(Constants.CPStockItems
                                    + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "'" +
                                    " and " + Constants.StockOwner + " eq '" + stockOwner + "' and " + Constants.CPGUID + " eq '" + selDistGuid + "' and (" + mStrSelDMSDIVID + ")");
                        } else {
                            unrestrictedQty = getDBStk(Constants.CPStockItems
                                    + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGroup + "'" +
                                    " and " + Constants.StockOwner + " eq '" + stockOwner + "' and " + Constants.CPGUID + " eq '" + selDistGuid + "' and (" + mStrSelDMSDIVID + ")");
                        }


                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                        else
                            retailerStockBean.setQAQty(unrestrictedQty);
                        //New
                        if (unrestrictedQty != null && Double.parseDouble(unrestrictedQty) > 0) {
                            if (tempArrList.size() == 0) {
                                retailerStockList.add(retailerStockBean);
                                tempArrList.add(orderMatGroup);
                            } else if (!tempArrList.contains(orderMatGroup)) {
                                retailerStockList.add(retailerStockBean);
                                tempArrList.add(orderMatGroup);
                            }
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    public static ArrayList<DBStockBean> getDBStockMatList(String retailerStockQry, String
            mStrSelDMSDIVID) throws OfflineODataStoreException {

        ArrayList<DBStockBean> retailerStockList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new DBStockBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Material_No);

                        String MatNo = (String) property.getValue();
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue());


                        property = properties.get(Constants.Material_Desc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            retailerStockBean.setStockValue(mStrAmount.toString());
                        }

                        retailerStockBean.setMRP("");
                        retailerStockBean.setRLPrice("");
                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            retailerStockBean.setMRP(mStrMrp.toString());
                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue());
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);

                        String unrestrictedQty = "";
                        property = properties.get(Constants.UnrestrictedQty);
                        if (property != null) {
                            BigDecimal mStrQty = (BigDecimal) property.getValue();
                            if (mStrQty != null) {
                                unrestrictedQty = mStrQty.doubleValue() + "";
                            } else {
                                unrestrictedQty = "0.0";
                            }

                        }

                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                        else
                            retailerStockBean.setQAQty(unrestrictedQty);

                        retailerStockList.add(retailerStockBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    /**
     * returns Configurations from value help checks for default value(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getCompetitorNames(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] compNames[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        int totalRecords = entities.size() + 1;
                        compNames = new String[2][totalRecords];
                        compNames[0][0] = Constants.None;
                        compNames[1][0] = Constants.None;
                        int incVal = 1;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.CompGUID);
                            compNames[0][incVal] = (String) property.getValue();
                            property = properties.get(Constants.CompName);
                            compNames[1][incVal] = (String) property.getValue();

                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return compNames;

    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalOrderAmt(String createType, Context context, String
            mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.SoldToId))) {
                            mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalInvAmt(String createType, Context context, String
            mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.SoldToID))) {
                            mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetAmount));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalOrderAmtByCurrentMonth(String createType, Context
            context, String mStrFirstDateMonth) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrFirstDateMonth.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)) {

                            try {
                                Date start = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH)
                                        .parse(splitToday[0]);
                                Date end = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH)
                                        .parse(createdOn[0]);
                             //   System.out.println(start);
                              //  System.out.println(end);
                                if (start.compareTo(end) == 0 || start.compareTo(end) < 0) {
                                    mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                                }

                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static boolean getVisitActivitiesDoneForDay(String mStrVisitActivity) throws
            OfflineODataStoreException {
        boolean mBooleanVisitActivity = false;
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mStrVisitActivity);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitActivity = true;
                    } else {
                        mBooleanVisitActivity = false;
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitActivity;

    }

    /**
     * returns order amount for device SO(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalOrderAmtByRetailer(String createType, Context
            context, String mStrCurrentDate, String alTodayRetailer) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToId))) {
                            mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static double getDeviceTotalInvoiceAmtByRetailer(String createType, Context
            context, String mStrCurrentDate, String alTodayRetailer) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToID))) {
                            mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetAmount));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    /**
     * returns order Qty for device SO(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalOrderQtyByRetailer(String createType, Context
            context, String mStrCurrentDate, String alTodayRetailer, String mGetColumnName) {

        double mDoubleDevOrdeQty = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToId))) {
                            mDoubleDevOrdeQty = mDoubleDevOrdeQty + Double.parseDouble(fetchJsonHeaderObject.getString(mGetColumnName));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrdeQty;
    }

    public static ArrayList<String> getVisitTime(String visitQry, String mStrColumnName, String
            mStrStartTimeCol) {

        ArrayList<String> alStartTime = new ArrayList<>();
        ArrayList<String> alEndTime = new ArrayList<>();

        ArrayList<String> alStartEndTime = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        String mStrEndTime = "0:0";
        String mStartTime = "0:0";
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(mStrColumnName);

                ODataDuration oDataDuration = null;
                try {
                    oDataDuration = (ODataDuration) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mStrEndTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                alEndTime.add(mStrEndTime);

                property = properties.get(mStrStartTimeCol);

                try {
                    oDataDuration = (ODataDuration) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mStartTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                alStartTime.add(mStartTime);
//                break;
            }

        }
        if (alStartTime != null && alStartTime.size() > 0) {
            Collections.sort(alStartTime, new Comparator<String>() {

                @Override
                public int compare(String timeOne, String timeTwo) {
                    try {
                        return new SimpleDateFormat("HH:mm").parse(timeOne).compareTo(new SimpleDateFormat("HH:mm").parse(timeTwo));
                    } catch (ParseException e) {
                        return 0;
                    }
                }
            });

            Collections.sort(alEndTime, new Comparator<String>() {

                @Override
                public int compare(String timeOne, String timeTwo) {
                    try {
                        return new SimpleDateFormat("HH:mm").parse(timeTwo).compareTo(new SimpleDateFormat("HH:mm").parse(timeOne));
                    } catch (ParseException e) {
                        return 0;
                    }
                }
            });

            try {
                alStartEndTime.add(alStartTime.get(0));
                alStartEndTime.add(alEndTime.get(0));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return alStartEndTime;
//        return mStrTime;
    }

    public static String makeSssoQry(String ssoQry) throws OfflineODataStoreException {

        String ssoListQry = "";
        ArrayList<InvoiceHistoryBean> soHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, ssoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    invoiceBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SSSOGuid);
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    soHeaderArrayList.add(invoiceBean);

                }
            }
        }


        if (soHeaderArrayList != null && soHeaderArrayList.size() > 0) {
            for (int i = 0; i < soHeaderArrayList.size(); i++) {
                if (i == 0 && i == soHeaderArrayList.size() - 1) {
                    ssoListQry = ssoListQry
                            + "(" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "')";

                } else if (i == 0) {
                    ssoListQry = ssoListQry
                            + "(" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "'";

                } else if (i == soHeaderArrayList.size() - 1) {
                    ssoListQry = ssoListQry
                            + "%20or%20" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "')";
                } else {
                    ssoListQry = ssoListQry
                            + "%20or%20" + Constants.SSSOGuid + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "'";
                }
            }
        } else {
            ssoListQry = "";
        }

        return ssoListQry;
    }

    public static String makeSsInvQry(String invQry, String mcolumnname) throws
            OfflineODataStoreException {

        String ssoListQry = "";
        ArrayList<InvoiceHistoryBean> soHeaderArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    invoiceBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(mcolumnname);
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    soHeaderArrayList.add(invoiceBean);

                }
            }
        }


        if (soHeaderArrayList != null && soHeaderArrayList.size() > 0) {
            for (int i = 0; i < soHeaderArrayList.size(); i++) {
                if (i == 0 && i == soHeaderArrayList.size() - 1) {
                    ssoListQry = ssoListQry
                            + "(" + mcolumnname + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "')";

                } else if (i == 0) {
                    ssoListQry = ssoListQry
                            + "(" + mcolumnname + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "'";

                } else if (i == soHeaderArrayList.size() - 1) {
                    ssoListQry = ssoListQry
                            + "%20or%20" + mcolumnname + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "')";
                } else {
                    ssoListQry = ssoListQry
                            + "%20or%20" + mcolumnname + "%20eq%20guid'"
                            + soHeaderArrayList.get(i).getInvoiceGuid() + "'";
                }
            }
        } else {
            ssoListQry = "";
        }

        return ssoListQry;
    }

    public static String getCountTLSDFromDatabase(String ssoItemListQry) throws
            OfflineODataStoreException {
        int countOfTLSd = 0;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, ssoItemListQry);
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            countOfTLSd = entities.size();
        }
        return countOfTLSd + "";
    }

    public static String getUniqueCountFromDatabase(String ssoItemListQry, String mColumnName) throws
            OfflineODataStoreException {
        ODataProperty property;
        ODataPropMap properties;
        Set<String> tempArrList = new HashSet<>();
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, ssoItemListQry);
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(mColumnName);
                tempArrList.add((String) property.getValue());
            }
        }
        return tempArrList.size() + "";
    }

    /*Returns KPI set GUID  based on current month and year */
    public static MyTargetsBean getSpecificKpi(String kpiQry, String mStrCPDMSDIVKPIQry) throws
            OfflineODataStoreException {

        MyTargetsBean kpiBean = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    try {
                        properties = entity.getProperties();
                        String mStrRollUp = "";
                        property = properties.get(Constants.KPIGUID);
                        ODataGuid kpiGuid = null;
                        try {
                            kpiGuid = (ODataGuid) property.getValue();
                            mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                    + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
                                + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' and " + mStrCPDMSDIVKPIQry + " ";
                        if (getVisitActivityStatusForVisit(activityStatusForVisitQry)) {
                            kpiBean = new MyTargetsBean();
                            kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());
                            kpiBean.setRollUpTo(mStrRollUp);

                            property = properties.get(Constants.KPIName);
                            kpiBean.setKPIName((String) property.getValue());


                            property = properties.get(Constants.KPICode);
                            kpiBean.setKPICode((String) property.getValue());

                            property = properties.get(Constants.KPIFor);
                            kpiBean.setKPIFor((String) property.getValue());

                            property = properties.get(Constants.CalculationSource);
                            kpiBean.setCalculationSource((String) property.getValue());

                            property = properties.get(Constants.CalculationBase);
                            kpiBean.setCalculationBase((String) property.getValue());

                            property = properties.get(Constants.KPICategory);
                            kpiBean.setKPICategory((String) property.getValue());
                        }
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }


                }
            }


        }

        return kpiBean;


    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static Set<String> getValueByColumnNameCRSSKU(String mQry, String columnName) throws
            OfflineODataStoreException {
//        String mStrVal = "";
        Set<String> mSetOrderMatGrp = new HashSet<>();
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
//                        mStrVal = (String) property.getValue();
                        mSetOrderMatGrp.add((String) property.getValue());
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mSetOrderMatGrp;

    }

    /**
     * returns List of sales person visit summary from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<VisitSummaryBean> getVisitSummaryVal(Context context,
                                                                 ArrayList<CustomerBean> alTodayRetailers,
                                                                 MyTargetsBean salesKpi,
                                                                 MyTargetsBean tlsdKPI,
                                                                 String mSOOrderType, String mStrCPDMSDIVQry) throws OfflineODataStoreException {
        ArrayList<VisitSummaryBean> retailerStockList = new ArrayList<>();


        for (int incVal = 0; incVal < alTodayRetailers.size(); incVal++) {
            VisitSummaryBean visitSummaryBean = new VisitSummaryBean();

            if (alTodayRetailers.get(incVal).getRetailerName() != null && !alTodayRetailers.get(incVal).getRetailerName().equalsIgnoreCase("")) {
                visitSummaryBean.setRetailerName(alTodayRetailers.get(incVal).getRetailerName());
            } else {
                String mRetName = "";
                try {
                    mRetName = OfflineManager.getValueByColumnName(Constants.ChannelPartners + "?$select=" + Constants.RetailerName + " &$filter = "
                            + Constants.CPUID + " eq '" + alTodayRetailers.get(incVal).getCPNo() + "'", Constants.RetailerName);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                visitSummaryBean.setRetailerName(mRetName);
            }


            String mStrOrderVal = Constants.getOrderValByRetiler(alTodayRetailers.get(incVal).getCPNo(), UtilConstants.getNewDate(), mSOOrderType, context);


            visitSummaryBean.setTimeTaken(alTodayRetailers.get(incVal).getTimeTaken());
            visitSummaryBean.setOrderValue(UtilConstants.removeLeadingZerowithTwoDecimal(mStrOrderVal));

            // getTodayTLSd logic start

            double mDobDeviceTlsd = getTLSDByRetailer(Constants.SOList, context,
                    UtilConstants.getNewDate(), alTodayRetailers.get(incVal).getCPNo());

            String mStrSSOQry = makeSssoQry(Constants.SSSOs + "?$select=" + Constants.SSSOGuid + " " +
                    "&$filter=" + Constants.SoldToCPGUID + " eq guid'" + alTodayRetailers.get(incVal).getCPGUID().toUpperCase() + "' " +
                    "and " + Constants.OrderDate + " eq datetime'" + UtilConstants.getNewDate() + "' and " + Constants.OrderType + " eq '" + Constants.getSOOrderType() + "' ");

            String mStrOfflineTLSD = "0";
            if (!mStrSSOQry.equalsIgnoreCase("")) {
                String itmQry = Constants.SSSoItemDetails + "?$filter=" + Constants.IsfreeGoodsItem + " ne '" + Constants.X + "' and " + mStrSSOQry + " ";
                try {
                    mStrOfflineTLSD = OfflineManager.getCountTLSDFromDatabase(itmQry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

            }
            double mDouSumOfTLSD = 0.0;
            try {
                mDouSumOfTLSD = mDobDeviceTlsd + Double.parseDouble(mStrOfflineTLSD);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }

            visitSummaryBean.setTodayTlsd(UtilConstants.removeLeadingZeroVal(mDouSumOfTLSD + ""));

            //  getTodayTLSd logic end

            String cpQry = Constants.SoldToID + " eq '" + alTodayRetailers.get(incVal).getCPNo() + "'";

            String mStrAchivedFrmInv = Constants.getTotalOrderValueByCurrentMonth(Constants.getFirstDateOfCurrentMonth(), cpQry, mStrCPDMSDIVQry);

            double mDoubleDayTarget = 0.0, mDoubleDayAchived = 0.0;
            if (salesKpi != null) {
                ArrayList<MyTargetsBean> alMyTargets = getMyTargetsByKPI(salesKpi,
                        alTodayRetailers.get(incVal).getCpGuidStringFormat().toUpperCase());

                Map<String, MyTargetsBean> mapSalesKPIVal = getALMyTargetList(alMyTargets);

                mDoubleDayTarget = Double.parseDouble(mapSalesKPIVal.get(salesKpi.getKPICode()).getMonthTarget());

                mDoubleDayAchived = Double.parseDouble(mStrAchivedFrmInv);
            }

            double mDoubleTLSDVal = 0.0;

            String TLSDTillDateInv = FOSTargetsActivity.getDeviceAndDataVaultTLSD(alTodayRetailers.get(incVal).getCPNo(), mStrCPDMSDIVQry);

            int mIntBalVisitRet = 0;
            String mStrBalVisitQry = Constants.RouteSchedulePlans + "?$filter = " + Constants.VisitCPGUID + " eq '"
                    + alTodayRetailers.get(incVal).getCpGuidStringFormat().toUpperCase() + "' ";
            try {
                mIntBalVisitRet = OfflineManager.getBalanceRetVisitRoute(mStrBalVisitQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            Double mDoubDayTarget = 0.0;

            try {
                if (mDoubleDayTarget > 0) {
                    mDoubDayTarget = (mDoubleDayTarget - mDoubleDayAchived) / mIntBalVisitRet;
                }
            } catch (Exception e) {
                mDoubDayTarget = 0.0;
            }
            if (mDoubDayTarget.isInfinite() || mDoubDayTarget.isNaN()) {
                mDoubDayTarget = 0.0;
            }

            visitSummaryBean.setDayTarget(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubDayTarget + ""));

            // Till date TLSD
            Double mIntTillDateTlsd = 0.0;

            try {
                mIntTillDateTlsd = mDoubleTLSDVal + Double.parseDouble(TLSDTillDateInv);
            } catch (Exception e) {
                mIntTillDateTlsd = 0.0;
            }
            if (mIntTillDateTlsd.isInfinite() || mIntTillDateTlsd.isNaN()) {
                mIntTillDateTlsd = 0.0;
            }
            visitSummaryBean.setTlsdTilldate(UtilConstants.removeLeadingZeroVal(mIntTillDateTlsd + ""));

            //  Month Target
            visitSummaryBean.setMonthTarget(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubleDayTarget + ""));

            //  Achived Target
            visitSummaryBean.setAchMTD(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubleDayAchived + ""));

            //  MTD %
            Double mMTDPer = 0.0;

            try {
                mMTDPer = (mDoubleDayAchived / mDoubleDayTarget) * 100;
            } catch (Exception e) {
                mMTDPer = 0.0;
            }
            if (mMTDPer.isNaN() || mMTDPer.isInfinite()) {
                mMTDPer = 0.0;
            }
            visitSummaryBean.setMTDPer(UtilConstants.removeLeadingZerowithTwoDecimal(mMTDPer + ""));


            retailerStockList.add(visitSummaryBean);
//            }
        }


        return retailerStockList;
    }

    /**
     * returns List of sales person visit summary from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<VisitSummaryBean> getInvoiceVisitSummaryVal(Context context,
                                                                        ArrayList<CustomerBean> alTodayRetailers,
                                                                        MyTargetsBean salesKpi,
                                                                        MyTargetsBean tlsdKPI,
                                                                        String mSOOrderType, String mStrCPDMSDIV) throws OfflineODataStoreException {
        ArrayList<VisitSummaryBean> retailerStockList = new ArrayList<>();


        for (int incVal = 0; incVal < alTodayRetailers.size(); incVal++) {
            VisitSummaryBean visitSummaryBean = new VisitSummaryBean();

            if (!alTodayRetailers.get(incVal).getRetailerName().equalsIgnoreCase("")) {
                visitSummaryBean.setRetailerName(alTodayRetailers.get(incVal).getRetailerName());
            } else {
                String mRetName = "";
                try {
                    mRetName = OfflineManager.getValueByColumnName(Constants.ChannelPartners + "?$select=" + Constants.RetailerName + " &$filter = "
                            + Constants.CPNo + " eq '" + alTodayRetailers.get(incVal).getCPNo() + "'", Constants.RetailerName);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                visitSummaryBean.setRetailerName(mRetName);
            }


            String mStrOrderVal = Constants.getInvoiceValByRetiler(alTodayRetailers.get(incVal).getCPNo(), UtilConstants.getNewDate(), mSOOrderType, context);


            visitSummaryBean.setTimeTaken(alTodayRetailers.get(incVal).getTimeTaken());
            visitSummaryBean.setOrderValue(UtilConstants.removeLeadingZerowithTwoDecimal(mStrOrderVal));

            // getTodayTLSd logic start

            double mDobDeviceTlsd = getInvoiceTLSDByRetailer(Constants.InvList, context,
                    UtilConstants.getNewDate(), alTodayRetailers.get(incVal).getCPNo());

            String mStrSSOQry = makeSsInvQry(Constants.SSInvoices + "?$select=" + Constants.InvoiceGUID + " " +
                    "&$filter=" + Constants.SoldToCPGUID + " eq guid'" + alTodayRetailers.get(incVal).getCPGUID().toUpperCase() + "' " +
                    "and " + Constants.InvoiceDate + " eq datetime'" + UtilConstants.getNewDate() + "' ", Constants.InvoiceGUID);

            String mStrOfflineTLSD = "0";
            if (!mStrSSOQry.equalsIgnoreCase("")) {
                String itmQry = Constants.SSInvoiceItemDetails + "?$filter=" + mStrSSOQry + " ";
                try {
                    mStrOfflineTLSD = OfflineManager.getCountTLSDFromDatabase(itmQry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }

            }
            double mDouSumOfTLSD = 0.0;
            try {
                mDouSumOfTLSD = mDobDeviceTlsd + Double.parseDouble(mStrOfflineTLSD);
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }

            visitSummaryBean.setTodayTlsd(UtilConstants.removeLeadingZeroVal(mDouSumOfTLSD + ""));

            //  getTodayTLSd logic end

            String cpQry = Constants.SoldToID + " eq '" + alTodayRetailers.get(incVal).getCPNo() + "'";

            String mStrAchivedFrmInv = Constants.getTotalOrderValueByCurrentMonth(Constants.getFirstDateOfCurrentMonth(), cpQry, mStrCPDMSDIV);

            double mDoubleDayTarget = 0.0, mDoubleDayAchived = 0.0;
            if (salesKpi != null) {
                ArrayList<MyTargetsBean> alMyTargets = getMyTargetsByKPI(salesKpi,
                        alTodayRetailers.get(incVal).getCpGuidStringFormat().toUpperCase());

                Map<String, MyTargetsBean> mapSalesKPIVal = getALMyTargetList(alMyTargets);

                mDoubleDayTarget = Double.parseDouble(mapSalesKPIVal.get(salesKpi.getKPICode()).getMonthTarget());

                mDoubleDayAchived = Double.parseDouble(mStrAchivedFrmInv);
            }

            double mDoubleTLSDVal = 0.0;

            String TLSDTillDateInv = FOSTargetsActivity.getDeviceAndDataVaultTLSD(alTodayRetailers.get(incVal).getCPNo(), mStrCPDMSDIV);

            int mIntBalVisitRet = 0;
            String mStrBalVisitQry = Constants.RouteSchedulePlans + "?$filter = " + Constants.VisitCPGUID + " eq '"
                    + alTodayRetailers.get(incVal).getCpGuidStringFormat().toUpperCase() + "' ";
            try {
                mIntBalVisitRet = OfflineManager.getBalanceRetVisitRoute(mStrBalVisitQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            Double mDoubDayTarget = 0.0;

            try {
                if (mDoubleDayTarget > 0) {
                    mDoubDayTarget = (mDoubleDayTarget - mDoubleDayAchived) / mIntBalVisitRet;
                }
            } catch (Exception e) {
                mDoubDayTarget = 0.0;
            }
            if (mDoubDayTarget.isInfinite() || mDoubDayTarget.isNaN()) {
                mDoubDayTarget = 0.0;
            }

            visitSummaryBean.setDayTarget(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubDayTarget + ""));

            // Till date TLSD
            Double mIntTillDateTlsd = 0.0;

            try {
                mIntTillDateTlsd = mDoubleTLSDVal + Double.parseDouble(TLSDTillDateInv);
            } catch (Exception e) {
                mIntTillDateTlsd = 0.0;
            }
            if (mIntTillDateTlsd.isInfinite() || mIntTillDateTlsd.isNaN()) {
                mIntTillDateTlsd = 0.0;
            }
            visitSummaryBean.setTlsdTilldate(UtilConstants.removeLeadingZeroVal(mIntTillDateTlsd + ""));

            //  Month Target
            visitSummaryBean.setMonthTarget(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubleDayTarget + ""));

            //  Achived Target
            visitSummaryBean.setAchMTD(UtilConstants.removeLeadingZerowithTwoDecimal(mDoubleDayAchived + ""));

            //  MTD %
            Double mMTDPer = 0.0;

            try {
                mMTDPer = (mDoubleDayAchived / mDoubleDayTarget) * 100;
            } catch (Exception e) {
                mMTDPer = 0.0;
            }
            if (mMTDPer.isNaN() || mMTDPer.isInfinite()) {
                mMTDPer = 0.0;
            }
            visitSummaryBean.setMTDPer(UtilConstants.removeLeadingZerowithTwoDecimal(mMTDPer + ""));


            retailerStockList.add(visitSummaryBean);
//            }
        }


        return retailerStockList;
    }

    //ToDo sum of actual and target quantity/Value based on kpi code and assign to map table
    public static Map<String, MyTargetsBean> getALMyTargetList
    (ArrayList<MyTargetsBean> alMyTargets) {
        Map<String, MyTargetsBean> mapMyTargetBean = new HashMap<>();
        Map<String, Double> mapMonthTarget = new HashMap<>();
        Map<String, Double> mapMonthAchived = new HashMap<>();
        if (alMyTargets != null && alMyTargets.size() > 0) {
            for (MyTargetsBean bean : alMyTargets)
                if (mapMonthTarget.containsKey(UtilConstants.removeLeadingZeros(bean.getKPICode()))) {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget()) + mapMonthTarget.get(UtilConstants.removeLeadingZeros(bean.getKPICode()));
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA()) + mapMonthAchived.get(UtilConstants.removeLeadingZeros(bean.getKPICode()));

                    mapMonthTarget.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthTarget);
                    mapMonthAchived.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthAchived);

                    bean.setMonthTarget(mDoubMonthTarget + "");
                    bean.setMTDA(mDoubMonthAchived + "");
                    mapMyTargetBean.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), bean);
                } else {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA());

                    mapMonthTarget.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthTarget);
                    mapMonthAchived.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), mDoubMonthAchived);

                    mapMyTargetBean.put(UtilConstants.removeLeadingZeros(bean.getKPICode()), bean);
                }
        }
        return mapMyTargetBean;
    }

    public static String getTimeTaken(String visitQry) {

        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;

        String mStrStartTime = "", mStrEndTime = "";
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.StartTime);

                ODataDuration oDataDuration = null;
                try {
                    oDataDuration = (ODataDuration) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mStrStartTime = UtilConstants.convertTimeOnly(oDataDuration.toString());

                property = properties.get(Constants.EndTime);

                try {
                    oDataDuration = (ODataDuration) property.getValue();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mStrEndTime = UtilConstants.convertTimeOnly(oDataDuration.toString());

            }

        }
        return Constants.getDiffTime(mStrStartTime, mStrEndTime);
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getTLSDByRetailer(String createType, Context context, String
            mStrCurrentDate, String selRetailer) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && selRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToId))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    public static double getInvoiceTLSDByRetailer(String createType, Context context, String
            mStrCurrentDate, String selRetailer) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && selRetailer.equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SoldToID))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getTLSD(String createType, Context context, String
            mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CPNo))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getInvoiceTLSD(String createType, Context context, String
            mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.SoldToID))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    @SuppressLint("NewApi")
    public static int getUniqueBillCut(String createType, Context context, String
            mStrCurrentDate, ArrayList<String> alTodayRet) {

        ArrayList<String> alRetUiqueBillCount = new ArrayList<>();
        int mIntDevUniqueBillCutValue = 0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CPNo))) {
                            if (!alRetUiqueBillCount.contains(fetchJsonHeaderObject.getString(Constants.CPNo))) {
                                alRetUiqueBillCount.add(fetchJsonHeaderObject.getString(Constants.CPNo));
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

        if (alRetUiqueBillCount != null && alRetUiqueBillCount.size() > 0) {
            mIntDevUniqueBillCutValue = alRetUiqueBillCount.size();
        } else {
            mIntDevUniqueBillCutValue = 0;
        }

        return mIntDevUniqueBillCutValue;
    }

    public static int getInvoiceUniqueBillCut(String createType, Context context, String
            mStrCurrentDate, ArrayList<String> alTodayRet) {

        ArrayList<String> alRetUiqueBillCount = new ArrayList<>();
        int mIntDevUniqueBillCutValue = 0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.SoldToID))) {
                            if (!alRetUiqueBillCount.contains(fetchJsonHeaderObject.getString(Constants.SoldToID))) {
                                alRetUiqueBillCount.add(fetchJsonHeaderObject.getString(Constants.SoldToID));
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

        if (alRetUiqueBillCount != null && alRetUiqueBillCount.size() > 0) {
            mIntDevUniqueBillCutValue = alRetUiqueBillCount.size();
        } else {
            mIntDevUniqueBillCutValue = 0;
        }

        return mIntDevUniqueBillCutValue;
    }

    public static int getBalanceRetVisitRoute(String qry) throws OfflineODataStoreException {


        int mIntBalRetailerVisit = 0;

        ArrayList<RoutePlanBean> routeAlList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                try {
                    properties = entity.getProperties();

                    RoutePlanBean routePlanBean = new RoutePlanBean();

                    property = properties.get(Constants.RouteSchGUID);
                    try {
                        ODataGuid mRouteSchGuid = (ODataGuid) property.getValue();
                        routePlanBean.setRschGuid(mRouteSchGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.DayOfWeek);
                    routePlanBean.setDOW((String) property.getValue());
                    property = properties.get(Constants.DayOfMonth);
                    routePlanBean.setDOM((String) property.getValue());
                    routeAlList.add(routePlanBean);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


        String mStrRouteQry = "";
        if (routeAlList != null && routeAlList.size() > 0) {
            for (int i = 0; i < routeAlList.size(); i++) {
                if (i == 0 && i == routeAlList.size() - 1) {
                    mStrRouteQry = mStrRouteQry
                            + "(" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' )";

                } else if (i == 0) {
                    mStrRouteQry = mStrRouteQry
                            + "((" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' )";

                } else if (i == routeAlList.size() - 1) {
                    mStrRouteQry = mStrRouteQry
                            + "%20or%20(" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' ))";
                } else {
                    mStrRouteQry = mStrRouteQry
                            + "%20or%20(" + Constants.RschGuid + "%20eq%20guid'"
                            + routeAlList.get(i).getRschGuid() + "' ) ";
                }
            }

        }

        if (!mStrRouteQry.equalsIgnoreCase("")) {
            String mStrBalVisitQry = Constants.RoutePlans + "?$filter = " + mStrRouteQry + " " +
                    "and " + Constants.VisitDate + " ge datetime'" + UtilConstants.getNewDate() + "' " +
                    "and  " + Constants.VisitDate + " le datetime'" + Constants.getLastDateOfCurrentMonth() + "' ";
            List<ODataEntity> entitiesBalVisit = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrBalVisitQry);
            if (entitiesBalVisit != null && entitiesBalVisit.size() > 0) {
                mIntBalRetailerVisit = entitiesBalVisit.size();
            }
        }

        return mIntBalRetailerVisit;

    }

    /**
     * returns List of materials  from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<RetailerStockBean> getDBStockMaterials(String
                                                                           dbStockQry, ArrayList<RetailerStockBean> retailerStockList, ArrayList<RetailerStockBean> oldRetailerStockList) throws
            OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStockQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                RetailerStockBean retailerStockBean = new RetailerStockBean();
                properties = entity.getProperties();

                property = properties.get(Constants.StockOwner);
                retailerStockBean.setStockOwner((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGroup = (String) property.getValue();
                retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());

                property = properties.get(Constants.Currency);
                retailerStockBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");

                property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrMrp = (BigDecimal) property.getValue();
                    if (mStrMrp != null) {
                        retailerStockBean.setMRP(mStrMrp.toString());
                    } else {
                        retailerStockBean.setMRP("0.0");
                    }
                }
                property = properties.get(Constants.LandingPrice);
                if (property != null) {
                    BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                    if (mStrLandingPrice != null) {
                        retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                    } else {
                        retailerStockBean.setLandingPrice("0.0");
                    }
                }

                if (entity.getEtag() != null) {
                    retailerStockBean.setEtag(entity.getEtag());
                } else {
                    retailerStockBean.setEtag("");
                }
                retailerStockBean.setStockType("Dist");

//                String unrestrictedQty = getDBStk(Constants.CPStockItems
//                        + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGroup + "' and " + Constants.StockOwner + " eq '01' ");

                String unrestrictedQty = "0";

                property = properties.get(Constants.UOM);
                retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");
                if (checkNoUOMZero(String.valueOf(property.getValue())))
                    retailerStockBean.setQAQty(trimQtyDecimalPlace(unrestrictedQty));
                else
                    retailerStockBean.setQAQty(unrestrictedQty);

                boolean orderMatgrpPresent = containsId(orderMatGroup, oldRetailerStockList);
                if (tempArrList.size() == 0 && !orderMatgrpPresent) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(orderMatGroup);
                } else if (!tempArrList.contains(orderMatGroup) && !orderMatgrpPresent) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(orderMatGroup);
                }

            }
        }
        return retailerStockList;
    }

    private static boolean containsId(String
                                              materialId, ArrayList<RetailerStockBean> retailerStockList) {
        for (RetailerStockBean retailerStockBean : retailerStockList) {
            if (retailerStockBean.getOrderMaterialGroupID().equals(materialId)) {
                return true;
            }
        }

        return false;
    }

    /**
     * returns Last update date  from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getAsOnDate(String dbStockQry, String dateColumnName) throws
            OfflineODataStoreException {

        String mStrAsOnDate = "";
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStockQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(dateColumnName);
                mStrAsOnDate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                break;
            }
        }
        return mStrAsOnDate;
    }

    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createCPStockItems(Hashtable<String, String> table, UIListener
            uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CPStockItems,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CPStockItems),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to create cpstock items in offline store*/
    private static ODataEntity createCPStockItemsEntity(Hashtable<String, String> hashtable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
            /*    newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, hashtable.get(Constants.DMSDivision)));
                newEntity.getProperties().put(Constants.DmsDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DmsDivisionDesc, hashtable.get(Constants.DmsDivisionDesc)));

                newEntity.getProperties().put(Constants.StockOwner,
                        new ODataPropertyDefaultImpl(Constants.StockOwner, hashtable.get(Constants.StockOwner)));

                newEntity.getProperties().put(Constants.UnrestrictedQty,
                        new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.UnrestrictedQty)))));
//				newEntity.getProperties().put(Constants.QAQty,
//						new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));

                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));

                newEntity.getProperties().put(Constants.MRP,
                        new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP).equalsIgnoreCase("") ? "0.0" : hashtable.get(Constants.MRP)))));
                newEntity.getProperties().put(Constants.LandingPrice,
                        new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice).equalsIgnoreCase("") ? "0.0" : hashtable.get(Constants.LandingPrice)))));
                newEntity.getProperties().put(Constants.StockValue,
                        new ODataPropertyDefaultImpl(Constants.StockValue, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.StockValue).equalsIgnoreCase("") ? "0.0" : hashtable.get(Constants.StockValue)))));

                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));

                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, UtilConstants.convertDateFormat(hashtable.get(Constants.AsOnDate))));

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void updateCPStockItems(Hashtable<String, String> table, UIListener
            uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.CPStockItems), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateCPStockItemsEntity(Hashtable<String, String> hashtable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
             /*   newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, hashtable.get(Constants.DMSDivision)));
                newEntity.getProperties().put(Constants.DmsDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DmsDivisionDesc, hashtable.get(Constants.DmsDivisionDesc)));

//				newEntity.getProperties().put(Constants.MaterialNo,
//						new ODataPropertyDefaultImpl(Constants.MaterialNo, hashtable.get(Constants.MaterialNo)));
//				newEntity.getProperties().put(Constants.MaterialDesc,
//						new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                newEntity.getProperties().put(Constants.UnrestrictedQty,
                        new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.UnrestrictedQty)))));
                newEntity.getProperties().put(Constants.StockOwner,
                        new ODataPropertyDefaultImpl(Constants.StockOwner, hashtable.get(Constants.StockOwner)));
//				newEntity.getProperties().put(Constants.QAQty,
//						new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));
                newEntity.getProperties().put(Constants.MRP,
                        new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP)))));
                newEntity.getProperties().put(Constants.LandingPrice,
                        new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice)))));
                newEntity.getProperties().put(Constants.StockValue,
                        new ODataPropertyDefaultImpl(Constants.StockValue, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.StockValue)))));
                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));

                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, UtilConstants.convertDateFormat(hashtable.get(Constants.AsOnDate))));

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static ArrayList<com.arteriatech.emami.mbo.MyPerformanceBean> getRetTrendsList(String
                                                                                               myPerfQry, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<com.arteriatech.emami.mbo.MyPerformanceBean> myPerfList = new ArrayList<>();
        //Check if the offline oData store is initialized
        com.arteriatech.emami.mbo.MyPerformanceBean myPerfBean;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myPerfQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                myPerfBean = new com.arteriatech.emami.mbo.MyPerformanceBean();

                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGrpId = (String) property.getValue();
                myPerfBean.setMaterialNo(orderMatGrpId);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                myPerfBean.setMaterialDesc((String) property.getValue());
                property = properties.get(Constants.ReportOnID);
                String mStrReportType = (String) property.getValue();
                // TODO ReportOnID equal to  '02' display amount values other wise quantity values
                if (mStrReportType.equalsIgnoreCase("02")) {

                    Map<String, MyTargetsBean> myTargetsBean = getTargetByRetailerByCalBase(mStrCPGUID, orderMatGrpId, mStrReportType);

                    myPerfBean.setCMTarget(myTargetsBean.get(orderMatGrpId).getMonthTarget());

                    property = properties.get(Constants.AmtMTD);
                    BigDecimal mAmtMTD = null;
                    ;
                    if (property != null) {
                        mAmtMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMTD(mAmtMTD.toString());
                    }

                    property = properties.get(Constants.AmtLastYearMTD);
                    BigDecimal mAmtLastYearMTD = null;
                    ;
                    if (property != null) {
                        mAmtLastYearMTD = (BigDecimal) property.getValue();
                        Double diffValue = 0.0;
                        try {
                            diffValue = mAmtMTD.doubleValue() - mAmtLastYearMTD.doubleValue();
                        } catch (Exception e) {
                            diffValue = 0.0;
                        }
                        myPerfBean.setAmtLMTD(mAmtLastYearMTD.toString());
                        myPerfBean.setGrPer(getAchivedPer(mAmtLastYearMTD.toString(), diffValue.toString()) + "");
                    }


                    double mdoubSumOf = 0.0;
                    property = properties.get(Constants.AmtMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrQty.doubleValue();
                        myPerfBean.setAmtMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.AmtMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setAmtMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.AmtMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setAmtMonth3PrevPerf(mStrAmount.toString());
                    }

                    Double avgLastThreeMont = 0.0;
                    try {
                        avgLastThreeMont = mdoubSumOf / 3;
                    } catch (Exception e) {
                        avgLastThreeMont = 0.0;
                    }

                    if (Double.isNaN(avgLastThreeMont) || Double.isInfinite(avgLastThreeMont)) {
                        avgLastThreeMont = 0.0;
                    }
                    myPerfBean.setAvgLstThreeMonth(avgLastThreeMont.toString());


                    Double mDouBTD = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMonthTarget()) - mAmtMTD.doubleValue();
                    if (Double.isNaN(mDouBTD) || Double.isInfinite(mDouBTD)) {
                        mDouBTD = 0.0;
                    }

                    myPerfBean.setBalToDo(mDouBTD.toString());
                    double mDouCalAchivedTar = 0.0;

                    try {
                        mDouCalAchivedTar = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMTDA()) + mAmtMTD.doubleValue();
                    } catch (NumberFormatException e) {
                        mDouCalAchivedTar = 0.0;
                    }

                    myPerfBean.setAchivedPer(getAchivedPer(myTargetsBean.get(orderMatGrpId).getMonthTarget(), mDouCalAchivedTar + "") + "");


                } else if (mStrReportType.equalsIgnoreCase("01")) {
                    Map<String, MyTargetsBean> myTargetsBean = getTargetByRetailerByCalBase(mStrCPGUID, orderMatGrpId, mStrReportType);

                    property = properties.get(Constants.QtyMTD);
                    BigDecimal mAmtMTD = null;
                    ;
                    if (property != null) {
                        mAmtMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMTD(mAmtMTD.toString());
                    }

                    property = properties.get(Constants.QtyLastYearMTD);
                    BigDecimal mQtyLastYearMTD = null;
                    ;
                    if (property != null) {
                        mQtyLastYearMTD = (BigDecimal) property.getValue();
                        Double diffValue = 0.0;
                        try {
                            diffValue = mAmtMTD.doubleValue() - mQtyLastYearMTD.doubleValue();
                        } catch (Exception e) {
                            diffValue = 0.0;
                        }
                        myPerfBean.setAmtLMTD(mQtyLastYearMTD.toString());
                        myPerfBean.setGrPer(getAchivedPer(mQtyLastYearMTD.toString(), diffValue.toString()) + "");
                    }

                    double mdoubSumOf = 0.0;
                    property = properties.get(Constants.QtyMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrQty.doubleValue();
                        myPerfBean.setAmtMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.QtyMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setAmtMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.QtyMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        mdoubSumOf = mdoubSumOf + mStrAmount.doubleValue();
                        myPerfBean.setAmtMonth3PrevPerf(mStrAmount.toString());
                    }

                    Double avgLastThreeMont = 0.0;
                    try {
                        avgLastThreeMont = mdoubSumOf / 3;
                    } catch (Exception e) {
                        avgLastThreeMont = 0.0;
                    }

                    if (Double.isNaN(avgLastThreeMont) || Double.isInfinite(avgLastThreeMont)) {
                        avgLastThreeMont = 0.0;
                    }
                    myPerfBean.setAvgLstThreeMonth(avgLastThreeMont.toString());


                    Double mDouBTD = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMonthTarget()) - mAmtMTD.doubleValue();
                    if (Double.isNaN(mDouBTD) || Double.isInfinite(mDouBTD)) {
                        mDouBTD = 0.0;
                    }

                    myPerfBean.setBalToDo(mDouBTD.toString());

                    double mDouCalAchivedTar = 0.0;

                    try {
                        mDouCalAchivedTar = Double.parseDouble(myTargetsBean.get(orderMatGrpId).getMTDA()) + mAmtMTD.doubleValue();
                    } catch (NumberFormatException e) {
                        mDouCalAchivedTar = 0.0;
                    }

                    myPerfBean.setAchivedPer(getAchivedPer(myTargetsBean.get(orderMatGrpId).getMonthTarget(), mDouCalAchivedTar + "") + "");
                }


                myPerfList.add(myPerfBean);
            }
        }

        return myPerfList;

    }

    public static ArrayList<ReturnOrderBean> getReturnOrderList(String
                                                                        retailerStockQry, ArrayList<ReturnOrderBean> returnOrderBeanList) throws
            OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ReturnOrderBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new ReturnOrderBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Material_No);

                        String MatNo = (String) property.getValue();
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue());


                        property = properties.get(Constants.Material_Desc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            if (mStrAmount != null) {
                                retailerStockBean.setStockValue(mStrAmount.toString());
                            } else {
                                retailerStockBean.setStockValue("0.0");
                            }

                        }

                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());
                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            if (mStrMrp != null) {
                                retailerStockBean.setMRP(mStrMrp.toString());
                            } else {
                                retailerStockBean.setMRP("0.0");
                            }

                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            if (mStrLandingPrice != null) {
                                retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                            } else {
                                retailerStockBean.setLandingPrice("0.0");
                            }

                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue());
                        property = properties.get(ConstantsUtils.Brand);
                        retailerStockBean.setBrand((String) property.getValue());
                        property = properties.get(ConstantsUtils.ProductCategoryID);
                        retailerStockBean.setProductCategoryID((String) property.getValue());
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);

                        retailerStockBean.setQAQty("" + getDBStk(Constants.CPStockItems
                                + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "' &$top=1"));

//                        retailerStockList.add(retailerStockBean);
                        if (tempArrList.size() == 0) {
                            returnOrderBeanList.add(retailerStockBean);
                            tempArrList.add(MatNo);
                        } else if (!tempArrList.contains(MatNo)) {
                            returnOrderBeanList.add(retailerStockBean);
                            tempArrList.add(MatNo);
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return returnOrderBeanList;

    }

    public static List<RetailerStockBean> getSampleCollectionList(String
                                                                          retailerStockQry, List<RetailerStockBean> retailerStockList) throws
            OfflineODataStoreException {

        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int itmPoss = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new RetailerStockBean();

                        property = properties.get(Constants.UnrestrictedQty);

                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue()))) {
                            retailerStockBean.setUnrestrictedQty(trimQtyDecimalPlace(qty));
                        } else {
                            retailerStockBean.setUnrestrictedQty(qty);
                        }

                        property = properties.get(Constants.OrderMaterialGroupID);
                        retailerStockBean.setOrderMaterialGroupID((String) property.getValue());

                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.MaterialNo);
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(ConstantsUtils.Brand);
                        retailerStockBean.setBrand((String) property.getValue());

                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mCpGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (qty != null && Double.parseDouble(qty) > 0) {
                            retailerStockBean.setRetailerPos(itmPoss);
                            retailerStockList.add(retailerStockBean);
                            itmPoss++;
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    public static String getPriceOnField(String mStrSNoQry, String mStrOrderQty) throws
            OfflineODataStoreException {

        Double doubleTax1 = 0.0, doubleTax2 = 0.0, doubleTax3 = 0.0, doubleTax4 = 0.0, doubleTax5 = 0.0,
                doubleTax6 = 0.0, doubleTax7 = 0.0, doubleTax8 = 0.0, doubleTax9 = 0.0, doubleTax10 = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
        String mStrCalTaxOneAmt = "0.0", mStrCalTaxTwoAmt = "0.0", mStrCalTaxThreeAmt = "0.0",
                mStrCalTaxFourAmt = "0.0", mStrCalTaxFiveAmt = "0.0", mStrCalTaxSixAmt = "0.0",
                mStrCalSevenAmt = "0.0", mStrCalTaxEightAmt = "0.0", mStrCalTaxNineAmt = "0.0",
                mStrCalTaxTenAmt = "0.0";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    property = properties.get(Constants.Tax1);
                    if (property != null) {
                        BigDecimal mDecTax1 = (BigDecimal) property.getValue();
                        if (mDecTax1 != null) {
                            doubleTax1 = mDecTax1.doubleValue();
                        } else {
                            doubleTax1 = 0.0;
                        }
                    }
                    if (doubleTax1 > 0) {
                        mStrCalTaxOneAmt = getTaxAmt(properties, "01", doubleTax1);
                    }

                    property = properties.get(Constants.Tax2);
                    if (property != null) {
                        BigDecimal mDecTax2 = (BigDecimal) property.getValue();
                        if (mDecTax2 != null) {
                            doubleTax2 = mDecTax2.doubleValue();
                        } else {
                            doubleTax2 = 0.0;
                        }
                    }
                    if (doubleTax2 > 0) {
                        mStrCalTaxTwoAmt = getTaxAmt(properties, "02", doubleTax2);
                    }

                    property = properties.get(Constants.Tax3);
                    if (property != null) {
                        BigDecimal mDecTax3 = (BigDecimal) property.getValue();
                        if (mDecTax3 != null) {
                            doubleTax3 = mDecTax3.doubleValue();
                        } else {
                            doubleTax3 = 0.0;
                        }
                    }
                    if (doubleTax3 > 0) {
                        mStrCalTaxThreeAmt = getTaxAmt(properties, "03", doubleTax3);
                    }

                    property = properties.get(Constants.Tax4);
                    if (property != null) {
                        BigDecimal mDecTax4 = (BigDecimal) property.getValue();
                        if (mDecTax4 != null) {
                            doubleTax4 = mDecTax4.doubleValue();
                        } else {
                            doubleTax4 = 0.0;
                        }
                    }
                    if (doubleTax4 > 0) {
                        mStrCalTaxFourAmt = getTaxAmt(properties, "04", doubleTax4);
                    }

                    property = properties.get(Constants.Tax5);
                    if (property != null) {
                        BigDecimal mDecTax5 = (BigDecimal) property.getValue();
                        if (mDecTax5 != null) {
                            doubleTax5 = mDecTax5.doubleValue();
                        } else {
                            doubleTax5 = 0.0;
                        }
                    }
                    if (doubleTax5 > 0) {
                        mStrCalTaxFiveAmt = getTaxAmt(properties, "05", doubleTax5);
                    }

                    property = properties.get(Constants.Tax6);
                    if (property != null) {
                        BigDecimal mDecTax6 = (BigDecimal) property.getValue();
                        if (mDecTax6 != null) {
                            doubleTax6 = mDecTax6.doubleValue();
                        } else {
                            doubleTax6 = 0.0;
                        }
                    }
                    if (doubleTax6 > 0) {
                        mStrCalTaxSixAmt = getTaxAmt(properties, "06", doubleTax6);
                    }

                    property = properties.get(Constants.Tax7);
                    if (property != null) {
                        BigDecimal mDecTax7 = (BigDecimal) property.getValue();
                        if (mDecTax7 != null) {
                            doubleTax7 = mDecTax7.doubleValue();
                        } else {
                            doubleTax7 = 0.0;
                        }
                    }
                    if (doubleTax7 > 0) {
                        mStrCalSevenAmt = getTaxAmt(properties, "07", doubleTax7);
                    }

                    property = properties.get(Constants.Tax8);
                    if (property != null) {
                        BigDecimal mDecTax8 = (BigDecimal) property.getValue();
                        if (mDecTax8 != null) {
                            doubleTax8 = mDecTax8.doubleValue();
                        } else {
                            doubleTax8 = 0.0;
                        }
                    }
                    if (doubleTax8 > 0) {
                        mStrCalTaxEightAmt = getTaxAmt(properties, "08", doubleTax8);
                    }

                    property = properties.get(Constants.Tax9);
                    if (property != null) {
                        BigDecimal mDecTax9 = (BigDecimal) property.getValue();
                        if (mDecTax9 != null) {
                            doubleTax9 = mDecTax9.doubleValue();
                        } else {
                            doubleTax9 = 0.0;
                        }
                    }
                    if (doubleTax9 > 0) {
                        mStrCalTaxNineAmt = getTaxAmt(properties, "09", doubleTax9);
                    }

                    property = properties.get(Constants.Tax10);
                    if (property != null) {
                        BigDecimal mDecTax10 = (BigDecimal) property.getValue();
                        if (mDecTax10 != null) {
                            doubleTax10 = mDecTax10.doubleValue();
                        } else {
                            doubleTax10 = 0.0;
                        }
                    }
                    if (doubleTax10 > 0) {
                        mStrCalTaxTenAmt = getTaxAmt(properties, "10", doubleTax10);
                    }
                }

            }

            mDouCalucaltedNetAmount = (Double.parseDouble(mStrCalTaxOneAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTwoAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxThreeAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFourAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFiveAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxSixAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalSevenAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxEightAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxNineAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTenAmt) * Double.parseDouble(mStrOrderQty));
        }

        return mDouCalucaltedNetAmount.toString();
    }

    public static String getPriceOnFieldByMatBatch(ODataEntity entity, String mStrOrderQty) throws
            OfflineODataStoreException {

        Double doubleTax1 = 0.0, doubleTax2 = 0.0, doubleTax3 = 0.0, doubleTax4 = 0.0, doubleTax5 = 0.0,
                doubleTax6 = 0.0, doubleTax7 = 0.0, doubleTax8 = 0.0, doubleTax9 = 0.0, doubleTax10 = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
        String mStrCalTaxOneAmt = "0.0", mStrCalTaxTwoAmt = "0.0", mStrCalTaxThreeAmt = "0.0",
                mStrCalTaxFourAmt = "0.0", mStrCalTaxFiveAmt = "0.0", mStrCalTaxSixAmt = "0.0",
                mStrCalSevenAmt = "0.0", mStrCalTaxEightAmt = "0.0", mStrCalTaxNineAmt = "0.0",
                mStrCalTaxTenAmt = "0.0";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;


            properties = entity.getProperties();

            property = properties.get(Constants.Tax1);
            if (property != null) {
                BigDecimal mDecTax1 = (BigDecimal) property.getValue();
                if (mDecTax1 != null) {
                    doubleTax1 = mDecTax1.doubleValue();
                } else {
                    doubleTax1 = 0.0;
                }
            }
            if (doubleTax1 > 0) {
                mStrCalTaxOneAmt = getTaxAmt(properties, "01", doubleTax1);
            }

            property = properties.get(Constants.Tax2);
            if (property != null) {
                BigDecimal mDecTax2 = (BigDecimal) property.getValue();
                if (mDecTax2 != null) {
                    doubleTax2 = mDecTax2.doubleValue();
                } else {
                    doubleTax2 = 0.0;
                }
            }
            if (doubleTax2 > 0) {
                mStrCalTaxTwoAmt = getTaxAmt(properties, "02", doubleTax2);
            }

            property = properties.get(Constants.Tax3);
            if (property != null) {
                BigDecimal mDecTax3 = (BigDecimal) property.getValue();
                if (mDecTax3 != null) {
                    doubleTax3 = mDecTax3.doubleValue();
                } else {
                    doubleTax3 = 0.0;
                }
            }
            if (doubleTax3 > 0) {
                mStrCalTaxThreeAmt = getTaxAmt(properties, "03", doubleTax3);
            }

            property = properties.get(Constants.Tax4);
            if (property != null) {
                BigDecimal mDecTax4 = (BigDecimal) property.getValue();
                if (mDecTax4 != null) {
                    doubleTax4 = mDecTax4.doubleValue();
                } else {
                    doubleTax4 = 0.0;
                }
            }
            if (doubleTax4 > 0) {
                mStrCalTaxFourAmt = getTaxAmt(properties, "04", doubleTax4);
            }

            property = properties.get(Constants.Tax5);
            if (property != null) {
                BigDecimal mDecTax5 = (BigDecimal) property.getValue();
                if (mDecTax5 != null) {
                    doubleTax5 = mDecTax5.doubleValue();
                } else {
                    doubleTax5 = 0.0;
                }
            }
            if (doubleTax5 > 0) {
                mStrCalTaxFiveAmt = getTaxAmt(properties, "05", doubleTax5);
            }

            property = properties.get(Constants.Tax6);
            if (property != null) {
                BigDecimal mDecTax6 = (BigDecimal) property.getValue();
                if (mDecTax6 != null) {
                    doubleTax6 = mDecTax6.doubleValue();
                } else {
                    doubleTax6 = 0.0;
                }
            }
            if (doubleTax6 > 0) {
                mStrCalTaxSixAmt = getTaxAmt(properties, "06", doubleTax6);
            }

            property = properties.get(Constants.Tax7);
            if (property != null) {
                BigDecimal mDecTax7 = (BigDecimal) property.getValue();
                if (mDecTax7 != null) {
                    doubleTax7 = mDecTax7.doubleValue();
                } else {
                    doubleTax7 = 0.0;
                }
            }
            if (doubleTax7 > 0) {
                mStrCalSevenAmt = getTaxAmt(properties, "07", doubleTax7);
            }

            property = properties.get(Constants.Tax8);
            if (property != null) {
                BigDecimal mDecTax8 = (BigDecimal) property.getValue();
                if (mDecTax8 != null) {
                    doubleTax8 = mDecTax8.doubleValue();
                } else {
                    doubleTax8 = 0.0;
                }
            }
            if (doubleTax8 > 0) {
                mStrCalTaxEightAmt = getTaxAmt(properties, "08", doubleTax8);
            }

            property = properties.get(Constants.Tax9);
            if (property != null) {
                BigDecimal mDecTax9 = (BigDecimal) property.getValue();
                if (mDecTax9 != null) {
                    doubleTax9 = mDecTax9.doubleValue();
                } else {
                    doubleTax9 = 0.0;
                }
            }
            if (doubleTax9 > 0) {
                mStrCalTaxNineAmt = getTaxAmt(properties, "09", doubleTax9);
            }

            property = properties.get(Constants.Tax10);
            if (property != null) {
                BigDecimal mDecTax10 = (BigDecimal) property.getValue();
                if (mDecTax10 != null) {
                    doubleTax10 = mDecTax10.doubleValue();
                } else {
                    doubleTax10 = 0.0;
                }
            }
            if (doubleTax10 > 0) {
                mStrCalTaxTenAmt = getTaxAmt(properties, "10", doubleTax10);
            }


            mDouCalucaltedNetAmount = (Double.parseDouble(mStrCalTaxOneAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTwoAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxThreeAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFourAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFiveAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxSixAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalSevenAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxEightAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxNineAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTenAmt) * Double.parseDouble(mStrOrderQty));
        }

        return mDouCalucaltedNetAmount.toString();
    }

    public static String getTaxAmt(ODataPropMap properties, String mStrTaxId, Double doubleTax) throws
            OfflineODataStoreException {
        String mCalTaxAmt = "0.0";
        ODataProperty property;
        Double doubleUnitPrice = 0.0;

        ArrayList<PricingConditions> pricingConditionsAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                + Constants.ReferenceTaxFieldID + " eq '" + mStrTaxId + "' ");

        if (pricingConditionsAL != null && pricingConditionsAL.size() > 0) {

            if (pricingConditionsAL.get(0).getCalcOnID().equalsIgnoreCase("02")) {

                ArrayList<PricingConditions> pricingConOnCalValAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                        + Constants.ConditionTypeID + " eq '" + pricingConditionsAL.get(0).getCalcOnConditionTypeID() + "' ");
                if (pricingConOnCalValAL != null && pricingConOnCalValAL.size() > 0) {
                    property = properties.get(Constants.getCalculateColumn(pricingConOnCalValAL.get(0).getApplicableOnID()));
                    if (property != null) {
                        BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                        if (mDecUnitPrice != null) {
                            doubleUnitPrice = mDecUnitPrice.doubleValue();
                        } else {
                            doubleUnitPrice = 0.0;
                        }
                    }
                    mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), doubleUnitPrice + "");
                }

            } else {
                property = properties.get(Constants.getCalculateColumn(pricingConditionsAL.get(0).getApplicableOnID()));
                if (property != null) {
                    BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                    if (mDecUnitPrice != null) {
                        doubleUnitPrice = mDecUnitPrice.doubleValue();
                    } else {
                        doubleUnitPrice = 0.0;
                    }
                }
                mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), doubleUnitPrice + "");
            }
        }

        return mCalTaxAmt;
    }

    public static String getPriceOnFieldByMatBatchAfterPrimarySecDiscount(ODataEntity
                                                                                  entity, String mStrNetAmtPerQty, String mStrOrderQty) throws OfflineODataStoreException {

        Double doubleTax1 = 0.0, doubleTax2 = 0.0, doubleTax3 = 0.0, doubleTax4 = 0.0, doubleTax5 = 0.0,
                doubleTax6 = 0.0, doubleTax7 = 0.0, doubleTax8 = 0.0, doubleTax9 = 0.0, doubleTax10 = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
        String mStrCalTaxOneAmt = "0.0", mStrCalTaxTwoAmt = "0.0", mStrCalTaxThreeAmt = "0.0",
                mStrCalTaxFourAmt = "0.0", mStrCalTaxFiveAmt = "0.0", mStrCalTaxSixAmt = "0.0",
                mStrCalSevenAmt = "0.0", mStrCalTaxEightAmt = "0.0", mStrCalTaxNineAmt = "0.0",
                mStrCalTaxTenAmt = "0.0";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;


            properties = entity.getProperties();

            property = properties.get(Constants.Tax1);
            if (property != null) {
                BigDecimal mDecTax1 = (BigDecimal) property.getValue();
                if (mDecTax1 != null) {
                    doubleTax1 = mDecTax1.doubleValue();
                } else {
                    doubleTax1 = 0.0;
                }
            }
            if (doubleTax1 > 0) {
                mStrCalTaxOneAmt = getTaxAmtAfterPrimarySecDiscount(properties, "01", doubleTax1, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax2);
            if (property != null) {
                BigDecimal mDecTax2 = (BigDecimal) property.getValue();
                if (mDecTax2 != null) {
                    doubleTax2 = mDecTax2.doubleValue();
                } else {
                    doubleTax2 = 0.0;
                }
            }
            if (doubleTax2 > 0) {
                mStrCalTaxTwoAmt = getTaxAmtAfterPrimarySecDiscount(properties, "02", doubleTax2, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax3);
            if (property != null) {
                BigDecimal mDecTax3 = (BigDecimal) property.getValue();
                if (mDecTax3 != null) {
                    doubleTax3 = mDecTax3.doubleValue();
                } else {
                    doubleTax3 = 0.0;
                }
            }
            if (doubleTax3 > 0) {
                mStrCalTaxThreeAmt = getTaxAmtAfterPrimarySecDiscount(properties, "03", doubleTax3, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax4);
            if (property != null) {
                BigDecimal mDecTax4 = (BigDecimal) property.getValue();
                if (mDecTax4 != null) {
                    doubleTax4 = mDecTax4.doubleValue();
                } else {
                    doubleTax4 = 0.0;
                }
            }
            if (doubleTax4 > 0) {
                mStrCalTaxFourAmt = getTaxAmtAfterPrimarySecDiscount(properties, "04", doubleTax4, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax5);
            if (property != null) {
                BigDecimal mDecTax5 = (BigDecimal) property.getValue();
                if (mDecTax5 != null) {
                    doubleTax5 = mDecTax5.doubleValue();
                } else {
                    doubleTax5 = 0.0;
                }
            }
            if (doubleTax5 > 0) {
                mStrCalTaxFiveAmt = getTaxAmtAfterPrimarySecDiscount(properties, "05", doubleTax5, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax6);
            if (property != null) {
                BigDecimal mDecTax6 = (BigDecimal) property.getValue();
                if (mDecTax6 != null) {
                    doubleTax6 = mDecTax6.doubleValue();
                } else {
                    doubleTax6 = 0.0;
                }
            }
            if (doubleTax6 > 0) {
                mStrCalTaxSixAmt = getTaxAmtAfterPrimarySecDiscount(properties, "06", doubleTax6, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax7);
            if (property != null) {
                BigDecimal mDecTax7 = (BigDecimal) property.getValue();
                if (mDecTax7 != null) {
                    doubleTax7 = mDecTax7.doubleValue();
                } else {
                    doubleTax7 = 0.0;
                }
            }
            if (doubleTax7 > 0) {
                mStrCalSevenAmt = getTaxAmtAfterPrimarySecDiscount(properties, "07", doubleTax7, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax8);
            if (property != null) {
                BigDecimal mDecTax8 = (BigDecimal) property.getValue();
                if (mDecTax8 != null) {
                    doubleTax8 = mDecTax8.doubleValue();
                } else {
                    doubleTax8 = 0.0;
                }
            }
            if (doubleTax8 > 0) {
                mStrCalTaxEightAmt = getTaxAmtAfterPrimarySecDiscount(properties, "08", doubleTax8, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax9);
            if (property != null) {
                BigDecimal mDecTax9 = (BigDecimal) property.getValue();
                if (mDecTax9 != null) {
                    doubleTax9 = mDecTax9.doubleValue();
                } else {
                    doubleTax9 = 0.0;
                }
            }
            if (doubleTax9 > 0) {
                mStrCalTaxNineAmt = getTaxAmtAfterPrimarySecDiscount(properties, "09", doubleTax9, mStrNetAmtPerQty);
            }

            property = properties.get(Constants.Tax10);
            if (property != null) {
                BigDecimal mDecTax10 = (BigDecimal) property.getValue();
                if (mDecTax10 != null) {
                    doubleTax10 = mDecTax10.doubleValue();
                } else {
                    doubleTax10 = 0.0;
                }
            }
            if (doubleTax10 > 0) {
                mStrCalTaxTenAmt = getTaxAmtAfterPrimarySecDiscount(properties, "10", doubleTax10, mStrNetAmtPerQty);
            }


            mDouCalucaltedNetAmount = (Double.parseDouble(mStrCalTaxOneAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTwoAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxThreeAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFourAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxFiveAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxSixAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalSevenAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxEightAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxNineAmt) * Double.parseDouble(mStrOrderQty))
                    + (Double.parseDouble(mStrCalTaxTenAmt) * Double.parseDouble(mStrOrderQty));
        }

        return mDouCalucaltedNetAmount.toString();
    }

    public static String getTaxAmtAfterPrimarySecDiscount(ODataPropMap properties, String
            mStrTaxId, Double doubleTax, String mStrNetAmtPerQty) throws OfflineODataStoreException {
        String mCalTaxAmt = "0.0";
        ODataProperty property;
        Double doubleUnitPrice = 0.0;

        ArrayList<PricingConditions> pricingConditionsAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                + Constants.ReferenceTaxFieldID + " eq '" + mStrTaxId + "' ");

        if (pricingConditionsAL != null && pricingConditionsAL.size() > 0) {

            if (pricingConditionsAL.get(0).getCalcOnID().equalsIgnoreCase("02")) {

                ArrayList<PricingConditions> pricingConOnCalValAL = getPricingConditionTypeList(Constants.PricingConditions + "?$filter="
                        + Constants.ConditionTypeID + " eq '" + pricingConditionsAL.get(0).getCalcOnConditionTypeID() + "' ");
                if (pricingConOnCalValAL != null && pricingConOnCalValAL.size() > 0) {
                    property = properties.get(Constants.getCalculateColumn(pricingConOnCalValAL.get(0).getApplicableOnID()));
                    if (property != null) {
                        BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                        if (mDecUnitPrice != null) {
                            doubleUnitPrice = mDecUnitPrice.doubleValue();
                        } else {
                            doubleUnitPrice = 0.0;
                        }
                    }
                    if (pricingConOnCalValAL.get(0).getApplicableOnID().equalsIgnoreCase("01")) { // Cal on unit price
                        mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), mStrNetAmtPerQty + "");
                    } else {
                        mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), doubleUnitPrice + "");
                    }


                }

            } else {
                property = properties.get(Constants.getCalculateColumn(pricingConditionsAL.get(0).getApplicableOnID()));
                if (property != null) {
                    BigDecimal mDecUnitPrice = (BigDecimal) property.getValue();
                    if (mDecUnitPrice != null) {
                        doubleUnitPrice = mDecUnitPrice.doubleValue();
                    } else {
                        doubleUnitPrice = 0.0;
                    }
                }
                mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), mStrNetAmtPerQty + "");
            }
        }
//        mCalTaxAmt = Constants.formulaOneCalculation(doubleTax.toString(), mStrNetAmtPerQty + "");
        return mCalTaxAmt;
    }

    public static ArrayList<PricingConditions> getPricingConditionTypeList(String
                                                                                   pricingCondQry) throws OfflineODataStoreException {

        ArrayList<PricingConditions> pricingCondList = new ArrayList<>();
        //Check if the offline oData store is initialized
        PricingConditions prcingCondBean;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, pricingCondQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                prcingCondBean = new PricingConditions();
                property = properties.get(Constants.ConditionTypeID);
                prcingCondBean.setConditionTypeID((String) property.getValue());
                property = properties.get(Constants.ConditionTypeDesc);
                prcingCondBean.setConditionTypeDesc((String) property.getValue());
                property = properties.get(Constants.ReferenceTaxFieldID);
                prcingCondBean.setReferenceTaxFieldID((String) property.getValue());
                property = properties.get(Constants.ReferenceTaxFieldDesc);
                prcingCondBean.setReferenceTaxFieldDesc((String) property.getValue());
                property = properties.get(Constants.FormulaID);
                prcingCondBean.setFormulaID((String) property.getValue());
                property = properties.get(Constants.FormulaDesc);
                prcingCondBean.setFormulaDesc((String) property.getValue());
                property = properties.get(Constants.CalcOnID);
                prcingCondBean.setCalcOnID((String) property.getValue());
                property = properties.get(Constants.CalcOnDesc);
                prcingCondBean.setCalcOnDesc((String) property.getValue());
                property = properties.get(Constants.ApplicableOnID);
                prcingCondBean.setApplicableOnID((String) property.getValue());
                property = properties.get(Constants.ApplicableOnDesc);
                prcingCondBean.setApplicableOnDesc((String) property.getValue());
                property = properties.get(Constants.CalcOnConditionTypeID);
                prcingCondBean.setCalcOnConditionTypeID((String) property.getValue());
                property = properties.get(Constants.CalcOnConditionTypeDesc);
                prcingCondBean.setCalcOnConditionTypeDesc((String) property.getValue());
                pricingCondList.add(prcingCondBean);
            }
        }

        return pricingCondList;
    }

    /**
     * get return order list
     *
     * @param retailerStockQry
     * @param returnOrderList
     * @return
     * @throws OfflineODataStoreException
     */
    public static ArrayList<ReturnOrderBean> getReturnOrderFromOffline(String
                                                                               retailerStockQry, ArrayList<ReturnOrderBean> returnOrderList) throws
            OfflineODataStoreException {

        if (offlineStore != null) {
            ReturnOrderBean returnOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        returnOrderBean = new ReturnOrderBean();

                        property = properties.get(Constants.SSROGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            returnOrderBean.setSSROGUID(mCpGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.OrderNo);
                        returnOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.StatusID);
                        returnOrderBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        returnOrderBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        returnOrderBean.setNetAmount(netAmount + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        returnOrderBean.setOrderDate(convertDateFormat);


                        returnOrderList.add(returnOrderBean);


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }


        return sortingROList(returnOrderList);

    }

    /**
     * return order details list
     *
     * @param retailerStockQry
     * @param retailerStockList
     * @return
     * @throws OfflineODataStoreException
     */
    public static List<ReturnOrderBean> getReturnOrderDetailsList(String
                                                                          retailerStockQry, List<ReturnOrderBean> retailerStockList) throws
            OfflineODataStoreException {

        if (offlineStore != null) {
            ReturnOrderBean returnOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        returnOrderBean = new ReturnOrderBean();


                        property = properties.get(Constants.MaterialNo);
                        returnOrderBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        returnOrderBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        returnOrderBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.OrdMatGrp);
                        returnOrderBean.setOrderMaterialGroupID((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        returnOrderBean.setsItemNo((String) property.getValue());

                        property = properties.get(Constants.OrdMatGrpDesc);
                        returnOrderBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.Quantity);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        returnOrderBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            returnOrderBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            returnOrderBean.setQAQty(qty);

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        returnOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        retailerStockList.add(returnOrderBean);


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    /**
     * get secondary sales order list
     *
     * @param retailerStockQry
     * @param returnOrderList
     * @return
     * @throws OfflineODataStoreException
     */
    public static ArrayList<ReturnOrderBean> getSecondarySalesOrderList(String
                                                                                retailerStockQry, ArrayList<ReturnOrderBean> returnOrderList,
                                                                        String mStrBundleRetID, Activity activity) throws OfflineODataStoreException {

        HashSet<String> mSetSSORef = getSSOInvRefGuid(activity, mStrBundleRetID);
        if (offlineStore != null) {
            ReturnOrderBean returnOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        returnOrderBean = new ReturnOrderBean();

                        property = properties.get(Constants.SSSOGuid);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            returnOrderBean.setSSROGUID(mCpGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.OrderNo);
                        returnOrderBean.setOrderNo((String) property.getValue());


                        property = properties.get(Constants.Distance);
                        returnOrderBean.setDistance((String) property.getValue());

                        property = properties.get(Constants.Status);
                        returnOrderBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        returnOrderBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        returnOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        returnOrderBean.setOrderDate(convertDateFormat);

                        try {
                            if (mSetSSORef.contains(returnOrderBean.getSSROGUID())) {
                                returnOrderBean.setTempStatus("X");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        returnOrderList.add(returnOrderBean);


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return sortingROList(returnOrderList);

    }

    private static ArrayList<ReturnOrderBean> sortingROList
            (ArrayList<ReturnOrderBean> alReturnOrdList) {

        if (alReturnOrdList != null && alReturnOrdList.size() > 0) {
            Collections.sort(alReturnOrdList, new Comparator<ReturnOrderBean>() {
                public int compare(ReturnOrderBean one, ReturnOrderBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getOrderNo().compareTo(one.getOrderNo());
                    }
                }
            });

        } else {
            alReturnOrdList = new ArrayList<>();
        }
        return alReturnOrdList;
    }

    /**
     * get RO data from data valt
     *
     * @param context
     * @param mStrCpGuid
     * @param returnOrderBeanList
     * @return
     * @throws OfflineODataStoreException
     */
    public static ArrayList<ReturnOrderBean> getROListFromDataValt(Context context, String
            mStrCpGuid, ArrayList<ReturnOrderBean> returnOrderBeanList) throws
            OfflineODataStoreException {
        ReturnOrderBean returnOrderBean;
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.ROList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                } catch (LogonCoreException e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.ReturnOrderCreate)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))) {
                        returnOrderBean = new ReturnOrderBean();
                        returnOrderBean.setDeviceNo(deviceNo);
                        returnOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSROGUID));
                        returnOrderBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.OrderNo));
                        returnOrderBean.setOrderDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate)));
                        returnOrderBean.setStatusID(fetchJsonHeaderObject.optString(Constants.StatusID));
                        returnOrderBean.setNetAmount("0.00");
                        returnOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                        returnOrderBeanList.add(returnOrderBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return sortingROList(returnOrderBeanList);

    }

    public static boolean getROListFromDataValt(Context context, String mStrCpGuid) throws
            OfflineODataStoreException {
        ReturnOrderBean returnOrderBean;
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.ROList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                } catch (LogonCoreException e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.ReturnOrderCreate)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))) {
                        return true;
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return false;

    }

    /**
     * get secondary salers order from data valt
     *
     * @param context
     * @param mStrCpGuid
     * @param returnOrderBeanList
     * @return
     * @throws OfflineODataStoreException
     */
    public static ArrayList<ReturnOrderBean> getSSSoListFromDataValt(Context context, String
            mStrCpGuid,
                                                                     ArrayList<ReturnOrderBean> returnOrderBeanList, String mStrBundleRetID) throws
            OfflineODataStoreException {
        ReturnOrderBean returnOrderBean;
        //Check if the offline oData store is initialized
        HashSet<String> mSetSSORef = getSSOInvRefGuid(context, mStrBundleRetID);

        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SOList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                } catch (LogonCoreException e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))) {
                        returnOrderBean = new ReturnOrderBean();
                        returnOrderBean.setDeviceNo(deviceNo);
                        returnOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSSOGuid));
                        returnOrderBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.OrderNo));
                        returnOrderBean.setOrderDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate)));
                        returnOrderBean.setStatusID(fetchJsonHeaderObject.optString(Constants.StatusID));
                        returnOrderBean.setNetAmount(fetchJsonHeaderObject.optString(Constants.NetPrice));
                        returnOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));

                        try {
                            if (mSetSSORef.contains(returnOrderBean.getSSROGUID())) {
                                returnOrderBean.setTempStatus("X");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        returnOrderBeanList.add(returnOrderBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return sortingROList(returnOrderBeanList);

    }

    public static boolean getSSSoListFromDataValt(Context context, String mStrCpGuid) throws
            OfflineODataStoreException {
        ReturnOrderBean returnOrderBean;
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SOList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                } catch (LogonCoreException e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                            && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(Constants.convertStrGUID32to36(mStrCpGuid.toUpperCase()))) {
                        return true;
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return false;

    }

    /**
     * get RO details from data valt
     *
     * @param context
     * @param mDeviceNo
     * @param mStrCpGuid
     * @param returnOrderBeanList
     * @return
     * @throws OfflineODataStoreException
     */
    public static List<ReturnOrderBean> getRODetailsListFromDataValt(Context context, String
            mDeviceNo, String mStrCpGuid, List<ReturnOrderBean> returnOrderBeanList) throws
            OfflineODataStoreException {
        ReturnOrderBean returnOrderBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        try {
            store = LogonCore.getInstance().getObjectFromStore(mDeviceNo);
        } catch (LogonCoreException e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                returnOrderBean = new ReturnOrderBean();

                returnOrderBean.setMaterialNo(singleRow.get(Constants.MaterialNo));
                returnOrderBean.setMaterialDesc(singleRow.get(Constants.MaterialDesc));
                returnOrderBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                returnOrderBean.setsItemNo(singleRow.get(Constants.ItemNo));
                returnOrderBean.setQAQty(singleRow.get(Constants.Quantity));
                returnOrderBean.setNetAmount(singleRow.get(Constants.NetPrice));
                returnOrderBean.setCurrency(singleRow.get(Constants.Currency));
                returnOrderBean.setUom(singleRow.get(Constants.Uom));
                returnOrderBean.setOrderMaterialGroupDesc(singleRow.get(Constants.OrderMatGrpDesc));
//                returnOrderBean.setNetAmount(singleRow.get(Constants.GrossAmount));
                returnOrderBeanList.add(returnOrderBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return returnOrderBeanList;

    }

    public static List<ReturnOrderBean> getSSSODetailsListFromDataValt(Context context, String
            mDeviceNo, String mStrCpGuid, List<ReturnOrderBean> returnOrderBeanList) throws
            OfflineODataStoreException {
        ReturnOrderBean returnOrderBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        try {
            store = LogonCore.getInstance().getObjectFromStore(mDeviceNo);
        } catch (LogonCoreException e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.ITEM_TXT);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                returnOrderBean = new ReturnOrderBean();

                returnOrderBean.setMaterialNo(singleRow.get(Constants.MaterialNo));
                returnOrderBean.setMaterialDesc(singleRow.get(Constants.MaterialDesc));
                returnOrderBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                returnOrderBean.setsItemNo(singleRow.get(Constants.ItemNo));
                returnOrderBean.setQAQty(singleRow.get(Constants.Quantity));
                returnOrderBean.setNetAmount(singleRow.get(Constants.NetPrice));
                returnOrderBean.setCurrency(singleRow.get(Constants.Currency));
                returnOrderBean.setUom(singleRow.get(Constants.Uom));
                returnOrderBean.setOrderMaterialGroupDesc(singleRow.get(Constants.OrderMatGrpDesc));
                returnOrderBean.setSSSOItemGUID(singleRow.get(Constants.SSSOItemGUID));
                returnOrderBean.setBatch(singleRow.get(Constants.Batch));
//                returnOrderBean.setNetAmount(singleRow.get(Constants.GrossAmount));
                returnOrderBeanList.add(returnOrderBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return returnOrderBeanList;

    }

    public static List<ReturnOrderBean> getSecondarySalesOrderDetailsList(String
                                                                                  retailerStockQry, List<ReturnOrderBean> alSOList) throws OfflineODataStoreException {

        if (offlineStore != null) {
            ReturnOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        salesOrderBean = new ReturnOrderBean();


                        property = properties.get(Constants.MaterialNo);
                        salesOrderBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        salesOrderBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.OrderMatGrp);
                        salesOrderBean.setOrderMaterialGroupID((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        salesOrderBean.setsItemNo((String) property.getValue());

                        property = properties.get(Constants.SSSOItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            salesOrderBean.setSSSOItemGUID(mSpItemGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Batch);
                        salesOrderBean.setBatch((String) property.getValue());

                        property = properties.get(Constants.OrderMatGrpDesc);
                        salesOrderBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.Quantity);

                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.Uom);
                        salesOrderBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            salesOrderBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            salesOrderBean.setQAQty(qty);

                        property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        alSOList.add(salesOrderBean);


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alSOList != null && alSOList.size() > 0) {
            Collections.sort(alSOList, new Comparator<ReturnOrderBean>() {
                public int compare(ReturnOrderBean one, ReturnOrderBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getsItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getsItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getsItemNo().compareTo(other.getsItemNo());
                    }
                }
            });

        }

        return alSOList;

    }

    public static String[][] getBeatPlanArray(String routeSchdleQry) throws
            OfflineODataStoreException {
        String[] beatVal[] = null;
        //Check if the offline oData store is initialized
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, routeSchdleQry);
        if (entities != null && entities.size() > 0) {
            beatVal = new String[3][entities.size() + 1];
            beatVal[0][0] = Constants.All;
            beatVal[1][0] = Constants.All;
            beatVal[2][0] = "";
            int incVal = 1;
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RoutId);
                beatVal[0][incVal] = (String) property.getValue();
                property = properties.get(Constants.Description);
                beatVal[1][incVal] = (String) property.getValue();
                property = properties.get(Constants.RouteSchGUID);
                try {
                    ODataGuid mCpGuid = (ODataGuid) property.getValue();
                    beatVal[2][incVal] = mCpGuid.guidAsString36().toUpperCase();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                incVal++;
            }
        }

        return beatVal;
    }

    public static ArrayList<CustomerBean> getRetListByRouteSchudule(String invQry) throws
            OfflineODataStoreException {

        String custListQry = "";
        ArrayList<CustomerBean> custArrayList = new ArrayList<>();
        ArrayList<CustomerBean> alRetailerList = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean customerBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    customerBean = new CustomerBean("");
                    properties = entity.getProperties();
                    property = properties.get(Constants.VisitCPGUID);
                    customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase());
                    custArrayList.add(customerBean);

                }
            }
        }


        if (custArrayList != null && custArrayList.size() > 0) {
            for (int i = 0; i < custArrayList.size(); i++) {
                if (i == 0 && i == custArrayList.size() - 1) {
                    custListQry = custListQry
                            + "(" + Constants.CPGUID + "%20eq%20guid'"
                            + custArrayList.get(i).getCPGUID() + "')";

                } else if (i == 0) {
                    custListQry = custListQry
                            + "(" + Constants.CPGUID + "%20eq%20guid'"
                            + custArrayList.get(i).getCPGUID() + "'";

                } else if (i == custArrayList.size() - 1) {
                    custListQry = custListQry
                            + "%20or%20" + Constants.CPGUID + "%20eq%20guid'"
                            + custArrayList.get(i).getCPGUID() + "')";
                } else {
                    custListQry = custListQry
                            + "%20or%20" + Constants.CPGUID + "%20eq%20guid'"
                            + custArrayList.get(i).getCPGUID() + "'";
                }
            }
        } else {
            custListQry = "";
        }


        try {
            if (!custListQry.equalsIgnoreCase("")) {
                alRetailerList = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter= " + custListQry + " " +
                        " and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
                        " &$orderby=" + Constants.RetailerName + "%20asc", "");
            }

        } catch (OfflineODataStoreException e) {
            LogManager.writeLogError(Constants.error_txt + e.getMessage());
        }

        return alRetailerList;
    }

    public static ArrayList<SKUGroupBean> getMustSellMat(String mustSellQry, String mStrCPGUID) throws
            OfflineODataStoreException {
        Double mDoubTotalSum = 0.0;
        ArrayList<SKUGroupBean> crsSKUGrpList = new ArrayList<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            int incVal = 0;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mustSellQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setSKUGroup(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);
                    skuGrpBean.setMaterialDesc(matSkuDesc);
                    boolean isCrsSkuAval = false;
                    if (tempArrList.size() == 0) {
                        isCrsSkuAval = true;
                    } else if (!tempArrList.contains(orderMatGrpId)) {
                        isCrsSkuAval = true;
                    }

                    if (isCrsSkuAval) {
                        String[][] monthYearVal = UtilConstants.getMonthValues(3);
                        incVal = 0;
                        String[] monthYear = monthYearVal[0][incVal].split("-");

                        String mStrMonthOne = getTotalSumByCondition("" + Constants.TargetItems +
                                "?$select=" + Constants.ActualValue + " &$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId
                                + "' and " + Constants.PartnerGUID + " eq '" + mStrCPGUID.toUpperCase() + "' and " +
                                "" + Constants.Period + " eq '" + monthYear[1] + "" + monthYear[0] + "' ", Constants.ActualValue);

                        incVal++;
                        monthYear = monthYearVal[0][incVal].split("-");

                        String mStrMonthTwo = getTotalSumByCondition("" + Constants.TargetItems +
                                "?$select=" + Constants.ActualValue + " &$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId
                                + "' and " + Constants.PartnerGUID + " eq '" + mStrCPGUID.toUpperCase() + "' and " +
                                "" + Constants.Period + " eq '" + monthYear[1] + "" + monthYear[0] + "' ", Constants.ActualValue);


                        incVal++;
                        monthYear = monthYearVal[0][incVal].split("-");

                        String mStrMonthThree = getTotalSumByCondition("" + Constants.TargetItems +
                                "?$select=" + Constants.ActualValue + " &$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId
                                + "' and " + Constants.PartnerGUID + " eq '" + mStrCPGUID.toUpperCase() + "' and " +
                                "" + Constants.Period + " eq '" + monthYear[1] + "" + monthYear[0] + "' ", Constants.ActualValue);

                        Double mDouSumOfThreeMonth = Double.parseDouble(mStrMonthOne) + Double.parseDouble(mStrMonthTwo) + Double.parseDouble(mStrMonthThree);

                        Double mDouAvg = 0.0;
                        try {
                            mDouAvg = mDouSumOfThreeMonth / 3;
                        } catch (Exception e) {
                            mDouAvg = 0.0;
                        }

                        if (mDouAvg.isInfinite() || mDouAvg.isNaN()) {
                            mDouAvg = 0.0;
                        }
                        mDoubTotalSum = mDoubTotalSum + mDouAvg;
                        skuGrpBean.setAvgThreeMnts(mDouAvg + "");
                        crsSKUGrpList.add(skuGrpBean);
                        tempArrList.add(orderMatGrpId);
                    }
                }
            }
        }


        if (crsSKUGrpList != null && crsSKUGrpList.size() > 0) {
            for (SKUGroupBean skuGroupBean : crsSKUGrpList) {
                Double mDouPerAch = 0.0;
                try {
                    mDouPerAch = (Double.parseDouble(skuGroupBean.getAvgThreeMnts()) / mDoubTotalSum * 100);
                } catch (NumberFormatException e) {
                    mDouPerAch = 0.0;
                }

                if (mDouPerAch.isInfinite() || mDouPerAch.isNaN()) {
                    mDouPerAch = 0.0;
                }

                skuGroupBean.setAvgPerThreeMnts(mDouPerAch + "");
            }
        }

        if (crsSKUGrpList != null && crsSKUGrpList.size() > 0) {
            Collections.sort(crsSKUGrpList, new Comparator<SKUGroupBean>() {
                public int compare(SKUGroupBean one, SKUGroupBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getAvgPerThreeMnts());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Double.parseDouble(one.getAvgPerThreeMnts());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getAvgPerThreeMnts().compareTo(one.getAvgPerThreeMnts());
                    }
                }
            });

        }

        return crsSKUGrpList;

    }

    /**
     * CreateOperation a new entity in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createCustomerComplaints(Hashtable<String, String> table, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createComplaintsEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Complaints,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Complaints),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*create complaints entity*/
    private static ODataEntity createComplaintsEntity(Hashtable<String, String> hashTable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ComplaintEntity);

//                newEntity.getProperties().put(Constants.ComplaintGUID,
//                        new ODataPropertyDefaultImpl(Constants.ComplaintGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.ComplaintGUID))));

                newEntity.getProperties().put(Constants.ComplaintNo,
                        new ODataPropertyDefaultImpl(Constants.ComplaintNo, hashTable.get(Constants.ComplaintNo)));

                newEntity.getProperties().put(Constants.ComplaintCategoryID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintCategoryID, hashTable.get(Constants.ComplaintCategoryID)));

                newEntity.getProperties().put(Constants.ComplainCategoryDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplainCategoryDesc, hashTable.get(Constants.ComplainCategoryDesc)));

                newEntity.getProperties().put(Constants.ComplaintTypeID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintTypeID, hashTable.get(Constants.ComplaintTypeID)));

                newEntity.getProperties().put(Constants.ComplaintTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintTypeDesc, hashTable.get(Constants.ComplaintTypeDesc)));

                newEntity.getProperties().put(Constants.ComplaintPriorityID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintPriorityID, hashTable.get(Constants.ComplaintPriorityID)));

                newEntity.getProperties().put(Constants.ComplaintPriorityDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintPriorityDesc, hashTable.get(Constants.ComplaintPriorityDesc)));

                newEntity.getProperties().put(Constants.SPGUID,
                        new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SPGUID))));

                newEntity.getProperties().put(Constants.SPNo,
                        new ODataPropertyDefaultImpl(Constants.SPNo, hashTable.get(Constants.SPNo)));

                newEntity.getProperties().put(Constants.SPName,
                        new ODataPropertyDefaultImpl(Constants.SPName, hashTable.get(Constants.SPName)));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashTable.get(Constants.CPNo)));

                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashTable.get(Constants.CPName)));

                newEntity.getProperties().put(Constants.Batch,
                        new ODataPropertyDefaultImpl(Constants.Batch, hashTable.get(Constants.Batch)));

                if (hashTable.get(Constants.MFD).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.MFD,
                            new ODataPropertyDefaultImpl(Constants.MFD, UtilConstants.convertDateFormat(hashTable.get(Constants.MFD))));
                }

                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashTable.get(Constants.OrderMaterialGroupID)));

                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashTable.get(Constants.OrderMaterialGroupDesc)));

                newEntity.getProperties().put(Constants.MaterialGrp,
                        new ODataPropertyDefaultImpl(Constants.MaterialGrp, hashTable.get(Constants.MaterialGrp)));

                newEntity.getProperties().put(Constants.MaterialGrpDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialGrpDesc, hashTable.get(Constants.MaterialGrpDesc)));

                newEntity.getProperties().put(Constants.Material,
                        new ODataPropertyDefaultImpl(Constants.Material, hashTable.get(Constants.Material)));

                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashTable.get(Constants.MaterialDesc)));

                newEntity.getProperties().put(Constants.ComplaintDate,
                        new ODataPropertyDefaultImpl(Constants.ComplaintDate, UtilConstants.convertDateFormat(hashTable.get(Constants.ComplaintDate))));

                newEntity.getProperties().put(Constants.ComplaintStatusID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintStatusID, hashTable.get(Constants.ComplaintStatusID)));

                newEntity.getProperties().put(Constants.ComplaintStatusDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintStatusDesc, hashTable.get(Constants.ComplaintStatusDesc)));
                if (!hashTable.get(Constants.Quantity).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.Quantity,
                            new ODataPropertyDefaultImpl(Constants.Quantity, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.Quantity)))));
                }
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashTable.get(Constants.UOM)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.CreatedBy,
                        new ODataPropertyDefaultImpl(Constants.CreatedBy, hashTable.get(Constants.CreatedBy)));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Returns list of actual target by order material group*/
    public static ArrayList<MyTargetsBean> getActualTargetByOrderMatGrp(Context context, String
            mStrCPDMSDIV) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();

        // TODO get actual target values from offline db

        String mStrSSSOQry = getOrderValByOrderMatGrpQry(Constants.SSInvoices + "?$filter=" + Constants.InvoiceDate +
                " ge datetime'" + Constants.getFirstDateOfCurrentMonth() + "' and " + Constants.InvoiceDate + " lt datetime'" + UtilConstants.getNewDate() + "' and " + mStrCPDMSDIV + " ", Constants.InvoiceGUID);

        if (!mStrSSSOQry.equalsIgnoreCase("")) {
            try {
                ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getActualValueByOrderMatGrp(Constants.SSInvoiceItemDetails + "?$filter= " + mStrSSSOQry + " ");

                if (myTargetsBeanArrayList != null) {
                    if (myTargetList != null && myTargetList.size() > 0) {
                        myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
                    } else {
                        myTargetList.addAll(myTargetsBeanArrayList);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        return myTargetList;
    }

    public static String getOrderValByOrderMatGrpQry(String orderMatQry, String mStrColumnval) throws
            OfflineODataStoreException {

        String sssoListQry = "";
        ArrayList<SKUGroupBean> sssoArrayList = new ArrayList<>();
        ArrayList<MyTargetsBean> alRetailerList = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGroupBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, orderMatQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGroupBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(mStrColumnval);
                    ODataGuid mSSSoGuid = null;
                    try {
                        mSSSoGuid = (ODataGuid) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    skuGroupBean.setSSSOGuid(mSSSoGuid.guidAsString36().toUpperCase());
                    sssoArrayList.add(skuGroupBean);
                }
            }
        }


        if (sssoArrayList != null && sssoArrayList.size() > 0) {
            for (int i = 0; i < sssoArrayList.size(); i++) {
                if (i == 0 && i == sssoArrayList.size() - 1) {
                    sssoListQry = sssoListQry
                            + "(" + mStrColumnval + "%20eq%20guid'"
                            + sssoArrayList.get(i).getSSSOGuid() + "')";

                } else if (i == 0) {
                    sssoListQry = sssoListQry
                            + "(" + mStrColumnval + "%20eq%20guid'"
                            + sssoArrayList.get(i).getSSSOGuid() + "'";

                } else if (i == sssoArrayList.size() - 1) {
                    sssoListQry = sssoListQry
                            + "%20or%20" + mStrColumnval + "%20eq%20guid'"
                            + sssoArrayList.get(i).getSSSOGuid() + "')";
                } else {
                    sssoListQry = sssoListQry
                            + "%20or%20" + mStrColumnval + "%20eq%20guid'"
                            + sssoArrayList.get(i).getSSSOGuid() + "'";
                }
            }
        } else {
            sssoListQry = "";
        }

        return sssoListQry;
    }

    public static ArrayList<MyTargetsBean> getActualValueByOrderMatGrp(String mSSSOQry) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mSSSOQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();

                MyTargetsBean myTargetBean = new MyTargetsBean();

                Double mDobNetPrice = 0.0;

                property = properties.get(Constants.NetAmount);
                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobNetPrice = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobNetPrice = 0.0;
                    e.printStackTrace();
                }

                if (mDobNetPrice.isNaN() || mDobNetPrice.isInfinite()) {
                    mDobNetPrice = 0.0;
                }

                myTargetBean.setMTDA(mDobNetPrice + "");

                property = properties.get(Constants.OrderMaterialGroup);
                myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupDesc);
                myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                arrayList.add(myTargetBean);
            }
        }
        return arrayList;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<MyTargetsBean> getDeviceOrderAmtByOrderMatGrp(String
                                                                                  createType, Context context, String mStrFirstDateMonth) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrFirstDateMonth.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)
                            /*&& createdOn[0].equalsIgnoreCase(splitToday[0])*/) {
                            try {
                                Date start = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH)
                                        .parse(splitToday[0]);
                                Date end = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH)
                                        .parse(createdOn[0]);
                               // System.out.println(start);
                              //  System.out.println(end);
                                if (start.compareTo(end) == 0 || start.compareTo(end) < 0) {

                                    mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                                    String itemsString = fetchJsonHeaderObject.getString(Constants.ItemsText);
                                    arrtable = UtilConstants.convertToArrayListMap(itemsString);
                                    for (int i = 0; i < arrtable.size(); i++) {
                                        HashMap<String, String> singleRow = arrtable.get(i);
                                        MyTargetsBean myTargetsBean = new MyTargetsBean();
                                        myTargetsBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                                        myTargetsBean.setMTDA(singleRow.get(Constants.NetPrice));
                                        arrayList.add(myTargetsBean);
                                    }

                                }

                            } catch (ParseException e) {
                                e.printStackTrace();
                            }

                           /* mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ItemsText);
                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                MyTargetsBean myTargetsBean = new MyTargetsBean();
                                myTargetsBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                                myTargetsBean.setMTDA(singleRow.get(Constants.NetPrice));
                                arrayList.add(myTargetsBean);
                            }*/
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return arrayList;
    }

    public static String[][] getStockOwnerGroups(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            HashMap<String, String> mapSKU = new HashMap<>();
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    String skuGrp = "";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
//                        configVal[0][incVal] = (String) property.getValue();
                        skuGrp = (String) property.getValue();
                        property = properties.get(Constants.MaterialDesc);
//                        configVal[1][incVal] = (String) property.getValue();
                        mapSKU.put(skuGrp, (String) property.getValue());
//                        incVal++;
                    }
                    if (!mapSKU.isEmpty()) {
                        configVal = new String[2][mapSKU.size() + 1];
                        configVal[0][0] = "None";
                        configVal[1][0] = "None";

                        int incVal = 1;
                        Iterator iterator = mapSKU.keySet().iterator();
                        while (iterator.hasNext()) {
                            String key = iterator.next().toString();
                            configVal[0][incVal] = key;
                            configVal[1][incVal] = mapSKU.get(key);
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * get alerts
     */
    public static ArrayList<BirthdaysBean> getAlerts(String alertQuery, ArrayList<BirthdaysBean> alertsList) throws OfflineODataStoreException {

        if (offlineStore != null) {
            BirthdaysBean alertsBean;
            if (alertsList == null) {
                alertsList = new ArrayList<>();
            }
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(alertQuery);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        alertsBean = new BirthdaysBean();
                        property = properties.get(Constants.AlertGUID);
                        alertsBean.setAlertGUID((String) property.getValue());
                        property = properties.get(Constants.AlertText);
                        alertsBean.setAlertText((String) property.getValue());
                        property = properties.get(Constants.Application);
                        alertsBean.setApplication((String) property.getValue());
                        property = properties.get(Constants.PartnerType);
                        alertsBean.setPartnerType((String) property.getValue());
                        property = properties.get(Constants.AlertType);
                        alertsBean.setAlertType((String) property.getValue());
                        property = properties.get(Constants.AlertTypeDesc);
                        alertsBean.setAlertTypeDesc((String) property.getValue());
                        property = properties.get(Constants.ObjectType);
                        alertsBean.setObjectType((String) property.getValue());
                        property = properties.get(Constants.ObjectID);
                        alertsBean.setObjectID((String) property.getValue());
                        property = properties.get(Constants.ObjectSubID);
                        alertsBean.setObjectSubID((String) property.getValue());
                        property = properties.get(Constants.CreatedBy);
                        alertsBean.setCreatedBy((String) property.getValue());
                        alertsBean.setAlertStatus("");
                        alertsList.add(alertsBean);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }


        return alertsList;
    }

    public static ArrayList<ReturnOrderBean> getCustomerComplaintList(String retailerStockQry, ArrayList<ReturnOrderBean> returnOrderList) throws
            OfflineODataStoreException {

        if (offlineStore != null) {
            ReturnOrderBean returnOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        returnOrderBean = new ReturnOrderBean();

                        property = properties.get(Constants.ComplaintGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            returnOrderBean.setSSROGUID(mCpGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.ComplaintNo);
                        returnOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.ComplaintStatusID);
                        returnOrderBean.setStatusID((String) property.getValue());

                        /*property = properties.get(Constants.Currency);
                        returnOrderBean.setCurrency((String) property.getValue());*/

                        property = properties.get(Constants.ComplaintStatusDesc);
//                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        returnOrderBean.setNetAmount((String) property.getValue());

                        property = properties.get(Constants.ComplaintDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        returnOrderBean.setOrderDate(convertDateFormat);


                        returnOrderList.add(returnOrderBean);


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return sortingROList(returnOrderList);

    }

    /*expense type */
    public static String[][] getConfigExpenseType(String qry, String typeSetVal) throws
            OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        String[] temp[] = null;
        HashSet<String> contentId = new HashSet<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = Constants.None;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ExpenseType);
                        String expenseType = (String) property.getValue();
                        if (!contentId.contains(expenseType)) {
                            configVal[0][incVal] = expenseType;
                            property = properties.get(Constants.ExpenseTypeDesc);
                            configVal[1][incVal] = (String) property.getValue();
                            contentId.add(expenseType);
                            incVal++;
                        }
                    }
                    temp = new String[2][contentId.size() + 1];
                    temp[0][0] = "";
                    temp[1][0] = Constants.None;
                    int tempI = 1;
                    for (String stringValue : contentId) {
                        temp[0][tempI] = configVal[0][tempI];
                        temp[1][tempI] = configVal[1][tempI];
                        tempI++;
                    }
//                    if(configVal[0].c)

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return temp;

    }

    /*expense*/
    public static String[][] getConfigExpense(String qry, String typeSetVal) throws
            OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[20][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = "";
                    configVal[3][0] = Constants.None;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ExpenseType);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ExpenseTypeDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemType);
                        configVal[2][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemTypeDesc);
                        configVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseFreq);
                        configVal[4][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseFreqDesc);
                        configVal[5][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemCat);
                        configVal[6][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemCatDesc);
                        configVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DefaultItemCat);
                        configVal[8][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DefaultItemCatDesc);
                        configVal[9][incVal] = (String) property.getValue();

                        property = properties.get(Constants.AmountCategory);
                        configVal[10][incVal] = (String) property.getValue();

                        property = properties.get(Constants.AmountCategoryDesc);
                        configVal[11][incVal] = (String) property.getValue();

                        property = properties.get(Constants.MaxAllowancePer);
                        BigDecimal maxAllowance = (BigDecimal) property.getValue();

                        if (maxAllowance != null) {
                            configVal[12][incVal] = maxAllowance.toString();
                        } else {
                            configVal[12][incVal] = "";
                        }
                        property = properties.get(Constants.ExpenseQuantityUom);
                        configVal[13][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ItemFieldSet);
                        configVal[14][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ItemFieldSetDesc);
                        configVal[15][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Allowance);
                        BigDecimal allowance = (BigDecimal) property.getValue();

                        if (allowance != null) {
                            configVal[16][incVal] = allowance.toString();
                        } else {
                            configVal[16][incVal] = "";
                        }

                        property = properties.get(Constants.IsSupportDocReq);
                        configVal[17][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Currency);
                        configVal[18][incVal] = (String) property.getValue();

                        property = properties.get(Constants.IsRemarksReq);
                        configVal[19][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /*get route for expense*/
    public static String[][] getBeatsArray(String routeSchdleQry) throws
            OfflineODataStoreException {
        String[] beatVal[] = null;
        //Check if the offline oData store is initialized
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, routeSchdleQry);
        if (entities != null && entities.size() > 0) {
            beatVal = new String[3][entities.size() + 1];
            beatVal[0][0] = "";
            beatVal[1][0] = Constants.None;
            beatVal[2][0] = "";
            int incVal = 1;
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RoutId);
                beatVal[0][incVal] = (String) property.getValue();
                property = properties.get(Constants.Description);
                beatVal[1][incVal] = (String) property.getValue();
                property = properties.get(Constants.RouteSchGUID);
                try {
                    ODataGuid mCpGuid = (ODataGuid) property.getValue();
                    beatVal[2][incVal] = mCpGuid.guidAsString36().toUpperCase();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                incVal++;
            }
        }

        return beatVal;
    }

    public static String[][] getConfigExpenseAllwance(String qry, String typeSetVal) throws
            OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ConveyanceAmt);
                        BigDecimal conveyanceAmt = (BigDecimal) property.getValue();

                        if (conveyanceAmt != null) {
                            configVal[0][incVal] = conveyanceAmt.toString();
                        } else {
                            configVal[0][incVal] = "";
                        }
                        property = properties.get(Constants.Currency);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * Update an existing alert in the local database for Alert
     */
    public static void updateAlert(BirthdaysBean birthdaysBean) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateAlertEntity(birthdaysBean);
            //Send the request to update visit in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), null, Constants.Alerts), null);

//            offlineStore.executeUpdateEntity(newEntity, null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*Creates Entity to update visit in offline store*/
    private static ODataEntity updateAlertEntity(BirthdaysBean birthdaysBean) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.AlertEntity);

            try {
                offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Optional);
            } catch (ODataException e) {
                e.printStackTrace();
            }
            newEntity.getProperties().put(Constants.AlertGUID,
                    new ODataPropertyDefaultImpl(Constants.AlertGUID, birthdaysBean.getAlertGUID()));
            newEntity.getProperties().put(Constants.Application,
                    new ODataPropertyDefaultImpl(Constants.Application, birthdaysBean.getApplication()));
            newEntity.getProperties().put(Constants.PartnerType,
                    new ODataPropertyDefaultImpl(Constants.PartnerType, birthdaysBean.getPartnerType()));
            newEntity.getProperties().put(Constants.PartnerID,
                    new ODataPropertyDefaultImpl(Constants.PartnerID, birthdaysBean.getPartnerID()));
            newEntity.getProperties().put(Constants.AlertType,
                    new ODataPropertyDefaultImpl(Constants.AlertType, birthdaysBean.getAlertType()));
            newEntity.getProperties().put(Constants.AlertTypeDesc,
                    new ODataPropertyDefaultImpl(Constants.AlertTypeDesc, birthdaysBean.getAlertTypeDesc()));
       /*     newEntity.getProperties().put(Constants.LOGINID,
                    new ODataPropertyDefaultImpl(Constants.LOGINID, birthdaysBean.getLoginID()));*/
            newEntity.getProperties().put(Constants.ObjectType,
                    new ODataPropertyDefaultImpl(Constants.ObjectType, birthdaysBean.getObjectType()));
            newEntity.getProperties().put(Constants.ObjectID,
                    new ODataPropertyDefaultImpl(Constants.ObjectID, birthdaysBean.getObjectID()));
            newEntity.getProperties().put(Constants.ObjectSubID,
                    new ODataPropertyDefaultImpl(Constants.ObjectSubID, birthdaysBean.getObjectSubID()));
            newEntity.getProperties().put(Constants.CreatedBy,
                    new ODataPropertyDefaultImpl(Constants.CreatedBy, birthdaysBean.getCreatedBy()));
            newEntity.getProperties().put(Constants.AlertText,
                    new ODataPropertyDefaultImpl(Constants.AlertText, birthdaysBean.getAlertText()));
            newEntity.setResourcePath(Constants.Alerts + "(" + Constants.AlertGUID + "='" + birthdaysBean.getAlertGUID() + "'," + Constants.Application + "='" + birthdaysBean.getApplication() + "')",
                    Constants.Alerts + "(" + Constants.AlertGUID + "='" + birthdaysBean.getAlertGUID() + "'," + Constants.Application + "='" + birthdaysBean.getApplication() + "')");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static void createExpensesingItem
            (HashMap<String, String> tableItem, HashMap<String, String> tableHdr, UIListener
                    uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createExpenseImageItemEntity(tableItem, tableHdr);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ExpenseDocuments));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*create expense*/
    private static ODataRequestParamSingle createExpenseImageItemEntity
    (HashMap<String, String> masterItem, HashMap<String, String> hashTblItm) throws
            ODataParserException {
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.DocumentLink), hashTblItm.get(Constants.DocumentMimeType));
                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.ExpenseDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.ExpenseItemDetails + "(guid'" + hashTblItm.get(Constants.ExpenseItemGUID) + "')/" + Constants.ExpenseDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", Constants.ExpenseDocumentID + ":" + hashTblItm.get(Constants.ExpenseDocumentID).replace("-", "").toUpperCase() + ","
                        + Constants.ExpenseItemGUID + ":" + hashTblItm.get(Constants.ExpenseItemGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentStore + ": A");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    /*expense check data from datavalt*/
    public static boolean checkDatavaltDataisPresent(Context context, String date, String
            expenseTypeId) {

        boolean isDataPresent = false;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseDate).equalsIgnoreCase(date) &&
                                fetchJsonHeaderObject.getString(Constants.ExpenseType).equalsIgnoreCase(expenseTypeId)) {
                            return true;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return isDataPresent;
    }

    /*expense monthly check data from datavalt*/
    public static boolean checkDatavaltMonthCompare(Context context, String date, String
            expenseTypeId) throws ParseException {

        boolean isDataPresent = false;
        Calendar calendar1 = Calendar.getInstance();
        Calendar calendar2 = Calendar.getInstance();

        Date date1 = Constants.convertStringToDate(date);
        calendar1.setTime(date1);
        Date date2;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        date2 = Constants.convertStringToDate(fetchJsonHeaderObject.getString(Constants.ExpenseDate));
                        calendar2.setTime(date2);
                        int month2 = calendar2.get(Calendar.MONTH) + 1;
                        int year2 = calendar2.get(Calendar.YEAR);
                        int month1 = calendar1.get(Calendar.MONTH);
                        int year1 = calendar1.get(Calendar.YEAR);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseType).equalsIgnoreCase(expenseTypeId) && month2 > month1 && year2 == year1) {
                            return true;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return isDataPresent;
    }

    public static ArrayList<SchemeBean> getSchemeGrp(String schemeQry) throws
            OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        ArrayList<String> tempArrList = new ArrayList<>();
        double mDouMustSellAvgContribution = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeName);
                    schemeBean.setSchemeDesc((String) property.getValue());
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());
                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;
                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeGUID(mSchemeGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.IsHeaderBasedSlab);
                    schemeBean.setIsHeaderBasedSlab((String) property.getValue());
                    property = properties.get(Constants.OrgScopeID);
                    schemeBean.setOrgScopeID((String) property.getValue());
                    property = properties.get(Constants.OrgScopeDesc);
                    schemeBean.setOrgScopeDesc((String) property.getValue());
                    schemeList.add(schemeBean);
                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeWindowDisplay(String schemeCatId, String
            mStrBundleCPGUID32,
                                                               String parentId, String parentTypeId, String cpTypeId,
                                                               ArrayList<SchemeBean> schemeList, String mDMSDivQry, String mDMSDIVSchSalQry) throws
            OfflineODataStoreException {
        String spGuid = "";
        try {
            spGuid = OfflineManager.getGuidValueByColumnName(Constants.SalesPersons + "?$select=" + Constants.SPGUID + " ", Constants.SPGUID);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ArrayList<CPDMSDivisionBean> cpDMSDivisionList = new ArrayList<>();
        if (!mStrBundleCPGUID32.equalsIgnoreCase("")) {
            cpDMSDivisionList = OfflineManager.getCPDMSDivisionList(Constants.CPDMSDivisions + "?$filter=" + Constants.PartnerMgrGUID + " eq guid'" + spGuid.toUpperCase() + "' and " + Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(mStrBundleCPGUID32) + "' and " + mDMSDivQry + " ");
        } else {
            cpDMSDivisionList = OfflineManager.getCPDMSDivisionList(Constants.CPDMSDivisions + "?$filter=" + mDMSDivQry + "");//+"?$select=DMSDivision,Group1,Group2,Group3,Group4"
        }

        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;

            HashSet<String> hashSet = new HashSet<>();
            hashSet.add(schemeCatId);
            List<ODataEntity> entities = GetSalesOrderListBasedOnScheme.getValidScheme(hashSet);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeName);
                    schemeBean.setSchemeDesc((String) property.getValue());
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());
                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;
                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeGUID(mSchemeGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.IsHeaderBasedSlab);
                    schemeBean.setIsHeaderBasedSlab((String) property.getValue());
                    property = properties.get(Constants.OrgScopeID);
                    schemeBean.setOrgScopeID((String) property.getValue());
                    property = properties.get(Constants.OrgScopeDesc);
                    schemeBean.setOrgScopeDesc((String) property.getValue());
                    property = properties.get(Constants.SchemeID);
                    schemeBean.setSchemeID((String) property.getValue());
                    boolean displayItem = GetSalesOrderListBasedOnScheme.checkThreeCondition(schemeBean.getSchemeGUID(), mStrBundleCPGUID32, parentId, parentTypeId, cpTypeId, spGuid, mDMSDIVSchSalQry, cpDMSDivisionList);
                    if (displayItem) {
                        ArrayList<SchemeBean> getSchemeCPs = getSchemeCPs(Constants.SchemeCPs + "?$filter= " + Constants.SchemeGUID + " eq guid'" + schemeBean.getSchemeGUID() + "' and CPGUID eq '" + mStrBundleCPGUID32 + "' &$top=1", true);
                        if (!getSchemeCPs.isEmpty()) {
                            schemeBean.setSecondTime(true);
                        } else {
                            schemeBean.setSecondTime(false);
                        }
                        schemeList.add(schemeBean);
                    }


                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeItemDetails(String schemeQry) throws
            OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SKUGroupID);
                    schemeBean.setSKUGroupID((String) property.getValue());
                    property = properties.get(Constants.SKUGroupDesc);
                    schemeBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.SchemeItemGUID);
                    ODataGuid mSchItemGuid = null;
                    try {
                        mSchItemGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeItemGUID(mSchItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    schemeList.add(schemeBean);
                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeSalesArea(String schemeQry,
                                                           boolean singleReturnType) throws OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SalesOrgDesc);
                    schemeBean.setSalesOrgDesc((String) property.getValue());
                    property = properties.get(Constants.DistributionChannelDesc);
                    schemeBean.setDistributionChannelDesc((String) property.getValue());
                    property = properties.get(Constants.DivisionDesc);
                    schemeBean.setDivisionDesc((String) property.getValue());
                    property = properties.get(Constants.DMSDivisionDesc);
                    schemeBean.setDMSDivisionDesc((String) property.getValue());
                    property = properties.get(Constants.DMSDivisionID);
                    schemeBean.setDMSDivisionID((String) property.getValue());
                    schemeList.add(schemeBean);
                    if (singleReturnType) {
                        break;
                    }
                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeGeoArea(String schemeQry,
                                                         boolean singleReturnType) throws OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.GeographyValueID);
                    schemeBean.setSchemeValueID((String) property.getValue() != null ? (String) property.getValue() : "");
                    property = properties.get(Constants.GeographyLevelDesc);
                    schemeBean.setSchemeLevelID((String) property.getValue() != null ? (String) property.getValue() : "");
                    property = properties.get(Constants.GeographyScopeID);
                    String mStrGeographyScopeID = (String) property.getValue();
                    property = properties.get(Constants.GeographyLevelID);
                    String mStrGeographyLevelID = (String) property.getValue();
                    property = properties.get(Constants.GeographyTypeID);
                    String mStrGeographyTypeID = (String) property.getValue();
                    String mStrGeoType = getValueByColumnName(Constants.ConfigTypesetTypes + "?$filter= "
                            + Constants.Types + " eq '" + mStrGeographyTypeID + "' and "
                            + Constants.Typeset + " eq '" + Constants.PROP_SCGOTY + "' ", Constants.TypesName);
                    property = properties.get(Constants.GeographyTypeDesc);
                    if (mStrGeoType.equalsIgnoreCase(Constants.Zone)) {
                        schemeBean.setZone((String) property.getValue());
                    } else if (mStrGeoType.equalsIgnoreCase(Constants.Region)) {
                        schemeBean.setRegion((String) property.getValue());
                    } else if (mStrGeoType.equalsIgnoreCase(Constants.Area)) {
                        schemeBean.setArea((String) property.getValue());
                    } else if (mStrGeoType.equalsIgnoreCase(Constants.HeadQuarter)) {
                        schemeBean.setHeadQuarter((String) property.getValue());
                    } else if (mStrGeoType.equalsIgnoreCase(Constants.Depot)) {
                        schemeBean.setDepot((String) property.getValue());
                    }

                    String mStrGeographyMapping = getValueByColumnName(Constants.CPGeoClassifications + "?$filter= "
                            + Constants.GeographyScopeID + " eq '" + mStrGeographyScopeID + "' and "
                            + Constants.GeographyLevelID + " eq '" + mStrGeographyLevelID + "' and "
                            + Constants.GeographyTypeID + " eq '" + mStrGeographyTypeID + "' ", Constants.GeographyMapping);
                    schemeBean.setGeographyMapping(mStrGeographyMapping);
                    schemeList.add(schemeBean);
                    if (singleReturnType) {
                        break;
                    }
                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeCPs(String schemeQry, boolean singleReturnType) throws
            OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.CPGUID);
                    String mStrCPGUID = (String) property.getValue();

                    property = properties.get(Constants.CPTypeID);
                    String mStrCPTypeID = (String) property.getValue();
                    schemeBean.setCPTypeID(mStrCPTypeID);
                    schemeBean.setSchemeGUID(mStrCPGUID);
                    String mStrCPName = "";
                    if (mStrCPTypeID.equalsIgnoreCase("01")) {
                        mStrCPName = getValueByColumnName(Constants.Customers + "?$filter= "
                                + Constants.CustomerNo + " eq '" + mStrCPGUID + "' ", Constants.Name);
                    } else if (mStrCPTypeID.equalsIgnoreCase("02")) {
                        mStrCPName = getValueByColumnName(Constants.ChannelPartners + "?$filter= "
                                + Constants.CPNo + " eq '" + mStrCPGUID + "' ", Constants.Name);
                    }
                    schemeBean.setSchemeCPName(mStrCPName);
                    property = properties.get(Constants.IsExcluded);
                    schemeBean.setIsExclude((String) property.getValue());
                    schemeList.add(schemeBean);
                    if (singleReturnType) {
                        break;
                    }
                }
            }
        }
        return schemeList;

    }

    public static ArrayList<SchemeBean> getSchemeSlabs(String schemeQry) throws
            OfflineODataStoreException {

        ArrayList<SchemeBean> schemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;


            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.FromQty);
                    try {
                        BigDecimal mBigDecFromQty = (BigDecimal) property.getValue();
                        schemeBean.setFromQty(mBigDecFromQty.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setFromQty("");
                    }

                    property = properties.get(Constants.ToQty);
                    try {
                        BigDecimal mBigDecToQty = (BigDecimal) property.getValue();
                        schemeBean.setToQty(mBigDecToQty.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setToQty("");
                    }

                    property = properties.get(Constants.FromValue);
                    try {
                        BigDecimal mBigDecFromValue = (BigDecimal) property.getValue();
                        schemeBean.setFromValue(mBigDecFromValue.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setFromValue("");
                    }

                    property = properties.get(Constants.ToValue);
                    try {
                        BigDecimal mBigDecToValue = (BigDecimal) property.getValue();
                        schemeBean.setToValue(mBigDecToValue.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setToValue("");
                    }

                   /* property = properties.get(Constants.PayoutPerc);
                    try {
                        BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                        schemeBean.setPayoutPerc( mBigDecPayoutPerc.doubleValue()+"");
                    } catch (Exception e) {
                        schemeBean.setPayoutPerc("");
                    }

                    property = properties.get(Constants.PayoutAmount);
                    try {
                        BigDecimal mBigDecPayoutAmount = (BigDecimal) property.getValue();
                        schemeBean.setPayoutAmount( mBigDecPayoutAmount.doubleValue()+"");
                    } catch (Exception e) {
                        schemeBean.setPayoutAmount("");
                    }*/
                    property = properties.get(Constants.SlabRuleID);
                    String mStrSlabRuleId = (String) property.getValue();

                    property = properties.get(Constants.SlabRuleDesc);

                    String mStrSlabRuleDesc = (String) property.getValue();

                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        schemeBean.setSchemeOffer(mStrSlabRuleDesc);
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        property = properties.get(Constants.SKUGroupID);
                        schemeBean.setSchemeOffer((String) property.getValue() + " " + Constants.Free_Txt);
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        schemeBean.setSchemeOffer((String) property.getValue() + " " + Constants.Free_Txt);
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        property = properties.get(Constants.PayoutPerc);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setSchemeOffer(mBigDecPayoutPerc.doubleValue() + " " + mStrSlabRuleDesc);
                        } catch (Exception e) {
                            schemeBean.setSchemeOffer("");
                        }

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        property = properties.get(Constants.PayoutAmount);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setSchemeOffer(mBigDecPayoutPerc.doubleValue() + " " + mStrSlabRuleDesc);
                        } catch (Exception e) {
                            schemeBean.setSchemeOffer("");
                        }
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        property = properties.get(Constants.NoOfCards);
                        schemeBean.setSchemeOffer((String) property.getValue() + " " + mStrSlabRuleDesc + " " + Constants.Free_Txt);
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        property = properties.get(Constants.FreeArticle);
                        schemeBean.setSchemeOffer((String) property.getValue() + " " + mStrSlabRuleDesc);
                    }
                    schemeBean.setSlabRuleDesc(mStrSlabRuleDesc);
                    schemeList.add(schemeBean);
                }
            }
        }
        return schemeList;

    }

    public static ArrayList<String> getOrderMatGrp(String mStrQry) {
        ArrayList<String> alOrderMatGrp = new ArrayList<>();
        Set mOrderMatGrp = new HashSet();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.OrderMaterialGroupID);

                boolean isCrsSkuAval = false;
                if (mOrderMatGrp.size() == 0) {
                    isCrsSkuAval = true;
                } else if (!mOrderMatGrp.contains((String) property.getValue())) {
                    isCrsSkuAval = true;
                }
                if (isCrsSkuAval) {
                    alOrderMatGrp.add((String) property.getValue());
                    mOrderMatGrp.add((String) property.getValue());
                }
            }
        }

        return alOrderMatGrp;
    }

    public static SchemeBean getSecondarySchemeSlabPer(String schemeQry, String
            mStrOrderQty, String mStrSchemeGUID,
                                                       String schemeRelese, String[] mStrCRSSKUGrpOrMatNo, String
                                                               isHeaderBasedScheme, SchemeBean schemeItemBean) throws OfflineODataStoreException {
        SchemeBean schemeBean = null;
        SchemeBean schemeBeanVal = null;
        String mStrSaleUnitID = "";
        String mStrSlabUnitId = "";
        Double mDouCBBQty = 0.0;
        String mOrderVal = "0";

//        ArrayList<String> alColumnNames =new ArrayList<>();
//        alColumnNames.add(ConstantsUtils.OnSaleOfCatID);
//        alColumnNames.add(ConstantsUtils.FreeMatCritria);


//        ArrayList<String> alGetSchItemValues=null;
//        alGetSchItemValues = getValueStrByColumnNames(Constants.SchemeItemDetails + "?$select=" +
//                ConstantsUtils.OnSaleOfCatID + ","+ConstantsUtils.FreeMatCritria +" &$filter= "
//                + Constants.SchemeGUID + " eq guid'" + mStrSchemeGUID.toUpperCase() + "' ",alColumnNames);


//        mStrSlabUnitId = getValueByColumnName(Constants.Schemes+"?$select = "+Constants.TargetBasedID+" &$filter="
//                + Constants.SchemeGUID+" eq guid'"+mStrSchemeGUID.toUpperCase()+"'",Constants.TargetBasedID);
        mStrSlabUnitId = Constants.HashMapSchemeValuesBySchemeGuid.get(mStrSchemeGUID.toUpperCase()).getTargetBasedID();

//        ArrayList<String> alSchColumnNames =new ArrayList<>();
//        alSchColumnNames.add(Constants.IsIncludingPrimary);
//        alSchColumnNames.add(Constants.SchemeTypeID);
//
//        ArrayList<String> alGetSchValues=null;
//        alGetSchValues = getValueStrByColumnNames(Constants.Schemes + "?$select=" +
//                Constants.IsIncludingPrimary + ","+Constants.SchemeTypeID +" &$filter= "
//                + Constants.SchemeGUID + " eq guid'" + mStrSchemeGUID.toUpperCase() + "' ",alSchColumnNames);

        ArrayList<SchemeBean> alSchemeList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    Double mDouFromQty = 0.0, mDouToQty = 0.0;
                    properties = entity.getProperties();

                    schemeBean.setIsHeaderBasedSlab(isHeaderBasedScheme);

//                    if(alGetSchValues!=null && alGetSchValues.size()>0){
                    try {
//                            schemeBean.setIsIncludingPrimary(alGetSchValues.get(0));
                        schemeBean.setIsIncludingPrimary(Constants.HashMapSchemeValuesBySchemeGuid.get(mStrSchemeGUID.toUpperCase()).getIsIncludingPrimary());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
//                            schemeBean.setSchemeTypeID(alGetSchValues.get(1));
                        schemeBean.setSchemeTypeID(Constants.HashMapSchemeValuesBySchemeGuid.get(mStrSchemeGUID.toUpperCase()).getSchemeTypeID());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    }
//                    if(alGetSchItemValues!=null && alGetSchItemValues.size()>0){
                    try {
//                            schemeBean.setOnSaleOfCatID(alGetSchItemValues.get(0));
                        schemeBean.setOnSaleOfCatID(schemeItemBean.getOnSaleOfCatID());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
//                            schemeBean.setFreeMatCritria(alGetSchItemValues.get(1));
                        schemeBean.setFreeMatCritria(schemeItemBean.getFreeMatCritria());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    }
                    if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.ToValue);
                    } else {
                        property = properties.get(Constants.ToQty);
                    }

                    try {
                        BigDecimal mBigDecToQty = (BigDecimal) property.getValue();
                        schemeBean.setToQty(mBigDecToQty + "");
                        mDouToQty = mBigDecToQty.doubleValue();
                    } catch (Exception e) {
                        schemeBean.setToQty("");
                    }
                    if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.FromValue);
                    } else {
                        property = properties.get(Constants.FromQty);
                    }

                    try {
                        BigDecimal mBigDecFromQty = (BigDecimal) property.getValue();
                        schemeBean.setFromQty(mBigDecFromQty + "");
                        mDouFromQty = mBigDecFromQty.doubleValue();
                    } catch (Exception e) {
                        schemeBean.setFromQty("");
                    }
                    schemeBean.setSchemeGuid(mStrSchemeGUID);
                    schemeBean.setFlag(Constants.X);
                    property = properties.get(Constants.SlabTypeID);
                    schemeBean.setSlabTypeID((String) property.getValue());
                    property = properties.get(Constants.SlabTypeDesc);
                    schemeBean.setSlabTypeDesc((String) property.getValue());
                    property = properties.get(Constants.SlabRuleID);
                    String mStrSlabRuleId = (String) property.getValue();
                    property = properties.get(Constants.SaleUnitID);
                    mStrSaleUnitID = (String) property.getValue();
                    property = properties.get(Constants.SlabRuleDesc);
                    String mStrSlabRuleDesc = (String) property.getValue();


                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.Material_Desc);
                        schemeBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.Material_No);
                        schemeBean.setMaterialNo((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.SKUGroupID);
                        schemeBean.setSKUGroupID((String) property.getValue());

                        property = properties.get(Constants.SlabGUID);
                        ODataGuid mSchSlabGUID = null;
                        try {
                            mSchSlabGUID = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.SKUGroupID);
                        String mStrSKUGroupID = (String) property.getValue();

                        String materialDesc = getValueByColumnName(Constants.SchemeFreeMatGrpMaterials + "?$select=" + Constants.MaterialGrpDesc + " &$filter = "
                                + Constants.SchFreeMatGrpGUID + " eq guid'" + Constants.convertStrGUID32to36(mStrSKUGroupID) + "' &$orderby = ItemNo asc &$top=1", Constants.MaterialGrpDesc);

                        schemeBean.setSKUGroupDesc(materialDesc);

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        schemeBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.OrderMaterialGroupID);
                        schemeBean.setOrderMaterialGroupID((String) property.getValue());
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        property = properties.get(Constants.PayoutPerc);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutPerc(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setPayoutPerc("0");
                        }

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        property = properties.get(Constants.PayoutAmount);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutAmount(mBigDecPayoutPerc.doubleValue() + "");
                            schemeBean.setSchemeOffer(mBigDecPayoutPerc.doubleValue() + " " + mStrSlabRuleDesc);
                        } catch (Exception e) {
                            schemeBean.setPayoutAmount("0");
                        }
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        property = properties.get(Constants.NoOfCards);
                        try {
                            schemeBean.setNoOfCards(String.valueOf((short) property.getValue()));
                        } catch (Exception e) {
                            schemeBean.setNoOfCards("0");
                        }
                        property = properties.get(Constants.CardTitle);
                        schemeBean.setCardTitle((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.FreeArticle);
                        schemeBean.setFreeArticle((String) property.getValue());
                    }
                    property = properties.get(Constants.SchemeItemGUID);
                    ODataGuid mSchItemGuid = null;
                    try {
                        mSchItemGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeItemGUID(mSchItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.FreeQtyUOM);
                    schemeBean.setFreeQtyUOM((String) property.getValue());

                    schemeBean.setSlabRuleID(mStrSlabRuleId);
                    schemeBean.setSlabRuleDesc(mStrSlabRuleDesc);
                    schemeBean.setTargetBasedID(mStrSlabUnitId);
                    alSchemeList.add(schemeBean);
                }
            }
        }

        if (alSchemeList != null && alSchemeList.size() > 0) {
            Collections.sort(alSchemeList, new Comparator<SchemeBean>() {
                public int compare(SchemeBean one, SchemeBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getToQty());
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }

                    try {
                        i2 = Double.parseDouble(other.getToQty());
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getToQty().compareTo(one.getToQty());
                    }
                }
            });

            if (mStrSaleUnitID.equalsIgnoreCase(Constants.SchemeSaleUnitIDCBB)) {

                if (schemeRelese.equalsIgnoreCase(Constants.SKUGroupID)) {
                    mDouCBBQty = getCBBQty(Constants.CPStockItems + "?$filter=" + Constants.OrderMaterialGroupID + " eq '" + mStrCRSSKUGrpOrMatNo[0] + "' " +
                            "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Double.parseDouble(mStrOrderQty));
                } else {
                    mDouCBBQty = getCBBQty(Constants.CPStockItems + "?$filter=" + Constants.MaterialNo + " eq '" + mStrCRSSKUGrpOrMatNo[0] + "' " +
                            "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Double.parseDouble(mStrOrderQty));
                }
            }

            schemeBeanVal = null;
            if (mStrSlabUnitId.equalsIgnoreCase("02")) {

                if (schemeRelese.equalsIgnoreCase(Constants.SKUGroupID)) {
                    mOrderVal = getSKUGrpWiseSchemeAmt(mStrCRSSKUGrpOrMatNo);
                } else {
                    mOrderVal = getMatWiseSchemeAmt(mStrCRSSKUGrpOrMatNo);
                }

                ;
                for (int incVal = 0; incVal < alSchemeList.size(); incVal++) {
                    if (Double.parseDouble(mOrderVal.equalsIgnoreCase("") ? "0" : mOrderVal) >= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                        schemeBeanVal = alSchemeList.get(incVal);
                        break;
                    } else if (Double.parseDouble(alSchemeList.get(incVal).getFromQty()) <= Double.parseDouble(mOrderVal.equalsIgnoreCase("") ? "0" : mOrderVal) &&
                            Double.parseDouble(mOrderVal.equalsIgnoreCase("") ? "0" : mOrderVal) <= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                        schemeBeanVal = alSchemeList.get(incVal);
                        break;
                    }
                }
            } else {
                if (mStrSaleUnitID.equalsIgnoreCase(Constants.SchemeSaleUnitIDCBB)) {
                    for (int incVal = 0; incVal < alSchemeList.size(); incVal++) {
                        if (mDouCBBQty >= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                            schemeBeanVal = alSchemeList.get(incVal);
                            break;
                        } else if (Double.parseDouble(alSchemeList.get(incVal).getFromQty()) <= mDouCBBQty &&
                                mDouCBBQty <= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                            schemeBeanVal = alSchemeList.get(incVal);
                            break;
                        }
                    }
                } else {
                    for (int incVal = 0; incVal < alSchemeList.size(); incVal++) {
                        if (Double.parseDouble(mStrOrderQty.equalsIgnoreCase("") ? "0" : mStrOrderQty) >= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                            schemeBeanVal = alSchemeList.get(incVal);
                            break;
                        } else if (Double.parseDouble(alSchemeList.get(incVal).getFromQty()) <= Double.parseDouble(mStrOrderQty.equalsIgnoreCase("") ? "0" : mStrOrderQty) &&
                                Double.parseDouble(mStrOrderQty.equalsIgnoreCase("") ? "0" : mStrOrderQty) <= Double.parseDouble(alSchemeList.get(incVal).getToQty())) {
                            schemeBeanVal = alSchemeList.get(incVal);
                            break;
                        }
                    }
                }
            }
        }
        if (schemeBeanVal != null) {
            //added 18/09/2017 below three lines (SO Perfrmnce issue)
            if (mStrSlabUnitId.equalsIgnoreCase("02")) {
                schemeBeanVal.setTargetAmount(mOrderVal + "");
            } else {
                schemeBeanVal.setTargetAmount("0");
            }

            schemeBeanVal.setSaleUnitID(mStrSaleUnitID);
            if (mStrSaleUnitID.equalsIgnoreCase(Constants.SchemeSaleUnitIDCBB)) {
                schemeBeanVal.setCBBQty(mDouCBBQty + "");
            } else {
                schemeBeanVal.setCBBQty(0 + "");
            }
        }
        return schemeBeanVal;
    }

    public static String getMatListQryFromMaterialsArray(String[] mStrMatArray) {
        String mStrQry = "";
        try {
            if (mStrMatArray != null && mStrMatArray.length > 0) {
                for (String mStrMatNo : mStrMatArray) {
                    if (mStrMatNo != null && !mStrMatNo.equalsIgnoreCase("")) {
                        if (mStrQry.length() == 0)
                            mStrQry += "guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                        else
                            mStrQry += " or " + Constants.CPStockItemGUID + " eq guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                    }
                }
            }

        } catch (Exception e) {
            mStrQry = "";
            e.printStackTrace();
        }

        if (!mStrQry.equalsIgnoreCase("")) {
            mStrQry = Constants.CPStockItemSnos + "?$filter=(" + Constants.CPStockItemGUID + " eq " + mStrQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ";
        }

        return mStrQry;
    }

    public static String getSKUGrpWiseSchemeAmt(String[] mStrCRSSKUGRPArray) {
        Double mStrAmt = 0.0;
        if (!Constants.hashMapMaterialValByOrdMatGrp.isEmpty()) {
            String matListQry = getMatListQryFromCRSSKUGrp(mStrCRSSKUGRPArray);
            if (!matListQry.equalsIgnoreCase("")) {
                HashMap<String, ArrayList<CPStockSNoBean>> matList = new HashMap<>();
                try {
                    matList = getCPStockSNosByMaterial(matListQry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                if (matList != null && matList.size() > 0) {
                    for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                        if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                            Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                            Iterator itr = mSetMat.iterator();
                            while (itr.hasNext()) {
                                String mStrMatNo = itr.next().toString();
                                SchemeBean mStrNetAmount = null;
                                try {
                                    mStrNetAmount = getNetAmountCalByMaterial(matList.get(mStrMatNo), Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getOrderQty(), mStrMatNo);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                mStrAmt = mStrAmt + Double.parseDouble(mStrNetAmount.getNetAmount());
                            }
                        }
                    }
                } else {
                    mStrAmt = 0.0;
                }

            } else {
                mStrAmt = 0.0;
            }

            /*for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                    Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                    Iterator itr = mSetMat.iterator();
                    while (itr.hasNext()) {
                        String mStrMatNo = itr.next().toString();
                        SchemeBean mStrNetAmount = null;
                        try {
                            mStrNetAmount = OfflineManager.getNetAmountByMaterial(Constants.CPStockItemSnos + "?$filter=" + Constants.MaterialNo + " eq '" + mStrMatNo + "' and "
                                    + Constants.CPStockItemGUID + " eq guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'  " +
                                    "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getOrderQty(), mStrMatNo);
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }

                        mStrAmt = mStrAmt + Double.parseDouble(mStrNetAmount.getNetAmount());
                    }
                }
            }*/
        }
        return mStrAmt + "";
    }

    public static String getMatListQryFromCRSSKUGrp(String[] mStrCRSSKUGRPArray) {
        String mStrQry = "";
        try {
            if (mStrCRSSKUGRPArray != null && mStrCRSSKUGRPArray.length > 0) {
                for (String mStrCRSSKUGRP : mStrCRSSKUGRPArray) {
                    if (Constants.hashMapMaterialValByOrdMatGrp.containsKey(mStrCRSSKUGRP)) {
                        Set mSetMat = Constants.hashMapMaterialValByOrdMatGrp.get(mStrCRSSKUGRP);
                        Iterator itr = mSetMat.iterator();
                        while (itr.hasNext()) {
                            String mStrMatNo = itr.next().toString();

                            if (mStrQry.length() == 0)
                                mStrQry += "guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                            else
                                mStrQry += " or " + Constants.CPStockItemGUID + " eq guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mStrMatNo).getCPItemGUID() + "'";
                        }
                    }
                }
            }
            if (!mStrQry.equalsIgnoreCase("")) {
                mStrQry = Constants.CPStockItemSnos + "?$filter=(" + Constants.CPStockItemGUID + " eq " + mStrQry + ") and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ";
            }
        } catch (Exception e) {
            mStrQry = "";
            e.printStackTrace();
        }
        return mStrQry;
    }

    public static HashMap<String, ArrayList<CPStockSNoBean>> getCPStockSNosByMaterial(String
                                                                                              mStrSNoQry) throws OfflineODataStoreException {
        HashMap<String, ArrayList<CPStockSNoBean>> matList = new HashMap<>();
        Double mDobBatchQty = 0.0;
        Double doubleMatUnitPrice = 0.0;
        String mStrBatchNo = "", mStrMFD = "", mMaterialNo = "";
        Double mDouPrimaryPer = 0.0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrSNoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    CPStockSNoBean cpStockSNoBean = new CPStockSNoBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.IntermUnitPrice);
                    if (property != null) {
                        BigDecimal mDecimialMatUnitPrice = (BigDecimal) property.getValue();
                        if (mDecimialMatUnitPrice != null) {
                            doubleMatUnitPrice = mDecimialMatUnitPrice.doubleValue();
                        } else {
                            doubleMatUnitPrice = 0.0;
                        }
                    }
                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mDecBatchQty = (BigDecimal) property.getValue();
                        if (mDecBatchQty != null) {
                            mDobBatchQty = mDecBatchQty.doubleValue();
                        } else {
                            mDobBatchQty = 0.0;
                        }
                    }
                    property = properties.get(Constants.Batch);
                    mStrBatchNo = property.getValue().toString();
                    property = properties.get(Constants.ManufacturingDate);
                    mStrMFD = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    property = properties.get(Constants.PriDiscountPer);
                    if (property != null) {
                        BigDecimal mDecPriDis = (BigDecimal) property.getValue();
                        if (mDecPriDis != null) {
                            mDouPrimaryPer = mDecPriDis.doubleValue();
                        } else {
                            mDouPrimaryPer = 0.0;
                        }
                    }
                    property = properties.get(Constants.MaterialNo);
                    mMaterialNo = property.getValue().toString();
                    cpStockSNoBean.setBatch(mStrBatchNo);
                    cpStockSNoBean.setPriDiscountPer(mDouPrimaryPer + "");
                    cpStockSNoBean.setManufacturingDate(mStrMFD);
                    cpStockSNoBean.setQuantity(mDobBatchQty + "");
                    cpStockSNoBean.setIntermUnitPrice(doubleMatUnitPrice + "");
                    cpStockSNoBean.setMaterialNo(mMaterialNo + "");
                    ArrayList<CPStockSNoBean> cpStockarrayList = matList.get(mMaterialNo);
                    if (cpStockarrayList == null) {
                        cpStockarrayList = new ArrayList<>();
                        cpStockarrayList.add(cpStockSNoBean);
                        matList.put(mMaterialNo, cpStockarrayList);
                    } else {
                        cpStockarrayList.add(cpStockSNoBean);
                        matList.put(mMaterialNo, cpStockarrayList);
                    }
                }
            }
        }
        return matList;
    }

    public static SchemeBean getNetAmountCalByMaterial
            (ArrayList<CPStockSNoBean> cpStockarrayList, String mStrOrderQty, String mStrMatNo) {

        SchemeBean schemeBean = new SchemeBean();
        Double mDobOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobTempOrderQty = Double.parseDouble(mStrOrderQty);
        Double mDobBatchQty = 0.0, mDoubleTempQty = 0.0, mDouTempQty = Double.parseDouble(mStrOrderQty);
        Double doubleMatUnitPrice = 0.0;
        Double mDouCalucaltedNetAmount = 0.0;
//        String mStrBatchNo="",mStrMFD="";
        Double mDouPrimaryPer = 0.0;

        boolean mBoolBatchQtyEmpty = false, mBoolBatchQtyNotEmpty = false;
        String mStrFirstBatchUnitPrice = "0", mStrFirstBatchPrimaryPer = "0", mStrFirstBatchMRP = "0", mStrFirstBatchNo = "", mStrFirstMFD = "";
        //Check if the offline oData store is initialized
        try {
            if (cpStockarrayList != null && cpStockarrayList.size() > 0) {
                for (CPStockSNoBean cpStockSNoBean : cpStockarrayList) {
                    try {
                        doubleMatUnitPrice = Double.parseDouble(cpStockSNoBean.getIntermUnitPrice());
                    } catch (NumberFormatException e) {
                        doubleMatUnitPrice = 0.0;
                    }

                    try {
                        mDobBatchQty = Double.parseDouble(cpStockSNoBean.getQuantity());
                    } catch (NumberFormatException e) {
                        mDobBatchQty = 0.0;
                    }
                    //                    mStrBatchNo = cpStockSNoBean.getBatch();
                    //                    mStrMFD = cpStockSNoBean.getManufacturingDate();


                    try {
                        mDouPrimaryPer = Double.parseDouble(cpStockSNoBean.getPriDiscountPer());
                    } catch (NumberFormatException e) {
                        mDouPrimaryPer = 0.0;
                    }


                    if (mDobBatchQty > 0) {

                        if (!mBoolBatchQtyNotEmpty) {
                            mBoolBatchQtyNotEmpty = true;
                        }
                        if (mDobTempOrderQty >= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {

                            mDobTempOrderQty = mDobTempOrderQty - mDobBatchQty;

                            mDouTempQty = mDouTempQty - mDobBatchQty;

                            mDoubleTempQty = mDoubleTempQty + mDobBatchQty;

                            Double mDouPrimDisAmt = null;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleMatUnitPrice + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobBatchQty == 0.0 ? mDobTempOrderQty : mDobBatchQty) * doubleMatUnitPrice - mDouPrimDisAmt;


                        } else if (mDobTempOrderQty <= mDobBatchQty && mDoubleTempQty != mDobOrderQty && mDouTempQty > 0) {
                            mDouTempQty = mDobTempOrderQty;

                            mDoubleTempQty = mDoubleTempQty + mDobTempOrderQty;

                            Double mDouPrimDisAmt = null;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobTempOrderQty * doubleMatUnitPrice) + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleMatUnitPrice) - mDouPrimDisAmt;


                            break;

                        } else {
                            break;
                        }
                    } else {
                        if (!mBoolBatchQtyEmpty) {
                            mBoolBatchQtyEmpty = true;
                            mStrFirstBatchUnitPrice = doubleMatUnitPrice + "";
                            mStrFirstBatchPrimaryPer = mDouPrimaryPer + "";
                        }
                    }


                }

                try {

                    if (mDobTempOrderQty < mDobOrderQty) {
                        double mdouRemaingQty = mDobOrderQty - mDoubleTempQty;
                        if (mdouRemaingQty > 0) {

                            Double mDouPrimDisAmt = null;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mDouPrimaryPer + "", (mDobTempOrderQty * doubleMatUnitPrice) + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * doubleMatUnitPrice) - mDouPrimDisAmt;
                        }
                    } else {
                        if (!mBoolBatchQtyNotEmpty) {

                            Double mDouPrimDisAmt = null;
                            try {
                                mDouPrimDisAmt = Double.parseDouble(Constants.calculatePrimaryDiscount(mStrFirstBatchPrimaryPer + "", (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice)) + ""));
                            } catch (NumberFormatException e) {
                                mDouPrimDisAmt = 0.0;
                            }

                            mDouCalucaltedNetAmount = mDouCalucaltedNetAmount + (mDobTempOrderQty * Double.parseDouble(mStrFirstBatchUnitPrice)) - mDouPrimDisAmt;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        schemeBean.setNetAmount(mDouCalucaltedNetAmount.toString());
        return schemeBean;
    }

    public static String getMatWiseSchemeAmt(String[] mStrMatNoArray) {
        Double mStrAmt = 0.0;
//        SchemeBean mStrNetAmount = null;

        String matListQry = getMatListQryFromMaterialsArray(mStrMatNoArray);
        if (!matListQry.equalsIgnoreCase("")) {
            HashMap<String, ArrayList<CPStockSNoBean>> matList = new HashMap<>();
            try {
                matList = getCPStockSNosByMaterial(matListQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (matList != null && matList.size() > 0) {
                for (String mMatNo : mStrMatNoArray) {
                    if (mMatNo != null && !mMatNo.equalsIgnoreCase("")) {
                        SchemeBean mStrNetAmount = null;
                        try {
                            try {
                                mStrNetAmount = getNetAmountCalByMaterial(matList.get(mMatNo),
                                        Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mMatNo).getOrderQty(), mMatNo);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mStrAmt = mStrAmt + Double.parseDouble(mStrNetAmount.getNetAmount());
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } else {
                mStrAmt = 0.0;
            }
        } else {
            mStrAmt = 0.0;
        }

       /* for (String mMatNo : mStrMatNoArray) {
            try {
                mStrNetAmount = OfflineManager.getNetAmountByMaterial(Constants.CPStockItemSnos + "?$filter=" + Constants.MaterialNo + " eq '" + mMatNo + "' and "
                        + Constants.CPStockItemGUID + " eq guid'" + Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mMatNo).getCPItemGUID() + "'  " +
                        "and " + Constants.StockTypeID + " ne '" + Constants.str_3 + "' &$orderby=" + Constants.ManufacturingDate + "%20asc ", Constants.hashMapCpStockItemGuidQtyValByMaterial.get(mMatNo).getOrderQty(), mMatNo);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            mStrAmt = mStrAmt + Double.parseDouble(mStrNetAmount.getNetAmount());
        }*/
        return mStrAmt + "";
    }

    public static ArrayList<SchemeBean> getBasketSchemeItems(String mQry) {
        ArrayList<SchemeBean> alSchemeList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        SchemeBean schemeBean = null;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                schemeBean = new SchemeBean();
                properties = entity.getProperties();

                property = properties.get(Constants.ItemMin);
                try {
                    BigDecimal mBigItemMin = (BigDecimal) property.getValue();
                    schemeBean.setItemMin(mBigItemMin.doubleValue() + "");
                } catch (Exception e) {
                    schemeBean.setItemMin("0");
                }

                property = properties.get(Constants.OrderMaterialGroupID);
                schemeBean.setOrderMaterialGroupID((String) property.getValue());

                property = properties.get(Constants.MaterialNo);
                schemeBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.SKUGroupID);
                schemeBean.setSKUGroupID((String) property.getValue());


                property = properties.get(Constants.BrandID);
                schemeBean.setBrandID((String) property.getValue());


                property = properties.get(Constants.BannerID);
                schemeBean.setBannerID((String) property.getValue());


                alSchemeList.add(schemeBean);
            }
        }
        return alSchemeList;
    }

    public static SchemeBean getBasketSchemeHeader(String mQry) {
        SchemeBean headerScheme = null;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = null;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                headerScheme = new SchemeBean();
                properties = entity.getProperties();
                property = properties.get(Constants.OnSaleOfCatID);
                headerScheme.setOnSaleOfCatID((String) property.getValue());
                property = properties.get(Constants.ItemMin);
                try {
                    BigDecimal mBigItemMin = (BigDecimal) property.getValue();
                    headerScheme.setItemMin(mBigItemMin.doubleValue() + "");
                } catch (Exception e) {
                    headerScheme.setItemMin("0");
                }
                property = properties.get(Constants.SchemeItemGUID);
                ODataGuid mSchItemGuid = null;
                try {
                    mSchItemGuid = (ODataGuid) property.getValue();
                    headerScheme.setHierarchicalRefGUID(mSchItemGuid.guidAsString36().toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return headerScheme;
    }

    public static void getSecondarySchemeSlabPerRunning(String schemeQry, String
            mStrOrderQty, String mStrSchemeGUID,
                                                        String mStrTargetBasedID, String[] mStrMatNo,
                                                        String isHeaderBased, String mTargetAmount) throws OfflineODataStoreException {

        SchemeBean schemeBean = null;
        ArrayList<SchemeBean> alSchemeBeen = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, schemeQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeBean();
                    properties = entity.getProperties();
                    if (mStrTargetBasedID.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.ToValue);
                    } else {
                        property = properties.get(Constants.ToQty);
                    }

                    try {
                        BigDecimal mBigDecToQty = (BigDecimal) property.getValue();
                        schemeBean.setToQty(mBigDecToQty.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setToQty("0");
                    }

                    if (mStrTargetBasedID.equalsIgnoreCase("02")) {
                        property = properties.get(Constants.FromValue);
                    } else {
                        property = properties.get(Constants.FromQty);
                    }

                    try {
                        BigDecimal mBigDecFromQty = (BigDecimal) property.getValue();
                        schemeBean.setFromQty(mBigDecFromQty.doubleValue() + "");
                    } catch (Exception e) {
                        schemeBean.setFromQty("0");
                    }

                    property = properties.get(Constants.SlabTypeID);
                    schemeBean.setSlabTypeID((String) property.getValue());
                    property = properties.get(Constants.SlabTypeDesc);
                    schemeBean.setSlabTypeDesc((String) property.getValue());
                    property = properties.get(Constants.SlabRuleID);
                    String mStrSlabRuleId = (String) property.getValue();
                    property = properties.get(Constants.SlabRuleDesc);
                    String mStrSlabRuleDesc = (String) property.getValue();
                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.Material_Desc);
                        schemeBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.Material_No);
                        schemeBean.setMaterialNo((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.SKUGroupID);
                        schemeBean.setSKUGroupID((String) property.getValue());
                        property = properties.get(Constants.SKUGroupDesc);
                        schemeBean.setSKUGroupDesc((String) property.getValue());
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        schemeBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.OrderMaterialGroupID);
                        schemeBean.setOrderMaterialGroupID((String) property.getValue());
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        property = properties.get(Constants.PayoutPerc);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutPerc(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setPayoutPerc("0");
                        }

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        property = properties.get(Constants.PayoutAmount);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setPayoutAmount(mBigDecPayoutPerc.doubleValue() + "");
                            schemeBean.setSchemeOffer(mBigDecPayoutPerc.doubleValue() + " " + mStrSlabRuleDesc);
                        } catch (Exception e) {
                            schemeBean.setPayoutAmount("0");
                        }
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        property = properties.get(Constants.NoOfCards);
                        try {
                            schemeBean.setNoOfCards(String.valueOf((short) property.getValue()));
                        } catch (Exception e) {
                            schemeBean.setNoOfCards("0");
                        }
                        property = properties.get(Constants.CardTitle);
                        schemeBean.setCardTitle((String) property.getValue());

                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        property = properties.get(Constants.FreeQty);
                        try {
                            BigDecimal mBigDecPayoutPerc = (BigDecimal) property.getValue();
                            schemeBean.setFreeQty(mBigDecPayoutPerc.doubleValue() + "");
                        } catch (Exception e) {
                            schemeBean.setFreeQty("0");
                        }
                        property = properties.get(Constants.FreeArticle);
                        schemeBean.setFreeArticle((String) property.getValue());
                    }
                    property = properties.get(Constants.SchemeItemGUID);
                    ODataGuid mSchItemGuid = null;
                    try {
                        mSchItemGuid = (ODataGuid) property.getValue();
                        schemeBean.setSchemeItemGUID(mSchItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    schemeBean.setSlabRuleID(mStrSlabRuleId);
                    schemeBean.setSlabRuleDesc(mStrSlabRuleDesc);

                    alSchemeBeen.add(schemeBean);
                }
            }
        }

        if (alSchemeBeen != null && alSchemeBeen.size() > 0) {
            Collections.sort(alSchemeBeen, new Comparator<SchemeBean>() {
                public int compare(SchemeBean one, SchemeBean other) {
                    Double i1 = null;
                    Double i2 = null;
                    try {
                        i1 = Double.parseDouble(one.getToQty());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Double.parseDouble(other.getToQty());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getToQty().compareTo(one.getToQty());
                    }
                }
            });

            if (mStrTargetBasedID.equalsIgnoreCase("02")) {
                String mOrderVal = "0";
                if (!isHeaderBased.equalsIgnoreCase(Constants.X)) {
//                    mOrderVal = OfflineManager.getMatWiseSchemeAmt(mStrMatNo);
                    mOrderVal = mTargetAmount;
                } else {
//                    mOrderVal = OfflineManager.getSKUGrpWiseSchemeAmt(mStrMatNo);
                    mOrderVal = mTargetAmount;
                }

                getMaxSlab(alSchemeBeen, Double.parseDouble(mOrderVal));
            } else {
                getMaxSlab(alSchemeBeen, Double.parseDouble(mStrOrderQty));
            }


        } else {
        }
    }

    private static double getMaxSlab(ArrayList<SchemeBean> alSchemeBeen, Double mDouOrderQty) {
        Double mDoubMaxSlab = 0.0;
        int matIteration = 0, matRemeinder = 0;
        for (int incVal = 0; incVal < alSchemeBeen.size(); incVal++) {
            SchemeBean schemeBean = alSchemeBeen.get(incVal);
            String mStrSlabRuleId = alSchemeBeen.get(incVal).getSlabRuleID();
            Double mDouBeanToQty = null;
            try {
                mDouBeanToQty = Double.parseDouble(alSchemeBeen.get(incVal).getToQty());
            } catch (NumberFormatException e) {
                mDouBeanToQty = 0.0;
            }
            Double mDouBeanFromQty = null;
            try {
                mDouBeanFromQty = Double.parseDouble(alSchemeBeen.get(incVal).getFromQty());
            } catch (NumberFormatException e) {
                mDouBeanFromQty = 0.0;
            }
            if (mDouBeanFromQty > 0) {
                if (mDouOrderQty >= mDouBeanToQty) {
                    matIteration = (int) (mDouOrderQty / mDouBeanFromQty);
                    matRemeinder = (int) (mDouOrderQty % mDouBeanFromQty);

                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutPerc()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutAmount()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getNoOfCards()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    }

                    Constants.DoubGetRunningSlabPer = Constants.DoubGetRunningSlabPer + mDoubMaxSlab;

                    getMaxSlab(alSchemeBeen, (double) matRemeinder);
                    break;

                } else if (mDouBeanFromQty <= mDouOrderQty && mDouOrderQty <= mDouBeanToQty) {
                    matIteration = (int) (mDouOrderQty / mDouBeanFromQty);
                    matRemeinder = (int) (mDouOrderQty % mDouBeanFromQty);

                    if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutPerc()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getPayoutAmount()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getNoOfCards()) * matIteration;
                    } else if (mStrSlabRuleId.equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                        mDoubMaxSlab = mDoubMaxSlab + Double.parseDouble(schemeBean.getFreeQty()) * matIteration;
                    }

                    Constants.DoubGetRunningSlabPer = Constants.DoubGetRunningSlabPer + mDoubMaxSlab;

                    getMaxSlab(alSchemeBeen, (double) matRemeinder);
                    break;
                }
            }


        }
        return mDoubMaxSlab;
    }

    /*create scheme cps*/
    public static void createSchemeCPs(Hashtable<String, String> table, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createSchemeCpsEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.SchemeCPs,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.SchemeCPs),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*create scheme cps entity*/
    private static ODataEntity createSchemeCpsEntity(Hashtable<String, String> hashTable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.SchemeCPsEntity);

                newEntity.getProperties().put(Constants.SchemeCPGUID,
                        new ODataPropertyDefaultImpl(Constants.SchemeCPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SchemeCPGUID))));

                newEntity.getProperties().put(Constants.SchemeGUID,
                        new ODataPropertyDefaultImpl(Constants.SchemeGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SchemeGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashTable.get(Constants.CPNo)));

                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashTable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.IsExcluded,
                        new ODataPropertyDefaultImpl(Constants.IsExcluded, hashTable.get(Constants.IsExcluded)));

                newEntity.getProperties().put(Constants.WindowLength,
                        new ODataPropertyDefaultImpl(Constants.WindowLength, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.WindowLength)))));

                newEntity.getProperties().put(Constants.WindowBreadth,
                        new ODataPropertyDefaultImpl(Constants.WindowBreadth, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.WindowBreadth)))));

                newEntity.getProperties().put(Constants.WindowHeight,
                        new ODataPropertyDefaultImpl(Constants.WindowHeight, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.WindowHeight)))));


                newEntity.getProperties().put(Constants.WindowSizeUOM,
                        new ODataPropertyDefaultImpl(Constants.WindowSizeUOM, hashTable.get(Constants.WindowSizeUOM)));

                newEntity.getProperties().put(ConstantsUtils.RegistrationTypeID,
                        new ODataPropertyDefaultImpl(ConstantsUtils.RegistrationTypeID, hashTable.get(ConstantsUtils.RegistrationTypeID)));

                newEntity.getProperties().put(ConstantsUtils.RegistrationTypeDesc,
                        new ODataPropertyDefaultImpl(ConstantsUtils.RegistrationTypeDesc, hashTable.get(ConstantsUtils.RegistrationTypeDesc)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));
                if (!hashTable.get(ConstantsUtils.EnrollmentDate).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(ConstantsUtils.EnrollmentDate,
                            new ODataPropertyDefaultImpl(ConstantsUtils.EnrollmentDate, UtilConstants.convertDateFormat(hashTable.get(ConstantsUtils.EnrollmentDate))));
                }
                newEntity.getProperties().put(ConstantsUtils.RegistrationDate,
                        new ODataPropertyDefaultImpl(ConstantsUtils.RegistrationDate, UtilConstants.convertDateFormat(hashTable.get(ConstantsUtils.RegistrationDate))));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static void createSchemeCPDocument(HashMap<String, String> tableItem, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createSchemeCPDocumentEntity(tableItem);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.SchemeCPDocuments));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataRequestParamSingle createSchemeCPDocumentEntity
            (HashMap<String, String> hashTblItm) throws ODataParserException {
//		ODataEntity itemEntity = null;
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                // CreateOperation the item Entity

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.DocumentMimeType));


                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();

                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.SchemeCPDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.SchemeCPs + "(guid'" + hashTblItm.get(Constants.SchemeCPGUID) + "')/" + Constants.SchemeCPDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", Constants.SchemeCPDocumentID + ":" + hashTblItm.get(Constants.SchemeCPDocumentID).replace("-", "").toUpperCase() + ","
                        + Constants.SchemeCPGUID + ":" + hashTblItm.get(Constants.SchemeCPGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.DocumentStore + ":" + hashTblItm.get(Constants.DocumentStore) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentTypeID + ":" + hashTblItm.get(Constants.DocumentTypeID) + ",");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    public static String[][] getInVoidTypeId() {
        String[][] mArrayDistributors = null;
        String qryStr = Constants.SSInvoiceTypes + "?$filter=" + Constants.GoodsIssueFromID + " eq '000002' and GoodsIssueCatID eq '000002'";
        try {
            mArrayDistributors = OfflineManager.getInvoiceTypeId(qryStr);

        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        if (mArrayDistributors == null) {
            mArrayDistributors = new String[1][1];
            mArrayDistributors[0][0] = "";
        }

        return mArrayDistributors;
    }

    public static String[][] getInvoiceTypeId(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        //Retrieve the data from the response
                        distVal = new String[1][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();


                            property = properties.get(Constants.InvoiceTypeID);
                            distVal[0][incVal] = (String) property.getValue();
                            incVal++;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

   /* public static ArrayList<DocumentsBean> getSchemeCpDocuments(String docQuery) throws OfflineODataStoreException {
        ArrayList<DocumentsBean> documentsList = new ArrayList<>();
        if (offlineStore != null) {
            DocumentsBean documentsBean;
            ODataProperty oDataProperty;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setMode(Mode.Read);
                oDataRequestParamSingle.setResourcePath(docQuery);

                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle responseSingle = (ODataResponseSingle) offlineStore.executeRequest(oDataRequestParamSingle);
                //Check if the response is an error
                if (responseSingle.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            responseSingle.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (responseSingle.getPayloadType() == ODataPayload.Type.EntitySet) {

                    ODataEntitySet feed = (ODataEntitySet) responseSingle.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        oDataProperty = properties.get(Constants.SchemeCPImageGUID);
                        documentsBean = new DocumentsBean((String) oDataProperty.getValue());
                        documentsBean.setDocumentID((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.DocumentLink);
                        documentsBean.setDocumentLink((String) oDataProperty.getValue());
                        oDataProperty = properties.get(Constants.FileName);
                        documentsBean.setFileName((String) oDataProperty.getValue());
                        documentsBean.setMediaLink(entity.getMediaLink() + "");
                        documentsList.add(documentsBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + responseSingle.getPayloadType().name());
                }
            } catch (Exception listex) {
                listex.printStackTrace();
            }
        }
        return documentsList;
    }*/

    public static String[][] getArraySchemeCPs(String qry, String schemeGuid, String cpGuids) throws
            OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[8][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = "";
                    configVal[2][0] = "";
                    configVal[3][0] = "";
                    configVal[4][0] = "";
                    configVal[5][0] = "";
                    configVal[6][0] = "";
                    configVal[7][0] = "";
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SchemeCPGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            configVal[0][incVal] = mCpGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.WindowLength);
                        BigDecimal wLength = (BigDecimal) property.getValue();

                        if (wLength != null) {
                            configVal[1][incVal] = wLength.toString();
                        } else {
                            configVal[1][incVal] = "0.0";
                        }
                        property = properties.get(Constants.WindowBreadth);
                        BigDecimal wBreadth = (BigDecimal) property.getValue();

                        if (wBreadth != null) {
                            configVal[2][incVal] = wBreadth.toString();
                        } else {
                            configVal[2][incVal] = "0.0";
                        }
                        property = properties.get(Constants.WindowHeight);
                        BigDecimal wHeight = (BigDecimal) property.getValue();

                        if (wHeight != null) {
                            configVal[3][incVal] = wHeight.toString();
                        } else {
                            configVal[3][incVal] = "0.0";
                        }
                        property = properties.get(Constants.WindowSizeUOM);
                        configVal[4][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Remarks);
                        configVal[5][incVal] = (String) property.getValue();
                        property = properties.get(ConstantsUtils.RegistrationTypeDesc);
                        configVal[6][incVal] = (String) property.getValue();

                        configVal[7][incVal] = OfflineManager.getGuidValueByColumnName(Constants.Claims + "?$filter = SchemeGUID eq guid'" + schemeGuid + "' and CPGUID eq '" + cpGuids + "' &$top=1", ConstantsUtils.ClaimGUID);

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    public static ArrayList<ExpenseImageBean> getSchemeCPDocuments(String
                                                                           schemeQry, ArrayList<ExpenseImageBean> documentSchemeList) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ExpenseImageBean imageBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingleDefaultImpl var7 = new ODataRequestParamSingleDefaultImpl();
                var7.setMode(Mode.Read);
                var7.setResourcePath(schemeQry);

                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(var7);
//                response.getHeaders()
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl feed1 = (ODataErrorDefaultImpl) response.getPayload();
                    throw new OfflineODataStoreException(feed1.getMessage());
                }
                if (response.getPayloadType() != ODataPayload.Type.EntitySet) {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expectedbut got " + response.getPayloadType().name());
                }
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        imageBean = new ExpenseImageBean();
                    /*properties = entity.getProperties();
                    property = properties.get(Constants.DocumentTypeID);
                    imageBean.setDocumentTypeID((String)property.getValue());
                    property = properties.get(Constants.ImagePath);*/
                        imageBean.setImageFromMedia(true);
                        imageBean.setImagePath(entity.getMediaLink() + "");

                        documentSchemeList.add(imageBean);
                    }
                }
            } catch (ODataException e) {
                throw new OfflineODataStoreException(e.getMessage());
            }
        }
        return documentSchemeList;

    }

    private static String getSchemeBrandId(String brandQuery, String clm) {

        String mStrBrand = "";
        try {
            mStrBrand = getValueByColumnName(brandQuery, clm);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        return mStrBrand;
    }

    private static String getSchemeGuidValue(String validScheme) {
        String ItemSchemeGuid = "";
        if (offlineStore != null) {
            try {
                ItemSchemeGuid = getGuidValueByColumnName(validScheme, Constants.SchemeGUID);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }


        }


        return ItemSchemeGuid;
    }

    /*
   to get scheme sales area details
    */
    private static ArrayList<SchemeSalesAreaBean> getSchemeSalesAreas(String crSkuGuid) {
        ArrayList<SchemeSalesAreaBean> SchSalAreaList = new ArrayList<>();
        String SalesAreaQuery = Constants.SchemeSalesAreas + "?$filter= " + Constants.SchemeGUID + " eq guid'" + crSkuGuid.toLowerCase() + "'";
        if (offlineStore != null) {
            HashSet<String> cpGroup;
            SchemeSalesAreaBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SalesAreaQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        cpGroup = new HashSet<>();
                        skuGrpBean = new SchemeSalesAreaBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGroup1ID);
                        skuGrpBean.setCPGroup1ID((String) property.getValue());
                        property = properties.get(Constants.CPGroup2ID);
                        skuGrpBean.setCPGroup2ID((String) property.getValue());
                        property = properties.get(Constants.CPGroup3ID);
                        skuGrpBean.setCPGroup3ID((String) property.getValue());
                        property = properties.get(Constants.CPGroup4ID);
                        skuGrpBean.setCPGroup4ID((String) property.getValue());

                        property = properties.get(Constants.CPGroup1Desc);
                        String group1 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group1)) {
                            cpGroup.add(group1);
                        }
                        property = properties.get(Constants.CPGroup2Desc);
                        String group2 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group2)) {
                            cpGroup.add(group2);
                        }
                        property = properties.get(Constants.CPGroup3Desc);
                        String group3 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group3)) {
                            cpGroup.add(group3);
                        }
                        property = properties.get(Constants.CPGroup4Desc);
                        String group4 = (String) property.getValue();
                        if (!TextUtils.isEmpty(group4)) {
                            cpGroup.add(group4);
                        }
                        String grp = TextUtils.join("-", cpGroup);

                        skuGrpBean.setFinalGroupDesc(grp);
                        SchSalAreaList.add(skuGrpBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return SchSalAreaList;
    }

    /*
    to get Scheme geographies
     */
    private static void getSchemeGeographies(String crSkuGuid) {
        ArrayList<SKUGroupBean> SchGeographiesAreaList = new ArrayList<>();
        String SchemeGeographiesQuery = Constants.SchemeGeographies + "?filter=" + Constants.SchemeGUID + " eq guid'" + crSkuGuid + "'";
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SchemeGeographiesQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SKUGroupBean();
                        properties = entity.getProperties();
                        property = properties.get("GeographyScopeID");
                        skuGrpBean.setGeographyScopeID((String) property.getValue());
                        property = properties.get("GeographyLevelID");
                        skuGrpBean.setGeographyLevelID((String) property.getValue());
                        property = properties.get("GeographyTypeID");
                        skuGrpBean.setGeographyTypeID((String) property.getValue());
                        property = properties.get("GeographyValueID");
                        skuGrpBean.setGeographyValueID((String) property.getValue());
                        SchGeographiesAreaList.add(skuGrpBean);
                    }
                }
            } catch (OfflineODataStoreException gex) {
                gex.printStackTrace();
            }
        }

    }

    /*
  to get CPGeoClassifications
   */
    private static void getCPGeoClassifications(String geographyScopeID, String
            geographyLevelID) {

        String GeographyTypeID = "02";

        String SchemeCPQuery = "CPGeoClassifications?filter=GeographyScopeID eq '" + geographyScopeID + "' and GeographyLevelID eq '" + geographyLevelID + "'";
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SchemeCPQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SKUGroupBean();
                        properties = entity.getProperties();
                        property = properties.get("GeographyTypeID");
                        String Geography = (String) property.getValue();

                     //   System.out.println("Geography" + Geography);


                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
    }

    /*
  to get SchemeCPs
   */
    private static void getSchemeCPsList(String crSkuGuid) {
        ArrayList<SKUGroupBean> SchemeCPList = new ArrayList<>();
        String SchemeCPQuery = Constants.SchemeCPs + "?filter=" + Constants.SchemeGUID + " eq guid'" + crSkuGuid + "' and " + Constants.IsExcluded + " eq ''";
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SchemeCPQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SKUGroupBean();
                        properties = entity.getProperties();
                        property = properties.get("CPTypeID");
                        skuGrpBean.setCPTypeID((String) property.getValue());
                        property = properties.get("CPGUID");
                        skuGrpBean.setCPGUID((String) property.getValue());
                        property = properties.get("CPNo");
                        skuGrpBean.setCPNo((String) property.getValue());
                        SchemeCPList.add(skuGrpBean);

                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
    }

    public static ArrayList<SchemeListBean> getSchemesListGrp(Context context, String schemeQry) throws
            OfflineODataStoreException {
        ArrayList<SchemeListBean> schemeListBeanArrayList = new ArrayList<>();
        boolean overAllConditionStatus = false;
        DmsDivQryBean dmsDivQryBean = Constants.getDMSDIV("");
        String mDMSDivQry = dmsDivQryBean.getDMSDivisionQry();
        String mSPGUID = Constants.getSPGUID();
        ArrayList<CPDMSDivisionBean> cpDMSDivisionList = new ArrayList<>();
        if (!Constants.CPGUIDVAL.equalsIgnoreCase("")) {
            cpDMSDivisionList = OfflineManager.getCPDMSDivisionList(Constants.CPDMSDivisions + "?$filter=" + Constants.PartnerMgrGUID + " eq guid'" + mSPGUID.toUpperCase() + "' and " + Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(Constants.CPGUIDVAL) + "' and " + mDMSDivQry + " ");
        }
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SchemeListBean schemeBean = null;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;

            if (TextUtils.isEmpty(schemeQry)) {
                HashSet<String> hashSet = new HashSet<>();
                entities = GetSalesOrderListBasedOnScheme.getValidScheme(hashSet);
            } else {
                String queryFinal = Constants.Schemes + "?$filter = " + schemeQry + " ";
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, queryFinal);
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    schemeBean = new SchemeListBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SchemeName);
                    schemeBean.setSchemeName((String) property.getValue());
                    property = properties.get(Constants.SchemeID);
                    schemeBean.setSchemeId((String) property.getValue());
                    property = properties.get(Constants.SchemeTypeDesc);
                    schemeBean.setSchemeDesc((String) property.getValue());
                    schemeBean.setSchemeNameTitle(context.getResources().getString(R.string.lbl_scheme_name));
                    schemeBean.setSchemeTypeName(context.getResources().getString(R.string.lbl_scheme_type));
                    schemeBean.setSchemeApplicableTitle(context.getResources().getString(R.string.lbl_scheme_applicable));
                    property = properties.get(ConstantsUtils.TargetBasedID);
                    String targetIds = (String) property.getValue();
                    if (targetIds.equalsIgnoreCase("01")) {
                        schemeBean.setSlabTitle(context.getResources().getString(R.string.lbl_scheme_slabs, "Qty"));
                    } else {
                        schemeBean.setSlabTitle(context.getResources().getString(R.string.lbl_scheme_slabs, "Amount"));
                    }

                    property = properties.get(Constants.ValidTo);
                    String validTo = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    schemeBean.setValidDate(validTo);
                    property = properties.get(Constants.ValidFrom);
                    String validFrom = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    schemeBean.setValidFrom(validFrom);
                    property = properties.get(Constants.SchemeTypeID);
                    schemeBean.setSchemeTypeID((String) property.getValue());

                    property = properties.get(Constants.SchemeGUID);
                    ODataGuid mSchemeGuid = null;
                    try {
                        mSchemeGuid = (ODataGuid) property.getValue();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    overAllConditionStatus = false;
                    if (!Constants.CPGUIDVAL.equalsIgnoreCase("")) {
                        overAllConditionStatus = GetSalesOrderListBasedOnScheme.checkConditionOne(Constants.SchemeSalesAreas + "?$filter=" + Constants.SchemeGUID +
                                " eq guid'" + mSchemeGuid.guidAsString36().toUpperCase() + "' and " + dmsDivQryBean.getDMSDivisionIDQry() + " ", "", Constants.CPGUIDVAL, mSPGUID, cpDMSDivisionList);
                    } else {
                        overAllConditionStatus = GetSalesOrderListBasedOnScheme.checkConditionOne(Constants.SchemeSalesAreas + "?$filter=" + Constants.SchemeGUID +
                                " eq guid'" + mSchemeGuid.guidAsString36().toUpperCase() + "' and " + dmsDivQryBean.getDMSDivisionIDQry() + " ", "", "", mSPGUID, null);
                    }

                    if (overAllConditionStatus) {
                        try {
                            schemeBean.setSchemeGuid(mSchemeGuid.guidAsString36().toUpperCase());
                            schemeBean.setSalesAreaBeanArrayList(getSchemeSalesAreas(schemeBean.getSchemeGuid()));
                            schemeBean.setItemListBeanArrayList(getSchemeDisplayItemDetails(schemeBean.getSchemeGuid(), schemeBean));
                            schemeBean.setSchemeSlabBeanArrayList(getSchemeSlabItem(schemeBean.getSchemeGuid(), schemeBean));

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        schemeListBeanArrayList.add(schemeBean);
                    }
                }
            }
        }
        return schemeListBeanArrayList;

    }

    public static HashMap<String, String> getSchemeCRSSKUGRPBYMaterial() {
        HashMap<String, String> mapOrderMAtGRP = new HashMap<>();
        String SchemeCPQuery = Constants.CPStockItems + "?filter=" + Constants.StockOwner + " eq '01' and " + Constants.OrderMaterialGroupID + " ne '' and " +
                "" + Constants.Material_No + "  ne '' ";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SchemeCPQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Material_No);
                        String matNo = (String) property.getValue();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGrp = (String) property.getValue();
                        mapOrderMAtGRP.put(matNo, orderMatGrp);
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
        return mapOrderMAtGRP;
    }

    /*
to get scheme sales area details
 */
    private static ArrayList<SchemeItemListBean> getSchemeDisplayItemDetails(String
                                                                                     crSkuGuid, SchemeListBean schemeListBean) {
        ArrayList<SchemeItemListBean> SchSalAreaList = new ArrayList<>();
        boolean isSchemeBasket = Constants.isSchemeBasketOrNot(crSkuGuid);
        String mStrOnSaleOnDesc = "";
        String SalesAreaQuery = Constants.SchemeItemDetails + "?$filter= " + Constants.SchemeGUID + " eq guid'" + crSkuGuid + "' &$orderby = ItemNo asc";
        if (offlineStore != null) {
            SchemeItemListBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SalesAreaQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        skuGrpBean = new SchemeItemListBean();
                        properties = entity.getProperties();
                        property = properties.get(ConstantsUtils.OnSaleOfCatDesc);
                        schemeListBean.setOnSaleOfCatDesc((String) property.getValue());
                        property = properties.get(ConstantsUtils.OnSaleOfCatID);
                        skuGrpBean.setOnSaleOfCatID((String) property.getValue());
                        if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfBanner)) {
                            property = properties.get(ConstantsUtils.BannerDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfBrand)) {
                            property = properties.get(Constants.BrandDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfProdCat)) {
                            property = properties.get(ConstantsUtils.ProductCatDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfSchemeMatGrp)) {
                            property = properties.get(Constants.SKUGroupDesc);
                        } else if (skuGrpBean.getOnSaleOfCatID().equalsIgnoreCase(Constants.OnSaleOfOrderMatGrp)) {
//                            property = properties.get(Constants.OrderMaterialGroupDesc);
                            property = properties.get(Constants.SKUGroupDesc);
                        } else {
                            property = properties.get(Constants.MaterialDesc);
                        }
                        mStrOnSaleOnDesc = (String) property.getValue();
                        if (!isSchemeBasket) {
                            skuGrpBean.setOnSalesDesc((String) property.getValue());
                        } else {
                            property = properties.get(Constants.ItemCatID);
                            String mStrItemCatID = (String) property.getValue();

                            if (mStrItemCatID.equalsIgnoreCase("000002")) {
                                skuGrpBean.setOnSalesDesc(Constants.BasketHeadingName);
                            } else {
                                skuGrpBean.setOnSalesDesc(mStrOnSaleOnDesc);
                            }
                        }

                        property = properties.get(ConstantsUtils.ItemMin);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        skuGrpBean.setUOM((String) property.getValue());

                        if (checkNoUOMZero(String.valueOf(property.getValue()))) {
                            if (properties.get(ConstantsUtils.ItemMin) != null)
                                skuGrpBean.setItemMin(trimQtyDecimalPlace(qty));
                            else
                                skuGrpBean.setItemMin("0");
                        } else {
                            if (properties.get(ConstantsUtils.ItemMin) != null)
                                skuGrpBean.setItemMin(qty);
                            else
                                skuGrpBean.setItemMin("0.000");
                        }
                        SchSalAreaList.add(skuGrpBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return SchSalAreaList;
    }
    /*create Claim entity*/

    /*get scheme slab item*/
    private static ArrayList<SchemeSlabBean> getSchemeSlabItem(String
                                                                       schemeGUID, SchemeListBean schemeListBean) {
        ArrayList<SchemeSlabBean> SchSalAreaList = new ArrayList<>();
        String SalesAreaQuery = Constants.SchemeSlabs + "?$filter= " + Constants.SchemeItemGUID + " eq guid'" + schemeGUID + "' &$orderby = SubItem asc";
        if (offlineStore != null) {
            SchemeSlabBean slabBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, SalesAreaQuery);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        slabBean = new SchemeSlabBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.SaleUnitID);
                        String mStrSlabUnitID = (String) property.getValue();
                        property = properties.get(Constants.SlabTypeDesc);
                        String mStrSlabTypeDesc = (String) property.getValue();
                        property = properties.get(Constants.SlabRuleDesc);
                        schemeListBean.setSlabRuleDesc((String) property.getValue() + " (" + mStrSlabTypeDesc + ")");
                        property = properties.get(Constants.SlabRuleID);
                        schemeListBean.setSlabRuleID((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        slabBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.SlabGUID);


                        ODataGuid mSchemeGuid = null;
                        String schemeSlabGUID = "";
                        try {
                            mSchemeGuid = (ODataGuid) property.getValue();
                            schemeSlabGUID = mSchemeGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.UOM);
                        String mStrUom = (String) property.getValue();

                        property = properties.get(Constants.FreeQtyUOM);
                        String mStrFreeQtyUOM = (String) property.getValue();

                        if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountAmount)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.DISC_AMOUNT);
                            property = properties.get(Constants.PayoutAmount);
                            BigDecimal payoutPer = (BigDecimal) property.getValue();
                            if (payoutPer != null) {
                                slabBean.setPayoutAmount(payoutPer.toString());
                            } else {
                                slabBean.setPayoutAmount("0.0");
                            }
                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeDiscountPercentage)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.DISC_PERCENTAGE);
                            property = properties.get(Constants.PayoutPerc);
                            BigDecimal payoutPer = (BigDecimal) property.getValue();
                            if (payoutPer != null) {
                                slabBean.setPayoutAmount(payoutPer.toString());
                            } else {
                                slabBean.setPayoutAmount("0.0");
                            }
                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeProduct)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            slabBean.setPayoutAmount(stFreeQty);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeSKUGroup)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            property = properties.get(Constants.SKUGroupID);
                            String mStrSKUGroupID = (String) property.getValue();

                            String materialDesc = getValueByColumnName(Constants.SchemeFreeMatGrpMaterials + "?$select=" + Constants.MaterialGrpDesc + " &$filter = "
                                    + Constants.SchFreeMatGrpGUID + " eq guid'" + Constants.convertStrGUID32to36(mStrSKUGroupID) + "' &$orderby = ItemNo asc &$top=1", Constants.MaterialGrpDesc);
                            slabBean.setPayoutAmount(stFreeQty);
                            slabBean.setMaterialDesc(materialDesc);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeCRSSKUGroup)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            property = properties.get(Constants.OrderMaterialGroupDesc);
                            String orderMatGroupDesc = (String) property.getValue();
                            slabBean.setPayoutAmount(stFreeQty);
                            slabBean.setMaterialDesc(orderMatGroupDesc);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeScratchCard)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.CardTitle);
                            String cardTitle = (String) property.getValue();

                            property = properties.get(Constants.NoOfCards);

                            String noOfCards = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                noOfCards = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                noOfCards = property.getValue().toString();

                            slabBean.setPayoutAmount(noOfCards);
                            slabBean.setMaterialDesc(cardTitle);


                        } else if (schemeListBean.getSlabRuleID().equalsIgnoreCase(Constants.SchemeFreeFreeArticle)) {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            property = properties.get(Constants.FreeArticle);
                            String freeArticle = (String) property.getValue();
                            slabBean.setPayoutAmount(stFreeQty);
                            slabBean.setMaterialDesc(freeArticle);


                        } else {
                            schemeListBean.setSlabRuleType(ConstantsUtils.FREE_QTY);
                            property = properties.get(Constants.FreeQty);
                            String stFreeQty = "";
                            if (checkNoUOMZero(mStrFreeQtyUOM))
                                stFreeQty = trimQtyDecimalPlace(property.getValue().toString());
                            else
                                stFreeQty = property.getValue().toString();

                            slabBean.setPayoutAmount(stFreeQty);
                        }
                        if (mStrSlabUnitID.equalsIgnoreCase(Constants.SaleUnitIDAmountWise)) {
                            property = properties.get(Constants.FromValue);
                        } else {
                            property = properties.get(Constants.FromQty);
                        }

                        String stFromQty = "";
                        if (checkNoUOMZero(mStrUom))
                            stFromQty = trimQtyDecimalPlace(property.getValue().toString());
                        else
                            stFromQty = property.getValue().toString();
                        slabBean.setFromQty(stFromQty);
                        if (mStrSlabUnitID.equalsIgnoreCase(Constants.SaleUnitIDAmountWise)) {
                            property = properties.get(Constants.ToValue);
                        } else {
                            property = properties.get(Constants.ToQty);
                        }
                        String stToQty = "";
                        if (checkNoUOMZero(mStrUom))
                            stToQty = trimQtyDecimalPlace(property.getValue().toString());
                        else
                            stToQty = property.getValue().toString();

                        if (mStrSlabUnitID.equalsIgnoreCase(Constants.SaleUnitIDAmountWise)) {
                            slabBean.setToQty(UtilConstants.removeLeadingZerowithTwoDecimal(slabBean.getFromQty()) + "-" + UtilConstants.removeLeadingZerowithTwoDecimal(stToQty));
                        } else {
                            slabBean.setToQty(slabBean.getFromQty() + "-" + stToQty);
                        }


                        SchSalAreaList.add(slabBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return SchSalAreaList;
    }

    /*create Claim header*/
    public static void createClaimHeader(Hashtable<String, String> header, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createClaimsHeaderEntity(header);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Claims,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Claims),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createClaimsHeaderEntity(Hashtable<String, String> hashTable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ClaimsEntity);

                newEntity.getProperties().put(ConstantsUtils.ClaimGUID,
                        new ODataPropertyDefaultImpl(ConstantsUtils.ClaimGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(ConstantsUtils.ClaimGUID))));

                newEntity.getProperties().put(Constants.SchemeGUID,
                        new ODataPropertyDefaultImpl(Constants.SchemeGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SchemeGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(ConstantsUtils.SchemeNo,
                        new ODataPropertyDefaultImpl(ConstantsUtils.SchemeNo, hashTable.get(ConstantsUtils.SchemeNo)));

                newEntity.getProperties().put(ConstantsUtils.ClaimDate,
                        new ODataPropertyDefaultImpl(ConstantsUtils.ClaimDate, UtilConstants.convertDateFormat(hashTable.get(ConstantsUtils.ClaimDate))));


                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*create claim documents*/
    public static void createClaimDocuments(HashMap<String, String> tableItem, UIListener
            uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createClaimDocumentsEntity(tableItem);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ClaimDocuments));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*claim document entity*/
    private static ODataRequestParamSingle createClaimDocumentsEntity
    (HashMap<String, String> hashTblItm) throws ODataParserException {
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                // CreateOperation the item Entity

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.DocumentMimeType));


                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();

                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.ClaimDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.Claims + "(guid'" + hashTblItm.get(ConstantsUtils.ClaimGUID) + "')/" + Constants.ClaimDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", ConstantsUtils.ClaimDocumentID + ":" + hashTblItm.get(ConstantsUtils.ClaimDocumentID).replace("-", "").toUpperCase() + ","
                        + ConstantsUtils.ClaimGUID + ":" + hashTblItm.get(ConstantsUtils.ClaimGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.DocumentStore + ":" + hashTblItm.get(Constants.DocumentStore) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentTypeID + ":" + hashTblItm.get(Constants.DocumentTypeID) + "");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    public static boolean checkNoUOMZero(String UOM) throws OfflineODataStoreException {
        boolean isNoUOMZero = false;
        String qry = Constants.ConfigTypesetTypes + "?$top=1 &$filter=" + Constants.Typeset + " eq '" + Constants.UOMNO0 + "' and " +
                Constants.Types + " eq '" + UOM + "'";

        if (UOM != null && !UOM.equalsIgnoreCase("")) {
            if (offlineStore != null) {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                if (entities != null && entities.size() > 0) {
                    isNoUOMZero = true;
                }

            }
        }
        return isNoUOMZero;
    }

    public static String trimQtyDecimalPlace(String qty) {
        if (qty.contains("."))
            return qty.substring(0, qty.indexOf("."));
        else
            return qty;
    }

    public static String trimQtyDecimalUpvalue(String qty) {
        String roundQry = "";
        try {
            if (qty.contains(".")) {
                String[] arrQty = qty.split("\\.");
                double roundValue = Double.parseDouble(arrQty[0]);
                double roundDecimal = Double.parseDouble(arrQty[1]);
                if (roundDecimal > 0) {
                    roundValue = roundValue + 1;
                }
                roundQry = roundValue + "";
                return roundQry.substring(0, roundQry.indexOf(".")) + "";
            } else
                return qty;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return roundQry;
    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getQtyValueByColumnName(String mQry, String columnName) throws
            OfflineODataStoreException {
        String stQty = "0";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(columnName);
                        BigDecimal freeQty = (BigDecimal) property.getValue();

                        if (freeQty != null) {
                            stQty = freeQty.toString();
                        } else {
                            stQty = "0.0";
                        }

                        if (!TextUtils.isEmpty(stQty)) {
                            return stQty;
                        }
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return stQty;

    }

    public static String makeCPStockItemQryByOrderMatGrp(String cpStkQry, String
            mCPStockItemGUIDCol) throws OfflineODataStoreException {

        String cpStkListQry = "";
        ArrayList<InvoiceHistoryBean> stkArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean cpStkItemBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStkQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    cpStkItemBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(mCPStockItemGUIDCol);
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        cpStkItemBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    stkArrayList.add(cpStkItemBean);

                }
            }
        }


        if (stkArrayList != null && stkArrayList.size() > 0) {
            for (int incVal = 0; incVal < stkArrayList.size(); incVal++) {
                if (incVal == 0 && incVal == stkArrayList.size() - 1) {
                    cpStkListQry = cpStkListQry
                            + "(" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "')";

                } else if (incVal == 0) {
                    cpStkListQry = cpStkListQry
                            + "(" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "'";

                } else if (incVal == stkArrayList.size() - 1) {
                    cpStkListQry = cpStkListQry
                            + "%20or%20" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "')";
                } else {
                    cpStkListQry = cpStkListQry
                            + "%20or%20" + mCPStockItemGUIDCol + "%20eq%20guid'"
                            + stkArrayList.get(incVal).getInvoiceGuid() + "'";
                }
            }
        } else {
            cpStkListQry = "";
        }

        return cpStkListQry;
    }

    /**
     * returns List of CPDMSDivision from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getSPValuesByCPGUIDAndDMSDivision(String qry) throws
            OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[12][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        try {
                            property = properties.get(Constants.CPTypeDesc);
                            distVal[0][incVal] = (String) property.getValue();
                        } catch (Exception e) {
                            distVal[0][incVal] = "";
                        }
                        property = properties.get(Constants.ParentID);
                        distVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentName);
                        distVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentTypeID);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.PartnerMgrGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[4][incVal] = mInvoiceGUID.guidAsString36().toUpperCase();
                            distVal[5][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.PartnerMgrNo);
                        distVal[6][incVal] = (String) property.getValue();
                        property = properties.get(Constants.PartnerMgrName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPTypeID);
                        distVal[9][incVal] = (String) property.getValue();
                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentTypDesc);
                        distVal[11][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static String makeSSSOQry(String sssoQry, String guidColumn) throws
            OfflineODataStoreException {

        String sssosListQry = "";
        ArrayList<InvoiceHistoryBean> sssoArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, sssoQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        invoiceBean = new InvoiceHistoryBean();
                        properties = entity.getProperties();
                        property = properties.get(guidColumn);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        sssoArrayList.add(invoiceBean);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }
        }


        if (sssoArrayList != null && sssoArrayList.size() > 0) {
            for (int incVal = 0; incVal < sssoArrayList.size(); incVal++) {
                if (incVal == 0 && incVal == sssoArrayList.size() - 1) {
                    sssosListQry = sssosListQry
                            + "(" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "')";

                } else if (incVal == 0) {
                    sssosListQry = sssosListQry
                            + "(" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "'";

                } else if (incVal == sssoArrayList.size() - 1) {
                    sssosListQry = sssosListQry
                            + "%20or%20" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "')";
                } else {
                    sssosListQry = sssosListQry
                            + "%20or%20" + guidColumn + "%20eq%20guid'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "'";
                }
            }
        } else {
            sssosListQry = "";
        }

        return sssosListQry;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTLSDByCurrentMonth(String createType, Context context, String
            mStrFirstDateMonth) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrFirstDateMonth.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                    } catch (LogonCoreException e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SecondarySOCreate)) {
                            try {
                                Date start = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH)
                                        .parse(splitToday[0]);
                                Date end = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH)
                                        .parse(createdOn[0]);
                              //  System.out.println(start);
                              //  System.out.println(end);
                                if (start.compareTo(end) == 0 || start.compareTo(end) < 0) {
                                    mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                                }

                            } catch (ParseException e) {
                                e.printStackTrace();
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static int getOtherBeatRetailerList(String retListQry) throws
            OfflineODataStoreException {

        int mOtherBeatVisitCount = 0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    mOtherBeatVisitCount = entities.size();
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mOtherBeatVisitCount;

    }

    /*get retailer visit count val*/
    public static String getECORetailerVisitCount(String mVisitQRY, String mStrColumnVal) {
        Set<String> mVisitVal = new HashSet<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mVisitQRY);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(mStrColumnVal);
                        try {
                            mVisitVal.add((property.getValue().toString().toUpperCase()));
                        } catch (Exception e) {
                            ODataGuid mGUIDVal = (ODataGuid) property.getValue();
                            mVisitVal.add(mGUIDVal.guidAsString36().toUpperCase());
                        }
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }

        return mVisitVal.size() + "";
    }

    public static ArrayList<CustomerBean> getCPListFromVisit(String visitQry) {
        ArrayList<CustomerBean> alRetBean = new ArrayList<>();
        if (offlineStore != null) {
            Set setCPList = new HashSet();
            CustomerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;
            String mStrStartTime = "", mStrEndTime = "";
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new CustomerBean((String) property.getValue());
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!setCPList.contains((String) property.getValue())) {
                            setCPList.add((String) property.getValue());

                            property = properties.get(Constants.CPName);
                            customerBean.setRetailerName((String) property.getValue());


                            property = properties.get(Constants.StartTime);

                            ODataDuration oDataDuration = null;
                            try {
                                oDataDuration = (ODataDuration) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mStrStartTime = UtilConstants.convertTimeOnly(oDataDuration.toString());

                            property = properties.get(Constants.EndTime);

                            try {
                                oDataDuration = (ODataDuration) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            mStrEndTime = UtilConstants.convertTimeOnly(oDataDuration.toString());

                            customerBean.setTimeTaken(Constants.getDiffTime(mStrStartTime, mStrEndTime));

                            alRetBean.add(customerBean);
                        }

                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        return alRetBean;
    }

    public static Set<String> getUniqueOutVisitFromVisit(String visitQry) {
        ArrayList<CustomerBean> alRetBean = new ArrayList<>();
        Set setCPList = new HashSet();
        if (offlineStore != null) {
            CustomerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new CustomerBean((String) property.getValue());
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!setCPList.contains((String) property.getValue())) {
                            setCPList.add((String) property.getValue());
                        }
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        return setCPList;
    }

    public static HashMap<String, String> getCPGrp3DescListFromCPDMSDiv(String cpQry) {
        HashMap<String, String> mapCPList = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Group3Desc);
                        String cpGrp3Desc = (String) property.getValue();
                        property = properties.get(Constants.CPGUID);
                        ODataGuid mGUIDVal = null;
                        try {
                            mGUIDVal = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!mapCPList.containsKey(mGUIDVal.guidAsString36().toUpperCase())) {
                            mapCPList.put(mGUIDVal.guidAsString36().toUpperCase(), cpGrp3Desc);
                        }

                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }
        return mapCPList;
    }

    public static String getBackendVersionName(String mQry) throws OfflineODataStoreException {
        String mStrBackEndVersionName = "0";
        if (offlineStore != null) {
            try {
                ODataProperty property;
                ODataPropMap properties;
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        try {
                            properties = entity.getProperties();
                            property = properties.get(Constants.TypeValue);
                            mStrBackEndVersionName = String.valueOf(property.getValue());
                        } catch (NumberFormatException exce) {
                            exce.printStackTrace();
                            mStrBackEndVersionName = "0";
                        }
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrBackEndVersionName;

    }

    public static String getUpdateType(String mQry) throws OfflineODataStoreException {
        String mStrBackEndVersionName = "0";
        if (offlineStore != null) {
            try {
                ODataProperty property;
                ODataPropMap properties;
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        try {
                            properties = entity.getProperties();
                            property = properties.get(Constants.TypeValue);
                            mStrBackEndVersionName = String.valueOf(property.getValue());
                        } catch (NumberFormatException exce) {
                            exce.printStackTrace();
                            mStrBackEndVersionName = "0";
                        }
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrBackEndVersionName;

    }

    public static String getNotificationTime(String mQry) throws OfflineODataStoreException {
        String mStrBackEndVersionName = "0";
        if (offlineStore != null) {
            try {
                ODataProperty property;
                ODataPropMap properties;
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        try {
                            properties = entity.getProperties();
                            property = properties.get(Constants.TypeValue);
                            mStrBackEndVersionName = String.valueOf(property.getValue());
                        } catch (NumberFormatException exce) {
                            exce.printStackTrace();
                            mStrBackEndVersionName = "0";
                        }
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrBackEndVersionName;

    }

    public static void getMaxStartDateTime(String strQry) throws OfflineODataStoreException {


        String attdVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.AttendanceGUID);
                        attdVal = property.getValue().toString();
                        Constants.HashMapEntityVal.put(Constants.AttendanceGUID, property.getValue());
                        property = properties.get(Constants.StartDate);
                        Constants.HashMapEntityVal.put(Constants.StartDate, property.getValue());
                        property = properties.get(Constants.StartTime);
                        Constants.HashMapEntityVal.put(Constants.StartTime, property.getValue());

//                        property = properties.get(Constants.EndDate);
//                        Constants.HashMapEntityVal.put(Constants.EndDate,property.getValue());
//                        property = properties.get(Constants.EndTime);
//                        Constants.HashMapEntityVal.put(Constants.EndTime,property.getValue());
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

    }

    public static void getMaxEndDateTime(String strQry) throws OfflineODataStoreException {


        String attdVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.AttendanceGUID);
                        attdVal = property.getValue().toString();
                        Constants.HashMapEntityVal.put(Constants.AttendanceGUID, property.getValue());
                        property = properties.get(Constants.StartDate);
                        Constants.HashMapEntityVal.put(Constants.StartDate, property.getValue());
                        property = properties.get(Constants.StartTime);
                        Constants.HashMapEntityVal.put(Constants.StartTime, property.getValue());

                        property = properties.get(Constants.EndDate);
                        Constants.HashMapEntityVal.put(Constants.EndDate, property.getValue());
                        property = properties.get(Constants.EndTime);
                        Constants.HashMapEntityVal.put(Constants.EndTime, property.getValue());
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

    }

    /*up date DOB Date Value to Channel partner in offline store*/
    private static ODataEntity updateRetailerDOBEntity(Hashtable<String, String> hashtable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

                newEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));

                try {
                    newEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                newEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                newEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                newEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                newEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                newEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                newEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                newEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                newEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                newEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                newEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                newEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                newEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                newEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                newEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                newEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                newEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                newEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                newEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                newEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
             /*   newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Update an existing Channel Partner in the local database for visit
     *
     * @throws OfflineODataStoreException
     */
    public static void updateDOB(Hashtable<String, String> table) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateRetailerDOBEntity(table);
            //Send the request to update ChannelPartner in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), null, Constants.ChannelPartners), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*update Anniversary Date Value to Channel partner in offline store*/
    private static ODataEntity updateRetailerAnniversaryEntity
    (Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

                newEntity.getProperties().put(Constants.Anniversary,
                        new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));

                try {
                    newEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                newEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                newEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                newEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                newEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                newEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                newEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                newEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                newEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                newEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                newEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                newEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                newEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                newEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                newEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                newEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                newEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                newEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                newEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                newEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
               /* newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Update an existing ChannelPartner in the local database for ChannelPartner
     *
     * @throws OfflineODataStoreException
     */
    public static void updateAnniversary(Hashtable<String, String> table) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateRetailerAnniversaryEntity(table);
            //Send the request to update channelPartner in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), null, Constants.ChannelPartners), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }


   /* public static void updateBatchAnniversaryReq(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity channelPartnerEntity = null, cpDmsDivisionEntity = null;
        try {
            channelPartnerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
            channelPartnerEntity.setResourcePath(Constants.ChannelPartners, Constants.ChannelPartners);
            offlineStore.allocateProperties(channelPartnerEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(channelPartnerEntity);

            channelPartnerEntity.getProperties().put(Constants.CPGUID,
                    new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

            channelPartnerEntity.getProperties().put(Constants.Anniversary,
                    new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));

            try {
                channelPartnerEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            channelPartnerEntity.getProperties().put(Constants.MobileNo,
                    new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
            channelPartnerEntity.getProperties().put(Constants.OutletName,
                    new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
            channelPartnerEntity.getProperties().put(Constants.OwnerName,
                    new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
            channelPartnerEntity.getProperties().put(Constants.RetailerProfile,
                    new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
            channelPartnerEntity.getProperties().put(Constants.Group2,
                    new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
            channelPartnerEntity.getProperties().put(Constants.PAN,
                    new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
            channelPartnerEntity.getProperties().put(Constants.VATNo,
                    new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
            channelPartnerEntity.getProperties().put(Constants.EmailID,
                    new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
            channelPartnerEntity.getProperties().put(Constants.PostalCode,
                    new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
            channelPartnerEntity.getProperties().put(Constants.Landmark,
                    new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
            channelPartnerEntity.getProperties().put(Constants.Address1,
                    new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
            channelPartnerEntity.getProperties().put(Constants.CPTypeID,
                    new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
            try {
                channelPartnerEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                channelPartnerEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            channelPartnerEntity.getProperties().put(Constants.ParentID,
                    new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
            channelPartnerEntity.getProperties().put(Constants.ParentTypeID,
                    new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
            channelPartnerEntity.getProperties().put(Constants.ParentName,
                    new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
            channelPartnerEntity.getProperties().put(Constants.StateID,
                    new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
            channelPartnerEntity.getProperties().put(Constants.CityDesc,
                    new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
            channelPartnerEntity.getProperties().put(Constants.CityID,
                    new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
            channelPartnerEntity.getProperties().put(Constants.DistrictDesc,
                    new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
            channelPartnerEntity.getProperties().put(Constants.DistrictID,
                    new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
            channelPartnerEntity.getProperties().put(Constants.CPNo,
                    new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
        *//*    channelPartnerEntity.getProperties().put(Constants.LOGINID,
                    new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*//*
            channelPartnerEntity.getProperties().put(Constants.StatusID,
                    new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
            channelPartnerEntity.getProperties().put(Constants.ApprvlStatusID,
                    new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, hashtable.get(Constants.ApprvlStatusID)));

            channelPartnerEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
            if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                channelPartnerEntity.setEtag(hashtable.get(Constants.Etag));
            }

            try {
                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    channelPartnerEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            String contentId = "1";
            ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
            // Create change set
            ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
            batchItem.setResourcePath(hashtable.get(Constants.SetResourcePath));
            batchItem.setMode(Mode.Update);
            batchItem.setContentID(contentId);
            batchItem.setPayload(channelPartnerEntity);

            cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);
            cpDmsDivisionEntity.setResourcePath(Constants.CPDMSDivisions, Constants.CPDMSDivisions);
            offlineStore.allocateProperties(cpDmsDivisionEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(cpDmsDivisionEntity);

            String cpDMSDivDetgry = Constants.CPDMSDivisions + "?$filter=" + Constants.CPGUID + " eq guid'" + hashtable.get(Constants.CPGUID) + "' ";

            SetResourcePath = "";

            cpDmsDivisionEntity = getCPDMSDivEntity(cpDMSDivDetgry, hashtable.get(Constants.CPGUID));

            if (cpDmsDivisionEntity != null) {
                ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                // Create change set
                cpDmsDivBatchItem.setResourcePath(SetResourcePath);
                cpDmsDivBatchItem.setMode(Mode.Update);
                cpDmsDivBatchItem.setContentID("2");
                cpDmsDivBatchItem.setPayload(cpDmsDivisionEntity);

                changeSetItem.add(cpDmsDivBatchItem);
            }

            changeSetItem.add(batchItem);

            ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
            requestParamBatch.add(changeSetItem);
            try {
                offlineStore.executeRequest(requestParamBatch);
				*//*OfflineRequestListener odataOfflineReqListener = new OfflineRequestListener(
						Operation.DeleteErrorArchive.getValue(), "");
				offlineStore.scheduleRequest(requestParamBatch,odataOfflineReqListener);*//*
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }*/

    public static void updateLatAndLong(Hashtable<String, String> table) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateRetailerLatLongEntity(table);
            //Send the request to update channelPartner in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), null, Constants.ChannelPartners), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

  /*  public static void updateBatchLatLongReq(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity channelPartnerEntity = null, cpDmsDivisionEntity = null;
        try {
            channelPartnerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
            channelPartnerEntity.setResourcePath(Constants.ChannelPartners, Constants.ChannelPartners);
            offlineStore.allocateProperties(channelPartnerEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(channelPartnerEntity);
            channelPartnerEntity.getProperties().put(Constants.CPGUID,
                    new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));
            try {
                channelPartnerEntity.getProperties().put(Constants.Anniversary,
                        new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            channelPartnerEntity.getProperties().put(Constants.MobileNo,
                    new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
            channelPartnerEntity.getProperties().put(Constants.OutletName,
                    new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
            channelPartnerEntity.getProperties().put(Constants.OwnerName,
                    new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
            channelPartnerEntity.getProperties().put(Constants.RetailerProfile,
                    new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
            channelPartnerEntity.getProperties().put(Constants.Group2,
                    new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
            channelPartnerEntity.getProperties().put(Constants.PAN,
                    new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
            channelPartnerEntity.getProperties().put(Constants.VATNo,
                    new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
            channelPartnerEntity.getProperties().put(Constants.EmailID,
                    new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
            channelPartnerEntity.getProperties().put(Constants.PostalCode,
                    new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
            channelPartnerEntity.getProperties().put(Constants.Landmark,
                    new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
            channelPartnerEntity.getProperties().put(Constants.Address1,
                    new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
            channelPartnerEntity.getProperties().put(Constants.CPTypeID,
                    new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
            try {
                channelPartnerEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                channelPartnerEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            channelPartnerEntity.getProperties().put(Constants.ParentID,
                    new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
            channelPartnerEntity.getProperties().put(Constants.ParentTypeID,
                    new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
            channelPartnerEntity.getProperties().put(Constants.ParentName,
                    new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
            channelPartnerEntity.getProperties().put(Constants.StateID,
                    new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
            channelPartnerEntity.getProperties().put(Constants.CityDesc,
                    new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
            channelPartnerEntity.getProperties().put(Constants.CityID,
                    new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
            channelPartnerEntity.getProperties().put(Constants.DistrictDesc,
                    new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
            channelPartnerEntity.getProperties().put(Constants.DistrictID,
                    new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
            channelPartnerEntity.getProperties().put(Constants.CPNo,
                    new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
       *//*     channelPartnerEntity.getProperties().put(Constants.LOGINID,
                    new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*//*
            channelPartnerEntity.getProperties().put(Constants.StatusID,
                    new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
            channelPartnerEntity.getProperties().put(Constants.ApprvlStatusID,
                    new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, hashtable.get(Constants.ApprvlStatusID)));

            channelPartnerEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
            if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                channelPartnerEntity.setEtag(hashtable.get(Constants.Etag));
            }

            try {
                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    channelPartnerEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            String contentId = "1";
            ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
            // Create change set
            ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
            batchItem.setResourcePath(hashtable.get(Constants.SetResourcePath));
            batchItem.setMode(Mode.Update);
            batchItem.setContentID(contentId);
            batchItem.setPayload(channelPartnerEntity);

            cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);
            cpDmsDivisionEntity.setResourcePath(Constants.CPDMSDivisions, Constants.CPDMSDivisions);
            offlineStore.allocateProperties(cpDmsDivisionEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(cpDmsDivisionEntity);

            String cpDMSDivDetgry = Constants.CPDMSDivisions + "?$filter=" + Constants.CPGUID + " eq guid'" + hashtable.get(Constants.CPGUID) + "' ";

            SetResourcePath = "";

            cpDmsDivisionEntity = getCPDMSDivEntity(cpDMSDivDetgry, hashtable.get(Constants.CPGUID));

            if (cpDmsDivisionEntity != null) {
                ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                // Create change set
                cpDmsDivBatchItem.setResourcePath(SetResourcePath);
                cpDmsDivBatchItem.setMode(Mode.Update);
                cpDmsDivBatchItem.setContentID("2");
                cpDmsDivBatchItem.setPayload(cpDmsDivisionEntity);

                changeSetItem.add(cpDmsDivBatchItem);
            }

            changeSetItem.add(batchItem);

            ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
            requestParamBatch.add(changeSetItem);
            try {
                offlineStore.executeRequest(requestParamBatch);
				*//*OfflineRequestListener odataOfflineReqListener = new OfflineRequestListener(
						Operation.DeleteErrorArchive.getValue(), "");
				offlineStore.scheduleRequest(requestParamBatch,odataOfflineReqListener);*//*
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }*/

    /*update Anniversary Date Value to Channel partner in offline store*/
    private static ODataEntity updateRetailerLatLongEntity
    (Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

                if (hashtable.get(Constants.Latitude) != "")
                    newEntity.getProperties().put(Constants.Latitude,
                            new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));

                if (hashtable.get(Constants.Longitude) != "")
                    newEntity.getProperties().put(Constants.Longitude,
                            new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));


                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

                try {
                    newEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    newEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                newEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                newEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                newEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                newEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                newEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                newEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                newEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                newEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                newEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                newEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                newEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                newEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                newEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                newEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                newEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                newEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                newEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                newEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                newEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
              /*  newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*private static ODataEntity getCPDMSDivEntity(String cpDMSDivDetgry, String mCPGUID) {
        ODataPropMap oDataProperties = null;
        ODataProperty oDataProperty = null;
        ODataEntity cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);

        ODataEntity cpDmsDivEntity = null;
        try {
            cpDmsDivEntity = OfflineManager.getRetDetails(cpDMSDivDetgry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }


        if (cpDmsDivEntity != null) {
            oDataProperties = cpDmsDivEntity.getProperties();
            try {
                oDataProperty = oDataProperties.get(Constants.CP1GUID);

                cpDmsDivisionEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(mCPGUID.toUpperCase())));

                ODataGuid cpDmsDivGuid = (ODataGuid) oDataProperty.getValue();
                SetResourcePath = Constants.CPDMSDivisions + "(guid'" + cpDmsDivGuid.guidAsString36().toUpperCase() + "')";

                cpDmsDivisionEntity.getProperties().put(Constants.CP1GUID,
                        new ODataPropertyDefaultImpl(Constants.CP1GUID, ODataGuidDefaultImpl.initWithString32(cpDmsDivGuid.guidAsString36().toUpperCase())));
            } catch (Exception e) {
                SetResourcePath = "";
            }
            oDataProperty = oDataProperties.get(Constants.PartnerMgrGUID);
            try {
                ODataGuid cpParMgrGuid = (ODataGuid) oDataProperty.getValue();
                cpDmsDivisionEntity.getProperties().put(Constants.PartnerMgrGUID,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(cpParMgrGuid.guidAsString36().toUpperCase())));
            } catch (Exception e) {
                SetResourcePath = "";
            }

            try {
                cpDmsDivisionEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, (String) oDataProperties.get(Constants.ParentName).getValue() != null ? (String) oDataProperties.get(Constants.ParentName).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.PartnerMgrNo,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrNo, (String) oDataProperties.get(Constants.PartnerMgrNo).getValue() != null ? (String) oDataProperties.get(Constants.PartnerMgrNo).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, (String) oDataProperties.get(Constants.CPTypeDesc).getValue() != null ? (String) oDataProperties.get(Constants.CPTypeDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, (String) oDataProperties.get(Constants.CPNo).getValue() != null ? (String) oDataProperties.get(Constants.CPNo).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, (String) oDataProperties.get(Constants.ParentID).getValue() != null ? (String) oDataProperties.get(Constants.ParentID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Name,
                        new ODataPropertyDefaultImpl(Constants.Name, (String) oDataProperties.get(Constants.Name).getValue() != null ?
                                (String) oDataProperties.get(Constants.Name).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, (String) oDataProperties.get(Constants.DMSDivision).getValue() != null ?
                                (String) oDataProperties.get(Constants.DMSDivision).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.DMSDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DMSDivisionDesc, (String) oDataProperties.get(Constants.DMSDivisionDesc).getValue() != null ?
                                (String) oDataProperties.get(Constants.DMSDivisionDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.RouteID,
                        new ODataPropertyDefaultImpl(Constants.RouteID, (String) oDataProperties.get(Constants.RouteID).getValue() != null ?
                                (String) oDataProperties.get(Constants.RouteID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.RouteDesc,
                        new ODataPropertyDefaultImpl(Constants.RouteDesc, (String) oDataProperties.get(Constants.RouteDesc).getValue() != null ?
                                (String) oDataProperties.get(Constants.RouteDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPUID,
                        new ODataPropertyDefaultImpl(Constants.CPUID, (String) oDataProperties.get(Constants.CPUID).getValue() != null ?
                                (String) oDataProperties.get(Constants.CPUID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, (String) oDataProperties.get(Constants.OwnerName).getValue() != null ?
                                (String) oDataProperties.get(Constants.OwnerName).getValue() : ""));

                try {
                    cpDmsDivisionEntity.getProperties().put(Constants.SalesPersonMobileNo,
                            new ODataPropertyDefaultImpl(Constants.SalesPersonMobileNo, (String) oDataProperties.get(Constants.SalesPersonMobileNo).getValue() != null ?
                                    (String) oDataProperties.get(Constants.SalesPersonMobileNo).getValue() : ""));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                cpDmsDivisionEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, (String) oDataProperties.get(Constants.RetailerProfile).getValue() != null ?
                                (String) oDataProperties.get(Constants.RetailerProfile).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, (String) oDataProperties.get(Constants.Group2).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group2).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Group3,
                        new ODataPropertyDefaultImpl(Constants.Group3, (String) oDataProperties.get(Constants.Group3).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group3).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.Group4,
                        new ODataPropertyDefaultImpl(Constants.Group4, (String) oDataProperties.get(Constants.Group4).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group4).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.Group5,
                        new ODataPropertyDefaultImpl(Constants.Group5, (String) oDataProperties.get(Constants.Group5).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group5).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, (String) oDataProperties.get(Constants.StatusID).getValue() != null ?
                                (String) oDataProperties.get(Constants.StatusID).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.ApprvlStatusID,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, (String) oDataProperties.get(Constants.ApprvlStatusID).getValue() != null ?
                                (String) oDataProperties.get(Constants.ApprvlStatusID).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.Currency,
                        new ODataPropertyDefaultImpl(Constants.Currency, (String) oDataProperties.get(Constants.Currency).getValue() != null ?
                                (String) oDataProperties.get(Constants.Currency).getValue() : ""));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
               *//* oDataProperty = oDataProperties.get(Constants.DiscountPer);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.DiscountPer,
                            new ODataPropertyDefaultImpl(Constants.DiscountPer,oDataProperty.getValue()));
                }*//*
                oDataProperty = oDataProperties.get(Constants.CreditLimit);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditLimit,
                            new ODataPropertyDefaultImpl(Constants.CreditLimit, oDataProperty.getValue()));
                }

                oDataProperty = oDataProperties.get(Constants.CreditDays);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditDays,
                            new ODataPropertyDefaultImpl(Constants.CreditDays, oDataProperty.getValue()));
                }

                oDataProperty = oDataProperties.get(Constants.CreditBills);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditBills,
                            new ODataPropertyDefaultImpl(Constants.CreditBills, oDataProperty.getValue()));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            cpDmsDivisionEntity.setResourcePath(SetResourcePath, SetResourcePath);
            if (cpDmsDivEntity.getEtag() != null) {
                cpDmsDivisionEntity.setEtag(cpDmsDivEntity.getEtag());
            }
        } else {
            return null;
        }


        return cpDmsDivisionEntity;
    }*/

    public static void updateRetilerBatchReq(Hashtable<String, String> hashtable, String
            comingFrom) throws ODataParserException {
        ODataEntity channelPartnerEntity = null, cpDmsDivisionEntity = null;
        try {
            channelPartnerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
            channelPartnerEntity.setResourcePath(Constants.ChannelPartners, Constants.ChannelPartners);
            offlineStore.allocateProperties(channelPartnerEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(channelPartnerEntity);

            channelPartnerEntity.getProperties().put(Constants.CPGUID,
                    new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

            if (comingFrom.equalsIgnoreCase(Constants.DOB)) {
                channelPartnerEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (comingFrom.equalsIgnoreCase(Constants.Anniversary)) {
                channelPartnerEntity.getProperties().put(Constants.Anniversary,
                        new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (comingFrom.equalsIgnoreCase(Constants.Latitude)) {
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                channelPartnerEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            channelPartnerEntity.getProperties().put(Constants.Source,
                    new ODataPropertyDefaultImpl(Constants.Source, hashtable.get(Constants.Source)));
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedAt,
                        new ODataPropertyDefaultImpl(Constants.CreatedAt, hashtable.get(Constants.CreatedAt)));

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedOn,
                        new ODataPropertyDefaultImpl(Constants.CreatedOn, hashtable.get(Constants.CreatedOn)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedBy,
                        new ODataPropertyDefaultImpl(Constants.CreatedBy, hashtable.get(Constants.CreatedBy)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.RouteID,
                        new ODataPropertyDefaultImpl(Constants.RouteID, hashtable.get(Constants.RouteID)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                channelPartnerEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                channelPartnerEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                channelPartnerEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                channelPartnerEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                channelPartnerEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                channelPartnerEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                channelPartnerEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                channelPartnerEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                channelPartnerEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                channelPartnerEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                channelPartnerEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                channelPartnerEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                channelPartnerEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                channelPartnerEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                channelPartnerEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                channelPartnerEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                channelPartnerEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                channelPartnerEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                channelPartnerEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                channelPartnerEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
            /*    channelPartnerEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                channelPartnerEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
                channelPartnerEntity.getProperties().put(Constants.ApprvlStatusID,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, hashtable.get(Constants.ApprvlStatusID)));

                channelPartnerEntity.getProperties().put(Constants.CPUID,
                        new ODataPropertyDefaultImpl(Constants.CPUID, hashtable.get(Constants.CPUID)));
                channelPartnerEntity.getProperties().put(Constants.WeeklyOff,
                        new ODataPropertyDefaultImpl(Constants.WeeklyOff, hashtable.get(Constants.WeeklyOff)));
                channelPartnerEntity.getProperties().put(Constants.Tax1,
                        new ODataPropertyDefaultImpl(Constants.Tax1, hashtable.get(Constants.Tax1)));
                channelPartnerEntity.getProperties().put(Constants.TaxRegStatus,
                        new ODataPropertyDefaultImpl(Constants.TaxRegStatus, hashtable.get(Constants.TaxRegStatus)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            channelPartnerEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
            if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                channelPartnerEntity.setEtag(hashtable.get(Constants.Etag));
            }

            try {
                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    channelPartnerEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            String contentId = "1";
            ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
            // Create change set
            ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
            batchItem.setResourcePath(hashtable.get(Constants.SetResourcePath));
            batchItem.setMode(Mode.Update);
            batchItem.setContentID(contentId);
            batchItem.setPayload(channelPartnerEntity);

            String cpDMSDivDetgry = Constants.CPDMSDivisions + "?$filter=" + Constants.CPGUID + " eq guid'" + hashtable.get(Constants.CPGUID) + "' ";
            List<ODataEntity> entities = null;

            try {
                entities = OfflineManager.getEntities(cpDMSDivDetgry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity cpDmsDivEntity : entities) {
                    cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);
                    cpDmsDivisionEntity.setResourcePath(Constants.CPDMSDivisions, Constants.CPDMSDivisions);
                    offlineStore.allocateProperties(cpDmsDivisionEntity, ODataStore.PropMode.Keys);
                    offlineStore.allocateNavigationProperties(cpDmsDivisionEntity);
                    SetResourcePath = "";
                    cpDmsDivisionEntity = getCPDMSDivEntity(cpDMSDivDetgry, hashtable.get(Constants.CPGUID), cpDmsDivEntity, hashtable);
                    if (cpDmsDivisionEntity != null) {
                        ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                        // Create change set
                        cpDmsDivBatchItem.setResourcePath(SetResourcePath);
                        cpDmsDivBatchItem.setMode(Mode.Update);
                        cpDmsDivBatchItem.setContentID("2");
                        if (hashtable.get(Constants.IsLatLongUpdate).equalsIgnoreCase("")) {
                            cpDmsDivBatchItem.setPayload(cpDmsDivisionEntity);
                        } else {
                            cpDmsDivBatchItem.setPayload(cpDmsDivEntity);
                        }
                        changeSetItem.add(cpDmsDivBatchItem);
                    }
                }
            }


            changeSetItem.add(batchItem);

            ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
            requestParamBatch.add(changeSetItem);
            try {
                offlineStore.executeRequest(requestParamBatch);
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static ODataEntity getCPDMSDivEntity(String cpDMSDivDetgry, String
            mCPGUID, ODataEntity cpDmsDivEntity, Hashtable<String, String> hashtable) {
        ODataPropMap oDataProperties = null;
        ODataProperty oDataProperty = null;
        ODataEntity cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);

        /*ODataEntity cpDmsDivEntity = null;
        try {
            cpDmsDivEntity = OfflineManager.getRetDetails(cpDMSDivDetgry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }*/


        if (cpDmsDivEntity != null) {
            oDataProperties = cpDmsDivEntity.getProperties();
            try {
                oDataProperty = oDataProperties.get(Constants.CP1GUID);

                cpDmsDivisionEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(mCPGUID.toUpperCase())));

                ODataGuid cpDmsDivGuid = (ODataGuid) oDataProperty.getValue();
                SetResourcePath = Constants.CPDMSDivisions + "(guid'" + cpDmsDivGuid.guidAsString36().toUpperCase() + "')";

                cpDmsDivisionEntity.getProperties().put(Constants.CP1GUID,
                        new ODataPropertyDefaultImpl(Constants.CP1GUID, ODataGuidDefaultImpl.initWithString32(cpDmsDivGuid.guidAsString36().toUpperCase())));
            } catch (Exception e) {
                SetResourcePath = "";
            }
            oDataProperty = oDataProperties.get(Constants.PartnerMgrGUID);
            try {
                ODataGuid cpParMgrGuid = (ODataGuid) oDataProperty.getValue();
                cpDmsDivisionEntity.getProperties().put(Constants.PartnerMgrGUID,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(cpParMgrGuid.guidAsString36().toUpperCase())));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                cpDmsDivisionEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, (String) oDataProperties.get(Constants.ParentName).getValue() != null ? (String) oDataProperties.get(Constants.ParentName).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.PartnerMgrNo,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrNo, (String) oDataProperties.get(Constants.PartnerMgrNo).getValue() != null ? (String) oDataProperties.get(Constants.PartnerMgrNo).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, (String) oDataProperties.get(Constants.CPTypeDesc).getValue() != null ? (String) oDataProperties.get(Constants.CPTypeDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, (String) oDataProperties.get(Constants.CPNo).getValue() != null ? (String) oDataProperties.get(Constants.CPNo).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, (String) oDataProperties.get(Constants.ParentID).getValue() != null ? (String) oDataProperties.get(Constants.ParentID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, (String) oDataProperties.get(Constants.ParentTypeID).getValue() != null ? (String) oDataProperties.get(Constants.ParentTypeID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Name,
                        new ODataPropertyDefaultImpl(Constants.Name, (String) oDataProperties.get(Constants.Name).getValue() != null ?
                                (String) oDataProperties.get(Constants.Name).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, (String) oDataProperties.get(Constants.DMSDivision).getValue() != null ?
                                (String) oDataProperties.get(Constants.DMSDivision).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.DMSDivisionDesc,
                        new ODataPropertyDefaultImpl(Constants.DMSDivisionDesc, (String) oDataProperties.get(Constants.DMSDivisionDesc).getValue() != null ?
                                (String) oDataProperties.get(Constants.DMSDivisionDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.RouteID,
                        new ODataPropertyDefaultImpl(Constants.RouteID, (String) oDataProperties.get(Constants.RouteID).getValue() != null ?
                                (String) oDataProperties.get(Constants.RouteID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.RouteDesc,
                        new ODataPropertyDefaultImpl(Constants.RouteDesc, (String) oDataProperties.get(Constants.RouteDesc).getValue() != null ?
                                (String) oDataProperties.get(Constants.RouteDesc).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPUID,
                        new ODataPropertyDefaultImpl(Constants.CPUID, (String) oDataProperties.get(Constants.CPUID).getValue() != null ?
                                (String) oDataProperties.get(Constants.CPUID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, (String) oDataProperties.get(Constants.OwnerName).getValue() != null ?
                                (String) oDataProperties.get(Constants.OwnerName).getValue() : ""));

                try {
                    cpDmsDivisionEntity.getProperties().put(Constants.SalesPersonMobileNo,
                            new ODataPropertyDefaultImpl(Constants.SalesPersonMobileNo, (String) oDataProperties.get(Constants.SalesPersonMobileNo).getValue() != null ?
                                    (String) oDataProperties.get(Constants.SalesPersonMobileNo).getValue() : ""));
                } catch (Exception e) {
                    e.printStackTrace();
                }


                if (hashtable.get(Constants.comingFrom).equalsIgnoreCase(Constants.RetailerChange)) {
                    try {
                        cpDmsDivisionEntity.getProperties().put(Constants.RetailerProfile,
                                new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                        cpDmsDivisionEntity.getProperties().put(Constants.Group4,
                                new ODataPropertyDefaultImpl(Constants.Group4, hashtable.get(Constants.Group4)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    cpDmsDivisionEntity.getProperties().put(Constants.RetailerProfile,
                            new ODataPropertyDefaultImpl(Constants.RetailerProfile, (String) oDataProperties.get(Constants.RetailerProfile).getValue() != null ?
                                    (String) oDataProperties.get(Constants.RetailerProfile).getValue() : ""));
                    cpDmsDivisionEntity.getProperties().put(Constants.Group4,
                            new ODataPropertyDefaultImpl(Constants.Group4, (String) oDataProperties.get(Constants.Group4).getValue() != null ?
                                    (String) oDataProperties.get(Constants.Group4).getValue() : ""));

                }

                cpDmsDivisionEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, (String) oDataProperties.get(Constants.Group2).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group2).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Group3,
                        new ODataPropertyDefaultImpl(Constants.Group3, (String) oDataProperties.get(Constants.Group3).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group3).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.Group5,
                        new ODataPropertyDefaultImpl(Constants.Group5, (String) oDataProperties.get(Constants.Group5).getValue() != null ?
                                (String) oDataProperties.get(Constants.Group5).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, (String) oDataProperties.get(Constants.StatusID).getValue() != null ?
                                (String) oDataProperties.get(Constants.StatusID).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.ApprvlStatusID,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, (String) oDataProperties.get(Constants.ApprvlStatusID).getValue() != null ?
                                (String) oDataProperties.get(Constants.ApprvlStatusID).getValue() : ""));
                cpDmsDivisionEntity.getProperties().put(Constants.Currency,
                        new ODataPropertyDefaultImpl(Constants.Currency, (String) oDataProperties.get(Constants.Currency).getValue() != null ?
                                (String) oDataProperties.get(Constants.Currency).getValue() : ""));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                oDataProperty = oDataProperties.get(Constants.DiscountPer);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.DiscountPer,
                            new ODataPropertyDefaultImpl(Constants.DiscountPer, oDataProperty.getValue()));
                }
                oDataProperty = oDataProperties.get(Constants.CreditLimit);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditLimit,
                            new ODataPropertyDefaultImpl(Constants.CreditLimit, oDataProperty.getValue()));
                }

                oDataProperty = oDataProperties.get(Constants.CreditDays);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditDays,
                            new ODataPropertyDefaultImpl(Constants.CreditDays, oDataProperty.getValue()));
                }

                oDataProperty = oDataProperties.get(Constants.CreditBills);
                if (oDataProperty != null) {
                    cpDmsDivisionEntity.getProperties().put(Constants.CreditBills,
                            new ODataPropertyDefaultImpl(Constants.CreditBills, oDataProperty.getValue()));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            cpDmsDivisionEntity.setResourcePath(SetResourcePath, SetResourcePath);
            if (cpDmsDivEntity.getEtag() != null) {
                cpDmsDivisionEntity.setEtag(cpDmsDivEntity.getEtag());
            }
        } else {
            return null;
        }


        return cpDmsDivisionEntity;
    }

    private static ODataEntity getBussinessEntity(Hashtable<String, String> header, HashMap<String, String> itemTable, String resourcePath) {
        ODataPropMap oDataProperties = null;
        ODataProperty oDataProperty = null;
        ODataEntity cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPBusinessItemEntity);

        /*ODataEntity cpDmsDivEntity = null;
        try {
            cpDmsDivEntity = OfflineManager.getRetDetails(cpDMSDivDetgry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }*/


//        if (cpDmsDivEntity != null) {
//            oDataProperties = cpDmsDivEntity.getProperties();
//            oDataProperty = oDataProperties.get(Constants.CPBUSGUID);
//            ODataGuid oDataGuid = (ODataGuid) oDataProperty.getValue();
        try {

            cpDmsDivisionEntity.getProperties().put(Constants.CPBUSGUID,
                    new ODataPropertyDefaultImpl(Constants.CPBUSGUID, ODataGuidDefaultImpl.initWithString36(itemTable.get(Constants.CPBUSGUID))));

            cpDmsDivisionEntity.getProperties().put(Constants.CPGUID,
                    new ODataPropertyDefaultImpl(Constants.CPGUID, itemTable.get(Constants.CPGUID)));

            cpDmsDivisionEntity.getProperties().put(Constants.CPMKTGUID,
                    new ODataPropertyDefaultImpl(Constants.CPMKTGUID, ODataGuidDefaultImpl.initWithString36(itemTable.get(Constants.CPMKTGUID))));

            cpDmsDivisionEntity.getProperties().put(Constants.AnnualTurnover,
                    new ODataPropertyDefaultImpl(Constants.AnnualTurnover, BigDecimal.valueOf(Double.parseDouble(itemTable.get(Constants.AnnualTurnover)))));

            cpDmsDivisionEntity.getProperties().put(Constants.AllBusinessID,
                    new ODataPropertyDefaultImpl(Constants.AllBusinessID, itemTable.get(Constants.AllBusinessID)));

            cpDmsDivisionEntity.getProperties().put(Constants.AllBusinessDesc,
                    new ODataPropertyDefaultImpl(Constants.AllBusinessDesc, itemTable.get(Constants.AllBusinessDesc)));


            cpDmsDivisionEntity.setResourcePath(resourcePath, resourcePath);
//                if (cpDmsDivEntity.getEtag() != null) {
//                    cpDmsDivisionEntity.setEtag(cpDmsDivEntity.getEtag());
//                }
        } catch (Exception e) {
            e.printStackTrace();
        }
//        }
        return cpDmsDivisionEntity;
    }

    private static ODataEntity getCompetitorEntity(String cpDMSDivDetgry, String
            mCPGUID, ODataEntity cpDmsDivEntity) {
        ODataPropMap oDataProperties = null;
        ODataProperty oDataProperty = null;
        ODataEntity cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CompetitorSaleEntity);

        /*ODataEntity cpDmsDivEntity = null;
        try {
            cpDmsDivEntity = OfflineManager.getRetDetails(cpDMSDivDetgry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }*/


        if (cpDmsDivEntity != null) {
            oDataProperties = cpDmsDivEntity.getProperties();
            oDataProperty = oDataProperties.get(Constants.CompSalesGUID);
            ODataGuid oDataGuid = (ODataGuid) oDataProperty.getValue();
            try {

                cpDmsDivisionEntity.getProperties().put(Constants.CompSalesGUID,
                        new ODataPropertyDefaultImpl(Constants.CompSalesGUID, (ODataGuid) oDataProperties.get(Constants.CompSalesGUID).getValue() != null ? (ODataGuid) oDataProperties.get(Constants.CompSalesGUID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, (String) oDataProperties.get(Constants.CPGUID).getValue() != null ? (String) oDataProperties.get(Constants.CPGUID).getValue() : ""));

                cpDmsDivisionEntity.getProperties().put(Constants.CPMKTGUID,
                        new ODataPropertyDefaultImpl(Constants.CPMKTGUID, (ODataGuid) oDataProperties.get(Constants.CPMKTGUID).getValue() != null ? (ODataGuid) oDataProperties.get(Constants.CPMKTGUID).getValue() : ""));


                SetResourcePath = Constants.CompetitorSales + "(guid'" + oDataGuid.guidAsString36().toUpperCase() + "')";

                cpDmsDivisionEntity.setResourcePath(SetResourcePath, SetResourcePath);
                if (cpDmsDivEntity.getEtag() != null) {
                    cpDmsDivisionEntity.setEtag(cpDmsDivEntity.getEtag());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return cpDmsDivisionEntity;
    }

    /*
     get cpdmsDevision list
      */
    public static ArrayList<CPDMSDivisionBean> getCPDMSDivisionList(String query) {
        ArrayList<CPDMSDivisionBean> cpDMSDivisionList = new ArrayList<>();
        if (offlineStore != null) {
            CPDMSDivisionBean cpdmsDivisionBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, query);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        cpdmsDivisionBean = new CPDMSDivisionBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.DMSDivision);
                        cpdmsDivisionBean.setdMSDivision((String) property.getValue());
                        property = properties.get(Constants.Group1);
                        cpdmsDivisionBean.setGroup1((String) property.getValue());
                        property = properties.get(Constants.Group2);
                        cpdmsDivisionBean.setGroup2((String) property.getValue());
                        property = properties.get(Constants.Group3);
                        cpdmsDivisionBean.setGroup3((String) property.getValue());
                        property = properties.get(Constants.Group4);
                        cpdmsDivisionBean.setGroup4((String) property.getValue());
                        cpDMSDivisionList.add(cpdmsDivisionBean);
                    }
                }

            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }
        return cpDMSDivisionList;
    }

    public static DmsDivQryBean getDMSDIVQry(String cpspQry) throws OfflineODataStoreException {

        String mDMSDIV = "", mDMSDIVQry = "", mDMSCVGQry = "", mDMSDIVIDQry = "", mDMSDIVSSINVQry = "";
        DmsDivQryBean dmsDivQry = new DmsDivQryBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpspQry);

            if (entities != null && entities.size() > 0) {

                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.DMSDivisionID);
                    mDMSDIV = (String) property.getValue();
                    if (mDMSDIVQry.length() == 0) {
                        mDMSDIVQry = mDMSDIVQry + "startswith(" + Constants.DMSDivision + ",'" + mDMSDIV + "')";
                        mDMSCVGQry = mDMSCVGQry + "startswith(" + Constants.CvgValue + ",'" + mDMSDIV + "')";
                        mDMSDIVSSINVQry = mDMSDIVSSINVQry + "startswith(" + Constants.DmsDivision + ",'" + mDMSDIV + "')";
                        mDMSDIVIDQry = mDMSDIVIDQry + "startswith(" + Constants.DMSDivisionID + ",'" + mDMSDIV + "')";
                    } else {
                        mDMSDIVQry = mDMSDIVQry + " or startswith(" + Constants.DMSDivision + ",'" + mDMSDIV + "')";
                        mDMSCVGQry = mDMSCVGQry + " or startswith(" + Constants.CvgValue + ",'" + mDMSDIV + "')";
                        mDMSDIVSSINVQry = mDMSDIVSSINVQry + " or startswith(" + Constants.DmsDivision + ",'" + mDMSDIV + "')";
                        mDMSDIVIDQry = mDMSDIVIDQry + " or startswith(" + Constants.DMSDivisionID + ",'" + mDMSDIV + "')";
                    }
                }
            }
        }

        if (!mDMSDIVQry.equalsIgnoreCase("")) {
            dmsDivQry.setDMSDivisionQry("(" + mDMSDIVQry + ")");  // CPStockItems ,Brands,BrandCategories,MaterialCategories,CPDMSDivisions
            dmsDivQry.setCVGValueQry("(" + mDMSCVGQry + ")");  // KPIItems
            dmsDivQry.setDMSDivisionSSInvQry("(" + mDMSDIVSSINVQry + ")");   // SSInvoices
            dmsDivQry.setDMSDivisionIDQry("(" + mDMSDIVIDQry + ")");  // Scheme sales area
        } else {
            dmsDivQry.setDMSDivisionQry("(startswith(" + Constants.DMSDivision + ",''))");  // CPStockItems ,Brands,BrandCategories,MaterialCategories,CPDMSDivisions
            dmsDivQry.setCVGValueQry("(startswith(" + Constants.CvgValue + ",''))");  // KPIItems
            dmsDivQry.setDMSDivisionSSInvQry("(startswith(" + Constants.DmsDivision + ",''))");   // SSInvoices
            dmsDivQry.setDMSDivisionIDQry("(startswith(" + Constants.DMSDivisionID + ",''))");  // Scheme sales area
        }

        return dmsDivQry;
    }

    /**
     * Create a new entity for VisitActivities in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createCPDMS(Hashtable<String, String> hashtable) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity retailerCreateEntity = createCPDMSDIVEntity(hashtable);

//            offlineStore.executeCreateEntity(retailerCreateEntity, Constants.CPDMSDivisions, null);

            offlineStore.scheduleCreateEntity(retailerCreateEntity, Constants.CPDMSDivisions,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.CPDMSDivisions),
                    null);

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Creates a entity to start new visit in the local database
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createCPDMSDIVEntity(Hashtable<String, String> hashtable) throws
            ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);

                offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID).toUpperCase())));
                newEntity.getProperties().put(Constants.CP1GUID,
                        new ODataPropertyDefaultImpl(Constants.CP1GUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CP1GUID).toUpperCase())));
                newEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                newEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                newEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                newEntity.getProperties().put(Constants.DMSDivision,
                        new ODataPropertyDefaultImpl(Constants.DMSDivision, hashtable.get(Constants.DMSDivision)));
                newEntity.getProperties().put(Constants.SalesPersonMobileNo,
                        new ODataPropertyDefaultImpl(Constants.SalesPersonMobileNo, hashtable.get(Constants.MobileNo)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashtable.get(Constants.CPTypeDesc)));
                newEntity.getProperties().put(Constants.PartnerMgrGUID,
                        new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID).toUpperCase())));
                newEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static List<ODataEntity> getEntities(String strQry) throws
            OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        List<ODataEntity> entities = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return entities;

    }

    public static ArrayList<RemarkReasonBean> getRemarksReason(String query) throws
            OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                } else {
                    reasonList.add(new RemarkReasonBean(Constants.str_01, "Key Person Not Available"));
                    reasonList.add(new RemarkReasonBean(Constants.str_02, "Outlet Closed"));
                    reasonList.add(new RemarkReasonBean(Constants.str_03, "No order received due to financial issue"));
                    reasonList.add(new RemarkReasonBean(Constants.str_04, "No order received due to high stock hold"));
                    reasonList.add(new RemarkReasonBean(Constants.str_05, "Market Closed"));
                    reasonList.add(new RemarkReasonBean(Constants.str_06, "Others"));
                }


            }
        }
        return reasonList;
    }

    private static ODataResponseSingle readSingleOdataRequest(String retListQry) throws
            OfflineODataStoreException {
        //Define the resource path
        ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
        request.setMode(ODataRequestParamSingle.Mode.Read);
        request.setResourcePath(retListQry);
        //Send a request to read the ChannelPartners from the local database
        ODataResponseSingle response = null;
        try {
            response = (ODataResponseSingle) offlineStore.
                    executeRequest(request);
            //Check if the response is an error
            if (response.getPayloadType() == ODataPayload.Type.Error) {
                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                        response.getPayload();
                throw new OfflineODataStoreException(error.getMessage());
                //Check if the response contains EntitySet
            }
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        return response;
    }

    public static HashMap<String, MustSellBean> getMustSellMaterialsList(String segMatqry) throws
            OfflineODataStoreException {
        HashMap<String, MustSellBean> hashMaMustSell = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStoreMustSell != null) {
            ODataProperty property;
            ODataPropMap properties;
            String segID = "", mStrOrdGrp = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStoreMustSell, segMatqry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();
                        MustSellBean mustSellBean = new MustSellBean();
                        property = properties.get(Constants.OrderMatGrp);
                        mStrOrdGrp = (String) property.getValue();

                        property = properties.get(Constants.MSLInd);
                        mustSellBean.setMSLInd((String) property.getValue());

                        property = properties.get(Constants.SellIndicator);
                        mustSellBean.setSellIndicator((String) property.getValue());

//                        property = properties.get(Constants.CrossSell);
//                        mustSellBean.setCrossSell((String)property.getValue());
//
//                        property = properties.get(Constants.UPSell);
//                        mustSellBean.setUPSell((String)property.getValue());

                        property = properties.get(Constants.UOM);
                        mustSellBean.setUOM((String) property.getValue());

                        property = properties.get(Constants.SOQ);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                mustSellBean.setSOQ(mQty.doubleValue() + "");
                            } else {
                                mustSellBean.setSOQ("0");
                            }

                        } else {
                            mustSellBean.setSOQ("0");
                        }

                        hashMaMustSell.put(mStrOrdGrp, mustSellBean);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return hashMaMustSell;

    }

    public static HashMap<String, MustSellBean> getMustSellMatList
            (List<ODataEntity> entities,
             String stockOwner, String mStrBundleRetID,
             String mStrCPTypeID, String mStrParentID,
             String dmsDivQry, String validTo) {

        HashMap<String, MustSellBean> hashMaMustSell = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            String segID = "", mStrOrdGrp = ""/*,mStkOwner = "",mRetID="",
                    mCPTypeID="",mParentID="",mDiv="",mValidTo=""*/;
            BigDecimal mQty = new BigDecimal("0");
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();
                        MustSellBean mustSellBean = new MustSellBean();
                        property = properties.get(Constants.OrderMatGrp);
                        mStrOrdGrp = (String) property.getValue();

                        property = properties.get(Constants.MSLInd);
                        mustSellBean.setMSLInd((String) property.getValue());

                        property = properties.get(Constants.SellIndicator);
                        mustSellBean.setSellIndicator((String) property.getValue());

                        property = properties.get(Constants.UOM);
                        mustSellBean.setUOM((String) property.getValue());

                        property = properties.get(Constants.ParentNo);
                        if (property != null) {
                            mustSellBean.setParentNo((String) property.getValue() != null ? (String) property.getValue() : "");
                        } else {
                            mustSellBean.setParentNo("");
                        }

                        property = properties.get(Constants.ParentType);
                        if (property != null) {
                            mustSellBean.setParentType((String) property.getValue() != null ? (String) property.getValue() : "");
                        } else {
                            mustSellBean.setParentType("");
                        }

                        property = properties.get(Constants.CPNo);
                        if (property != null) {
                            mustSellBean.setCPNo((String) property.getValue() != null ? (String) property.getValue() : "");
                        } else {
                            mustSellBean.setCPNo("");
                        }

                        property = properties.get(Constants.CPType);
                        if (property != null) {
                            mustSellBean.setCPType((String) property.getValue() != null ? (String) property.getValue() : "");
                        } else {
                            mustSellBean.setCPType("");
                        }

                        property = properties.get(Constants.DmsDivision);
                        if (property != null) {
                            mustSellBean.setDmsDivision((String) property.getValue() != null ? (String) property.getValue() : "");
                        } else {
                            mustSellBean.setDmsDivision("");
                        }

                        property = properties.get(Constants.SOQ);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                mustSellBean.setSOQ(mQty.doubleValue() + "");
                            } else {
                                mustSellBean.setSOQ("0");
                            }

                        } else {
                            mustSellBean.setSOQ("0");
                        }

                        property = properties.get(Constants.ValidTo);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertGregorianCalendarToYYYYMMDDFormat((GregorianCalendar) property.getValue());
                        } else {
                            convertDateFormat = "";
                        }

                        boolean isValidDate = Constants.checkPresentFutureDate(convertDateFormat);

                        if (mustSellBean.getCPNo().equalsIgnoreCase(mStrBundleRetID)
                                && mustSellBean.getCPType().equalsIgnoreCase(mStrCPTypeID)
                                && mustSellBean.getParentType().equalsIgnoreCase(stockOwner)
                                && mustSellBean.getParentNo().equalsIgnoreCase(mStrParentID)
                                && dmsDivQry.contains(mustSellBean.getDmsDivision()) && isValidDate) {
                            hashMaMustSell.put(mStrOrdGrp, mustSellBean);
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return hashMaMustSell;

    }

    public static boolean isOfflineStoreOpenMustSell() {
        boolean isOpen = false;
        try {
            if (offlineStoreMustSell != null && ODataOfflineStoreState.ODataOfflineStoreOpen.name().equals(storeState)) {
                isOpen = true;
            }
            return isOpen;
        } catch (Exception e) {
            return isOpen;
        }
    }

    public static boolean openOfflineStoreMustSell(Context context, UIListener uiListener) throws
            OfflineODataStoreException {
        if (!isOfflineStoreOpenMustSell()) {
            try {
                //This instantiate the native UDB libraries which are located in the

                ODataOfflineStore.globalInit();
                //Get application endpoint URL
                LogonCoreContext lgCtx = LogonCore.getInstance().getLogonContext();
                String endPointURL = lgCtx.getAppEndPointUrl();
                URL url = new URL(endPointURL);
                // Define the offline store options.
                // Connection parameter and credentials and
                // the application connection id we got at the registration

                optionsMustSell = new ODataOfflineStoreOptions();
                optionsMustSell.storeEncryptionKey = Constants.EncryptKey;
                optionsMustSell.host = url.getHost();
                optionsMustSell.port = String.valueOf(url.getPort());
                optionsMustSell.enableHTTPS = lgCtx.isHttps();
                optionsMustSell.enableRepeatableRequests = true;
                // the serviceRoot is the backend connector name, which is usually the same
                // as the application configuration name in the SMP Management Cockpit
                optionsMustSell.serviceRoot = Configuration.MustSell;

                //for Relay enable next line
                if (lgCtx.getResourcePath() != null && !lgCtx.getResourcePath().equalsIgnoreCase("")) {
                    optionsMustSell.urlSuffix = lgCtx.getResourcePath() + "/" + lgCtx.getFarmId();
                }

                //The logon configurator uses the information obtained in the registration
                // (i.e endpoint URL, login, etc ) to configure the conversation manager
                IManagerConfigurator configurator =
                        LogonUIFacade.getInstance().getLogonConfigurator(context);
                HttpConversationManager manager = new HttpConversationManager(context);
                configurator.configure(manager);
                optionsMustSell.conversationManager = manager;
                optionsMustSell.storeName = Constants.STORE_NAME_MustSell;

                optionsMustSell.customHeaders.put(Constants.arteria_dayfilter, Constants.NO_OF_DAYS);
                String collectionName = Constants.MustSells;
                if (collectionName.equalsIgnoreCase(Constants.MerchReviewImages) || collectionName.equalsIgnoreCase(Constants.Documents) || collectionName.equalsIgnoreCase(Constants.SchemeCPDocuments) || collectionName.equalsIgnoreCase(Constants.ClaimDocuments)) {
                    optionsMustSell.addDefiningRequest(collectionName, collectionName, true);
                } else {
                    optionsMustSell.addDefiningRequest(collectionName, collectionName, false);
                }

                offlineStoreMustSell = new ODataOfflineStore(context);
                OfflineStoreMustSellListener offlineStoreListner = new OfflineStoreMustSellListener(uiListener);
                offlineStoreMustSell.setOfflineStoreListener(offlineStoreListner);
                //Assign an Offline
                offlineStoreMustSell.setRequestErrorListener(new OfflineErrorListener());

                offlineStoreMustSell.openStoreSync(optionsMustSell);
                return true;
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } else {
            return true;
        }
        //END
    }

    public static void refreshRequestsMustSell(Context context, String collName, UIListener
            uiListener) throws
            OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStoreMustSell == null) return;
        try {
            //used to get progress updates of a refresh operation
            OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, Constants.Fresh, collName, uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStoreMustSell.scheduleRefresh(collName, refreshListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    public static HashMap<String, MustSellBean> getMustSellMatListTemp(String segMatqry) throws
            OfflineODataStoreException {
        HashMap<String, MustSellBean> hashMaMustSell = new HashMap<>();
        //Check if the offline oData store is initialized
        if (offlineStoreMustSell != null) {
            ODataProperty property;
            ODataPropMap properties;
            String segID = "", mStrOrdGrp = "";
            BigDecimal mQty = new BigDecimal("0");
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStoreMustSell, segMatqry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();
                        MustSellBean mustSellBean = new MustSellBean();
                        property = properties.get(Constants.OrderMatGrp);
                        mStrOrdGrp = (String) property.getValue();

                        property = properties.get(Constants.MSLInd);
                        mustSellBean.setMSLInd((String) property.getValue());

                        property = properties.get(Constants.SellIndicator);
                        mustSellBean.setSellIndicator((String) property.getValue());

                        property = properties.get(Constants.UOM);
                        mustSellBean.setUOM((String) property.getValue());

                        property = properties.get(Constants.SOQ);
                        if (property != null) {
                            mQty = (BigDecimal) property.getValue();
                            if (mQty != null) {
                                mustSellBean.setSOQ(mQty.doubleValue() + "");
                            } else {
                                mustSellBean.setSOQ("0");
                            }

                        } else {
                            mustSellBean.setSOQ("0");
                        }

                        hashMaMustSell.put(mStrOrdGrp, mustSellBean);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }
        return hashMaMustSell;

    }

    public static boolean closeOfflineStoreMustSell(Context context, ODataOfflineStoreOptions
            options) throws OfflineODataStoreException {
        try {
            OfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
            UtilOfflineManager.closeOfflineStore(context, options, OfflineManager.offlineStoreMustSell, Constants.PREFS_NAME);
            return true;
        } catch (Exception e) {
            LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
            throw new OfflineODataStoreException(e);
        }
    }

    public static boolean closeStore(Context mContext, ODataOfflineStoreOptions options,
                                     String errMsg, ODataOfflineStore offlineStore,
                                     String sharedPrefName, String err_code) {
        boolean isReInitStore = false;

        try {
            if (!errMsg.contains("-100036") && !errMsg.contains("-100097") && !errMsg.contains("-10214")
                    /*&& !errMsg.contains("-10104")*/ && !err_code.contains("-10247") && !err_code.contains("-10001")) {
                isReInitStore = false;
            } else {
                isReInitStore = UtilOfflineManager.closeOfflineStore(mContext, options, offlineStore, sharedPrefName);
            }
        } catch (Exception var7) {
            LogManager.writeLogError("Error during store close: " + var7.getMessage());
        }

        return isReInitStore;
    }

    public static boolean closeStoreMutSell(Context mContext, ODataOfflineStoreOptions options,
                                            String errMsg, ODataOfflineStore offlineStore,
                                            String sharedPrefName, String err_code) {
        boolean isReInitStore = false;

        try {
            if (!errMsg.contains("-100036") && !errMsg.contains("-100097") && !errMsg.contains("-10214")
                    /*&& !errMsg.contains("-10104")*/ && !err_code.contains("-10247") && !err_code.contains("-10001")) {
                isReInitStore = false;
            } else {
                try {
                    OfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                isReInitStore = UtilOfflineManager.closeOfflineStore(mContext, options, offlineStore, sharedPrefName);
            }
        } catch (Exception var7) {
            LogManager.writeLogError("Error during store close: " + var7.getMessage());
        }

        return isReInitStore;
    }

    public static void requestQueryOffline(final OnlineODataInterface onlineODataInterface,
                                           final Bundle bundle, final Context mContext) {
        String resourcePath = "";
        String sessionId = "";
        boolean isSessionRequired = false;
        int sessionType = 0;
        try {
            if (bundle == null) {
//            throw new IllegalArgumentException("bundle is null");
                if (onlineODataInterface != null)
                    onlineODataInterface.responseFailed(null, "bundle is null", bundle);
            } else {
                resourcePath = bundle.getString(Constants.BUNDLE_RESOURCE_PATH, "");
                sessionId = bundle.getString(Constants.BUNDLE_SESSION_ID, "");
                isSessionRequired = bundle.getBoolean(Constants.BUNDLE_SESSION_REQUIRED, false);
                sessionType = bundle.getInt(Constants.BUNDLE_SESSION_TYPE, 0);
            }
            if (TextUtils.isEmpty(resourcePath)) {
//            throw new IllegalArgumentException("resource path is null");
                if (onlineODataInterface != null)
                    onlineODataInterface.responseFailed(null, "resource path is null", bundle);
            } else {
                final Map<String, String> createHeaders = new HashMap<String, String>();
                requestScheduledOffline(resourcePath, createHeaders, onlineODataInterface, bundle);
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (onlineODataInterface != null)
                onlineODataInterface.responseFailed(null, e.getMessage(), bundle);
        }
    }

    private static void requestScheduledOffline(String
                                                        resourcePath, Map<String, String> createHeaders, OnlineODataInterface
                                                        onlineODataInterface, Bundle bundle) throws ODataException {
        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
        OnlineODataStore store = openListener.getStore();
        if (offlineStore != null) {
            OnlineRequestListeners getOnlineRequestListener = new OnlineRequestListeners(onlineODataInterface, bundle);
            scheduledReqEntity(resourcePath, getOnlineRequestListener, createHeaders, offlineStore);

        } else {
            throw new IllegalArgumentException("Store not opened");
        }
    }

    private static ODataRequestExecution scheduledReqEntity(String
                                                                    resourcePath, ODataRequestListener
                                                                    listener, Map<String, String> options, ODataOfflineStore offStore) throws
            ODataContractViolationException {
        if (TextUtils.isEmpty(resourcePath)) {
            throw new IllegalArgumentException("resourcePath is null");
        } else if (listener == null) {
            throw new IllegalArgumentException("listener is null");
        } else {
            ODataRequestParamSingleDefaultImpl requestParam = new ODataRequestParamSingleDefaultImpl();
            requestParam.setMode(ODataRequestParamSingle.Mode.Read);
            requestParam.setResourcePath(resourcePath);
            requestParam.setOptions(options);
            requestParam.getCustomHeaders().putAll(options);

            return offStore.scheduleRequest(requestParam, listener);
        }
    }

    public static ArrayList<ValueHelpBean> getConfigListFromValueHelp
            (List<ODataEntity> entities, String propName) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<ValueHelpBean> valueHelpArrayList = new ArrayList<>();
        ValueHelpBean valueHelp;
        ODataProperty property;
        ODataPropMap properties;
        try {
            if (entities != null && !entities.isEmpty()) {

                for (ODataEntity entity : entities) {
                    valueHelp = new ValueHelpBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.PropName);
                    valueHelp.setPropName((String) property.getValue());
                    property = properties.get(Constants.ID);
                    valueHelp.setID((String) property.getValue());
                    if (propName.equalsIgnoreCase(valueHelp.getPropName()) && !TextUtils.isEmpty(valueHelp.getID())) {
                        property = properties.get(Constants.Description);
                        valueHelp.setDescription((String) property.getValue());
                        property = properties.get(Constants.IsDefault);
                        Boolean boolVal = null;
                        try {
                            boolVal = (Boolean) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        valueHelp.setIsDefault(boolVal.toString());
                        property = properties.get(Constants.ParentID);
                        valueHelp.setParentID((String) property.getValue());
//                        valueHelp.setDisplayData(valueHelp.getID() + " - " + valueHelp.getDescription());
                        valueHelp.setDisplayData(valueHelp.getDescription());
                        valueHelpArrayList.add(valueHelp);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        if (valueHelpArrayList.size() != 1) {
            valueHelp = new ValueHelpBean();
            valueHelp.setDisplayData(Constants.None);
            valueHelpArrayList.add(0, valueHelp);
        }
        return valueHelpArrayList;

    }

    public static ArrayList<StockBean> getInvStockList(String
                                                               retailerStockQry, ArrayList<StockBean> stkBeanList,
                                                       InvoiceCreateBean invCreateBean, String matQry) throws OfflineODataStoreException {
        ArrayList<String> schemeGuidList;
        ArrayList<SchemeIDBean> orderMaterialGrpSchemeId = null;
        HashMap<String, ArrayList<String>> hashMapSchemeGuidMatByMaterial = new HashMap<>();
        String mStockQRY = "";
        ArrayList<StockBean> stkBeanListFinalList = new ArrayList<>();

        try {
            DmsDivQryBean dmsDivQryBean = invCreateBean.getDmsDivQryBean() != null ? invCreateBean.getDmsDivQryBean() : new DmsDivQryBean();
            if (dmsDivQryBean == null) {
                dmsDivQryBean = new DmsDivQryBean();
            }
            orderMaterialGrpSchemeId = GetSalesOrderListBasedOnScheme.getOrderMaterialId(invCreateBean.getCPGUID32(),
                    invCreateBean.getParentID(),
                    invCreateBean.getParentTypeID(), invCreateBean.getCPTypeID(), invCreateBean.getSPGUID(), dmsDivQryBean.getDMSDivisionQry(), dmsDivQryBean.getDMSDivisionIDQry(), null);

            if (!Constants.SchemeQRY.equalsIgnoreCase("")) {
                String validScheme = Constants.SchemeItemDetails + "?$filter= (" + Constants.SchemeGUID + " eq " + Constants.SchemeQRY + ") and " + Constants.OnSaleOfCatID + " eq '" + Constants.OnSaleOfCatIDMaterial + "' ";
                hashMapSchemeGuidMatByMaterial = getSchemeGuidByMaterial(validScheme, hashMapSchemeGuidMatByMaterial);
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        if (matQry != null && !matQry.equalsIgnoreCase("")) {
            ArrayList<StockBean> stockBeanArrayList = getSOStockList(retailerStockQry);
            String query = Constants.CPStockItems + "?$orderby=" + Constants.Material_Desc + " &$filter=" + Constants.StockOwner + " eq '01' and (" + mStockItemQry + ")  ";
            HashMap<String, StockBean> cpStockList = getCPStockList(query);
            if (stockBeanArrayList != null && stockBeanArrayList.size() > 0) {
                for (StockBean stockBean : stockBeanArrayList) {
                    if (cpStockList != null && !cpStockList.isEmpty()) {
                        try {
                            stockBean.setStockGUID(cpStockList.get(stockBean.getMaterialNo()).getStockGUID());
                            stockBean.setStockQTY(cpStockList.get(stockBean.getMaterialNo()).getStockQTY());
                            stockBean.setMaterialDESC(cpStockList.get(stockBean.getMaterialNo()).getMaterialDESC());
                            stockBean.setOrderMaterialGroupID(cpStockList.get(stockBean.getMaterialNo()).getOrderMaterialGroupID());
                            stockBean.setOrderMaterialGroupDesc(cpStockList.get(stockBean.getMaterialNo()).getOrderMaterialGroupDesc());
                            stockBean.setBanner(cpStockList.get(stockBean.getMaterialNo()).getBanner());
                            stockBean.setBannerDesc(cpStockList.get(stockBean.getMaterialNo()).getBannerDesc());
                            stockBean.setBrandDesc(cpStockList.get(stockBean.getMaterialNo()).getBrandDesc());
                            stockBean.setBrand(cpStockList.get(stockBean.getMaterialNo()).getBrand());
                            stockBean.setSKUGroup(cpStockList.get(stockBean.getMaterialNo()).getSKUGroup());
                            stockBean.setSKUGroupDesc(cpStockList.get(stockBean.getMaterialNo()).getSKUGroupDesc());
                            stockBean.setProductCategoryID(cpStockList.get(stockBean.getMaterialNo()).getProductCategoryID());
                            stockBean.setProductCategoryDesc(cpStockList.get(stockBean.getMaterialNo()).getProductCategoryDesc());
                            stockBean.setUOM(cpStockList.get(stockBean.getMaterialNo()).getUOM());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    if (mStockQRY.length() == 0) {
                        mStockQRY += "" + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                    } else {
                        mStockQRY += " or " + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                    }
                }
                stkBeanList.addAll(stockBeanArrayList);
            }
        } else {
            List<ODataEntity> entities = null;
            StockBean stockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retailerStockQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    stockBean = new StockBean();
                    property = properties.get(Constants.CPStockItemGUID);
                    try {
                        ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                        stockBean.setStockGUID(mSpItemGuid.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.Material_No);
                    stockBean.setMaterialNo((String) property.getValue());

                    property = properties.get(Constants.Material_Desc);
                    stockBean.setMaterialDESC((String) property.getValue());

                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        if (mStrAmount != null) {
                            stockBean.setStockQTY(mStrAmount.toString());
                        } else {
                            stockBean.setStockQTY("0.0");
                        }

                    }
                    property = properties.get(Constants.UOM);
                    stockBean.setUOM((String) property.getValue());
                    property = properties.get(ConstantsUtils.Brand);
                    stockBean.setBrand((String) property.getValue());
                    property = properties.get(Constants.BrandDesc);
                    stockBean.setBrandDesc((String) property.getValue());
                    property = properties.get(ConstantsUtils.SKUGroup);
                    stockBean.setSKUGroup((String) property.getValue());
                    property = properties.get(ConstantsUtils.SKUGroupDesc);
                    stockBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(ConstantsUtils.Banner);
                    stockBean.setBanner((String) property.getValue());
                    property = properties.get(ConstantsUtils.BannerDesc);
                    stockBean.setBannerDesc((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryID);
                    stockBean.setProductCategoryID((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryDesc);
                    stockBean.setProductCategoryDesc((String) property.getValue());
                    property = properties.get(Constants.OrderMaterialGroupID);
                    stockBean.setOrderMaterialGroupID((String) property.getValue());
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    stockBean.setOrderMaterialGroupDesc((String) property.getValue());
                    if (mStockQRY.length() == 0) {
                        mStockQRY += "" + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                    } else {
                        mStockQRY += " or " + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                    }
                    stkBeanList.add(stockBean);
                }
            }
        }
        String mCPItmQry = "";
        if (!mStockQRY.equalsIgnoreCase("")) {
            mCPItmQry = Constants.CPStockItemSnos + "?$filter=(" + mStockQRY + ") and " + Constants.StockTypeID + " eq '1' " +
                    "and " + Constants.ExpiryDate + " ge datetime'" + UtilConstants.getNewDate() + "'  &$orderby= " + Constants.ManufacturingDate + "%20desc ";
        }
        HashMap<String, ArrayList<BatchBean>> hashMapSKUMatByMaterial = getBatchNoByMaterialQry(mCPItmQry);

        if (hashMapSKUMatByMaterial.size() > 0) {
            if (stkBeanList != null && stkBeanList.size() > 0) {
                getValuesMaterialInvCreate(hashMapSchemeGuidMatByMaterial, stkBeanList);
            }
            for (StockBean stockBean : stkBeanList) {
                if (hashMapSKUMatByMaterial.containsKey(stockBean.getMaterialNo())) {
                    int sizeAlList = hashMapSKUMatByMaterial.get(stockBean.getMaterialNo()).size();
                    stockBean.setMRP(hashMapSKUMatByMaterial.get(stockBean.getMaterialNo()).get(sizeAlList - 1).getMRP());
                    stockBean.setArrayListBatchItem(hashMapSKUMatByMaterial.get(stockBean.getMaterialNo()));

                }
                if (hashMapSKUMatByMaterial.containsKey(stockBean.getOrderMaterialGroupID())) {
                    // Set Scheme Guid to bean 26/09/2017
                    schemeGuidList = schemeGuid(orderMaterialGrpSchemeId, stockBean.getOrderMaterialGroupID());
                    try {
                        if (!schemeGuidList.isEmpty()) {
                            Constants.MAPSCHGuidByCrsSkuGrp.put(stockBean.getOrderMaterialGroupID(), schemeGuidList);
                        } else {
                            Constants.MAPSCHGuidByCrsSkuGrp.put(stockBean.getOrderMaterialGroupID(), new ArrayList<String>());
                        }
                    } catch (Exception e) {
                        Constants.MAPSCHGuidByCrsSkuGrp.put(stockBean.getOrderMaterialGroupID(), new ArrayList<String>());
                    }
                }
            }


            for (StockBean stockBean : stkBeanList) {
                if (stockBean.getArrayListBatchItem() != null && stockBean.getArrayListBatchItem().size() > 0) {
                    stkBeanListFinalList.add(stockBean);
                }
            }
        }
//        return stkBeanList;
        return stkBeanListFinalList;

    }

    public static HashMap<String, ArrayList<BatchBean>> getBatchNoByMaterialQry(String
                                                                                        focusedPrdQry) throws OfflineODataStoreException {

        HashMap<String, ArrayList<BatchBean>> hashMapSKUMatByMaterial = new HashMap<>();
        String mMRPQRY = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BatchBean batchBean = null;
            ODataProperty property;
            ODataPropMap properties;

            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        batchBean = new BatchBean();
                        properties = entity.getProperties();

                        property = properties.get(Constants.MaterialNo);
                        String matNo = (String) property.getValue();
                        batchBean.setMaterialNo(matNo);

                        property = properties.get(Constants.Batch);
                        batchBean.setBatchNo((String) property.getValue());


                        property = properties.get(Constants.UOM);
                        batchBean.setUOM((String) property.getValue());

                        property = properties.get(Constants.Quantity);
                        Double doubleMatQty = 0.0;
                        if (property != null) {
                            BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();

                            if (mDecimialUnrestrictedQty != null) {
                                doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                            } else {
                                doubleMatQty = 0.0;
                            }
                            batchBean.setUnResQty(doubleMatQty + "");
                        } else {
                            doubleMatQty = 0.0;
                            batchBean.setUnResQty("0.0");
                        }

                        if (doubleMatQty > 0) {
                            property = properties.get(Constants.MRP);
                            if (property != null) {
                                BigDecimal mDecimiaMRP = (BigDecimal) property.getValue();
                                Double doubleMRPQty = 0.0;
                                if (mDecimiaMRP != null) {
                                    doubleMRPQty = mDecimiaMRP.doubleValue();
                                } else {
                                    doubleMRPQty = 0.0;
                                }
                                batchBean.setMRP(doubleMRPQty + "");
                            } else {
                                batchBean.setMRP("0.0");
                            }

                            property = properties.get(Constants.CPStockItemGUID);
                            ODataGuid mCpStockItemGuid = null;
                            try {
                                mCpStockItemGuid = (ODataGuid) property.getValue();
                                batchBean.setStockGUID(mCpStockItemGuid.guidAsString36().toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.CPSnoGUID);
                            ODataGuid mCPSnoGUID = null;
                            try {
                                mCPSnoGUID = (ODataGuid) property.getValue();
                                batchBean.setStockSnoGUID(mCPSnoGUID.guidAsString36().toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.ManufacturingDate);
                            String mStrMFD = "";
                            try {
                                mStrMFD = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                            } catch (Exception e) {
                                mStrMFD = "";
                                e.printStackTrace();
                            }

                            batchBean.setDisplayData(batchBean.getBatchNo() + "-" + batchBean.getUnResQty() + "" + batchBean.getUOM() + "-" + mStrMFD);

                            ArrayList<BatchBean> stockArrayList = hashMapSKUMatByMaterial.get(matNo);
                            if (stockArrayList == null) {
                                stockArrayList = new ArrayList<>();
                                stockArrayList.add(batchBean);
                                hashMapSKUMatByMaterial.put(matNo, stockArrayList);
                            } else {
                                stockArrayList.add(batchBean);
                                hashMapSKUMatByMaterial.put(matNo, stockArrayList);
                            }
                        }
                    }
                }
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }

        return hashMapSKUMatByMaterial;
    }

    public static void getValuesMaterialInvCreate
            (HashMap<String, ArrayList<String>> hashMapSchemeGuidMatByMaterial, ArrayList<StockBean> alMat) {
        String mStrVal = "";
        try {
            if (alMat != null && alMat.size() > 0) {
                for (StockBean skuGroupBean : alMat) {
                    mStrVal = skuGroupBean.getMaterialNo();
                    if (hashMapSchemeGuidMatByMaterial.size() > 0) {
                        if (hashMapSchemeGuidMatByMaterial.containsKey(mStrVal)) {

                            for (String mStrSchemeGuid : hashMapSchemeGuidMatByMaterial.get(mStrVal)) {
                                if (Constants.HashMapSchemeIsInstantOrQPS.containsKey(mStrSchemeGuid)) {
                                    if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDInstantScheme)) {
                                        ArrayList<String> schemeBeanArrayList = Constants.MAPSCHGuidByMaterial.get(mStrVal);
                                        if (schemeBeanArrayList == null) {
                                            schemeBeanArrayList = new ArrayList<>();
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        } else {
                                            schemeBeanArrayList.add(mStrSchemeGuid);
                                            Constants.MAPSCHGuidByMaterial.put(mStrVal, schemeBeanArrayList);
                                        }
                                    } else if (Constants.HashMapSchemeIsInstantOrQPS.get(mStrSchemeGuid).equalsIgnoreCase(Constants.SchemeCatIDQPSScheme)) {
                                        Constants.MAPQPSSCHGuidByMaterial.put(mStrVal, mStrSchemeGuid);
                                    }
                                }
                            }

                        }
                    }

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    private static ArrayList<StockBean> getSOStockList(String mQry) {
        ArrayList<StockBean> alStock = new ArrayList<>();
        mStockItemQry = "";
        StockBean stockBean;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    stockBean = new StockBean();
                    property = properties.get(Constants.CPStockItemGUID);
                    String mStrCpStockItemGuid = "";
                    try {
                        ODataGuid mSchmeGUID = (ODataGuid) property.getValue();
                        mStrCpStockItemGuid = mSchmeGUID.guidAsString36().toUpperCase();
                        stockBean.setStockGUID(mStrCpStockItemGuid);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    stockBean.setMaterialNo(matNo);

                    property = properties.get(Constants.Batch);
                    String BatchNo = (String) property.getValue();

                    property = properties.get(Constants.Quantity);
                    Double doubleMatQty = 0.0;
                    if (property != null) {
                        BigDecimal mDecimialUnrestrictedQty = (BigDecimal) property.getValue();

                        if (mDecimialUnrestrictedQty != null) {
                            doubleMatQty = mDecimialUnrestrictedQty.doubleValue();
                        } else {
                            doubleMatQty = 0.0;
                        }
                    } else {
                        doubleMatQty = 0.0;
                    }
                    stockBean.setStockQTY(doubleMatQty + "");
                    if (doubleMatQty > 0) {
                        try {
                            if (Constants.ssoItemBeans != null && Constants.ssoItemBeans.size() > 0) {
                                for (SSOItemBean ssoItemBean : Constants.ssoItemBeans) {
                                    String concat = ssoItemBean.getMaterialNo() + "-" + ssoItemBean.getBatchNo();
                                    if (concat.equalsIgnoreCase(matNo + "-" + BatchNo)) {
                                        stockBean.setEnterdQTY(ssoItemBean.getQty());
                                        stockBean.setSSSoItemGUID(ssoItemBean.getSOItemGuid());
                                        Constants.ssoItemBeans.remove(ssoItemBean);

                                        if (mStockItemQry.length() == 0) {
                                            mStockItemQry += "" + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                                        } else {
                                            mStockItemQry += " or " + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                                        }

                                        alStock.add(stockBean);
                                        break;
                                    }
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                       /* if (mStockItemQry.length() == 0) {
                            mStockItemQry += ""+Constants.CPStockItemGUID+" eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                        }else {
                            mStockItemQry += " or " + Constants.CPStockItemGUID + " eq guid'" + stockBean.getStockGUID().toUpperCase() + "'";
                        }

                        alStock.add(stockBean);*/
                    }

                }
            }
        }

        return alStock;
    }

    private static HashMap<String, StockBean> getCPStockList(String mQry) {
        HashMap<String, StockBean> mapStock = new HashMap<>();
        StockBean stockBean;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = null;
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    stockBean = new StockBean();
                    property = properties.get(Constants.CPStockItemGUID);
                    try {
                        ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                        stockBean.setStockGUID(mSpItemGuid.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = properties.get(Constants.Material_No);
                    stockBean.setMaterialNo((String) property.getValue());

                    property = properties.get(Constants.Material_Desc);
                    stockBean.setMaterialDESC((String) property.getValue());

                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        if (mStrAmount != null) {
                            stockBean.setStockQTY(mStrAmount.toString());
                        } else {
                            stockBean.setStockQTY("0.0");
                        }

                    }
                    property = properties.get(Constants.UOM);
                    stockBean.setUOM((String) property.getValue());
                    property = properties.get(ConstantsUtils.Brand);
                    stockBean.setBrand((String) property.getValue());
                    property = properties.get(Constants.BrandDesc);
                    stockBean.setBrandDesc((String) property.getValue());
                    property = properties.get(ConstantsUtils.SKUGroup);
                    stockBean.setSKUGroup((String) property.getValue());
                    property = properties.get(ConstantsUtils.SKUGroupDesc);
                    stockBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(ConstantsUtils.Banner);
                    stockBean.setBanner((String) property.getValue());
                    property = properties.get(ConstantsUtils.BannerDesc);
                    stockBean.setBannerDesc((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryID);
                    stockBean.setProductCategoryID((String) property.getValue());
                    property = properties.get(ConstantsUtils.ProductCategoryDesc);
                    stockBean.setProductCategoryDesc((String) property.getValue());
                    property = properties.get(Constants.OrderMaterialGroupID);
                    stockBean.setOrderMaterialGroupID((String) property.getValue());
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    stockBean.setOrderMaterialGroupDesc((String) property.getValue());
                    mapStock.put(stockBean.getMaterialNo(), stockBean);
                }
            }
        }
        return mapStock;
    }

    public static void updateCPStkSno(String stkSNOGUID, Double Qty) {
        String cpGuidQry = Constants.CPStockItemSnos + "(guid'" + stkSNOGUID.toUpperCase() + "') ";
        ODataPropMap oDataProperties;
        ODataProperty oDataProperty;
        try {
            ODataEntity stkEntity = OfflineManager.getRetDetails(cpGuidQry);
            oDataProperties = stkEntity.getProperties();
            oDataProperty = oDataProperties.get(Constants.Quantity);

            Double mDouQty = 0.0, mDoubCalQty = 0.0;
            if (oDataProperty != null) {
                BigDecimal mStrQty = (BigDecimal) oDataProperty.getValue();
                if (mStrQty != null) {

                    mDouQty = mStrQty.doubleValue();
                } else {
                    mDouQty = 0.0;
                }
            }

            try {
                mDoubCalQty = mDouQty - Qty;
            } catch (Exception e) {
                mDoubCalQty = 0.0;
                e.printStackTrace();
            }
            if (mDoubCalQty < 0) {
                mDoubCalQty = 0.0;
            }

            try {
                stkEntity.getProperties().put(Constants.Quantity,
                        new ODataPropertyDefaultImpl(Constants.Quantity, BigDecimal.valueOf(mDoubCalQty)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            offlineStore.scheduleUpdateEntity(stkEntity, null, null);
        } catch (OfflineODataStoreException e) {
            LogManager.writeLogError(Constants.error_txt + e.getMessage());
        }
    }


    public static HashSet<String> getSSOInvRefGuid(Context context, String mStrCPNo) throws
            OfflineODataStoreException {

        HashSet<String> mapSSORefVal = new HashSet<>();
        ArrayList<InvoiceHistoryBean> alInvoiceHis = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            try {

                Set<String> set = new HashSet<>();
                SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
                set = sharedPreferences.getStringSet(Constants.SSInvoices, null);
                if (set != null && !set.isEmpty()) {
                    Iterator itr = set.iterator();
                    while (itr.hasNext()) {
                        String store = null, deviceNo = "";
                        try {
                            deviceNo = itr.next().toString();
                            store = LogonCore.getInstance().getObjectFromStore(deviceNo);
                        } catch (LogonCoreException e) {
                            e.printStackTrace();
                        }
                        try {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoices)
                                    && fetchJsonHeaderObject.getString(Constants.SoldToID).equalsIgnoreCase(mStrCPNo)) {

                                String mStrRefDocGUID = "";
                                try {
                                    mStrRefDocGUID = fetchJsonHeaderObject.getString(Constants.RefDocGUID);
                                } catch (JSONException e) {
                                    mStrRefDocGUID = "";
                                    e.printStackTrace();
                                }
                                if (mStrRefDocGUID != null && !mStrRefDocGUID.equalsIgnoreCase("")) {
                                    mapSSORefVal.add(mStrRefDocGUID);
                                }
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mapSSORefVal;

    }

    public static ArrayList<CPPartnerFunctionsBean> getCpPartnerVal(String qeury) throws
            OfflineODataStoreException {
        ArrayList<CPPartnerFunctionsBean> cpFunVal = null;
        CPPartnerFunctionsBean partnerFunctionsBean;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            cpFunVal = new ArrayList<>();
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qeury);
                //Send a request to read the Outstanding invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        partnerFunctionsBean = new CPPartnerFunctionsBean();
                        properties = entity.getProperties();

                        try {
                            property = properties.get(Constants.PartnarCPGUID);
                            try {
                                if (property != null) {
                                    String strGuid36 = Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase();
                                    partnerFunctionsBean.setPartnarCPGUID(strGuid36);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.PFGUID);
                            if (property != null) {
                                ODataGuid mFIPGUID = (ODataGuid) property.getValue();
                                String strGuid36 = mFIPGUID.toString();
                                partnerFunctionsBean.setPFGUID(strGuid36);
                            }

                            properties = entity.getProperties();
                            property = properties.get(Constants.PartnerFunction);
                            if (property != null) {
                                partnerFunctionsBean.setPartnerFunction((String) property.getValue());
                            }

                            property = properties.get(Constants.PartnerFunctionDesc);
                            if (property != null) {
                                partnerFunctionsBean.setPartnerFunctionDesc((String) property.getValue());
                            }

                            property = properties.get(Constants.CPNo);
                            if (property != null) {
                                partnerFunctionsBean.setCPNo((String) property.getValue());
                            }

                            property = properties.get(Constants.CPName);
                            if (property != null) {
                                partnerFunctionsBean.setCPName((String) property.getValue());
                            }

                            property = properties.get(Constants.CPMobileNo);
                            if (property != null) {
                                partnerFunctionsBean.setCPMobileNo((String) property.getValue());
                            }

                            property = properties.get(Constants.PartnerCPNo);
                            if (property != null) {
                                partnerFunctionsBean.setPartnerCPNo((String) property.getValue());
                            }

                            property = properties.get(Constants.PartnarName);
                            if (property != null) {
                                partnerFunctionsBean.setPartnarName((String) property.getValue());
                            }

                            property = properties.get(Constants.PartnerMobileNo);
                            if (property != null) {
                                partnerFunctionsBean.setPartnerMobileNo((String) property.getValue());
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        cpFunVal.add(partnerFunctionsBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }


        return cpFunVal;

    }

    public static ArrayList<DistributorBean> getDistributorsList(String qry) {

        //Check if the offline oData store is initialized
        ArrayList<DistributorBean> alDistributorBeans = new ArrayList<>();
        ArrayList<String> alTempList = new ArrayList<>();
        HashSet<DistributorBean> distributorBeanHashSet = new HashSet<>();
        DistributorBean distributorBean = null;
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response

                    for (ODataEntity entity : entities) {
                        distributorBean = new DistributorBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        distributorBean.setcPGUID((String) property.getValue());
                        property = properties.get(Constants.CPName);
                        distributorBean.setcPName((String) property.getValue());
                        property = properties.get(Constants.CPTypeID);
                        distributorBean.setcPTypeID((String) property.getValue());

//                        property = properties.get(Constants.SPGUID);
//                        try {
//                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
//                            distVal[4][incVal] = mInvoiceGUID.guidAsString36();
//                            distVal[8][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }


                        property = properties.get(Constants.CPNo);
                        distributorBean.setcPNo((String) property.getValue());
                        if (!alTempList.contains(distributorBean.getcPGUID())) {
                            alDistributorBeans.add(distributorBean);
                            alTempList.add(distributorBean.getcPGUID());
                        }

                    }
                } else {
                    alDistributorBeans.add(distributorBean);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return alDistributorBeans;

    }


    public static CustomerBean getDistributorListData(String qry) {

        //Check if the offline oData store is initialized
        CustomerBean customerBean = new CustomerBean("");
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Name);
                        customerBean.setRetailerName((String) property.getValue());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Address1);
                        customerBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        customerBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        customerBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.Address4);
                        customerBean.setAddress4((String) property.getValue());
                        property = properties.get(Constants.District);
                        customerBean.setDistrictDesc((String) property.getValue());
                        property = properties.get(Constants.City);
                        customerBean.setCity((String) property.getValue());
                        property = properties.get(Constants.CountryDesc);
                        customerBean.setCountry((String) property.getValue());
                        property = properties.get(Constants.PostalCode);
                        customerBean.setPostalCode((String) property.getValue());
                        property = properties.get(Constants.MobileNo);
                        customerBean.setMobileNumber((String) property.getValue());
                        property = properties.get(Constants.GSTIN);
                        customerBean.setGstin((String) property.getValue());


                        property = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            customerBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            customerBean.setLongVal(0.0);
                        }

                        property = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            customerBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            customerBean.setLatVal(0.0);
                        }

                        property = properties.get(Constants.EmailID);
                        customerBean.setEmail((String) property.getValue());
                        customerBean.setDealer(true);
//
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return customerBean;

    }


    /*public static ArrayList<CustomerBean> getDistributorLatLong(String qry) {

        //Check if the offline oData store is initialized
        ArrayList<CustomerBean> alCustomerBeans = new ArrayList<>();
        CustomerBean customerBean;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response

                    for (ODataEntity entity : entities) {
                        customerBean = new CustomerBean("");

                        properties = entity.getProperties();
                        property = properties.get(Constants.Name);
                        customerBean.setRetailerName((String) property.getValue());

                        properties = entity.getProperties();
                        property = properties.get(Constants.Address1);
                        customerBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        customerBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        customerBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.Address4);
                        customerBean.setAddress4((String) property.getValue());
                        property = properties.get(Constants.District);
                        customerBean.setDistrictDesc((String) property.getValue());
                        property = properties.get(Constants.City);
                        customerBean.setCity((String) property.getValue());
                        property = properties.get(Constants.CountryDesc);
                        customerBean.setCountry((String) property.getValue());
                        property = properties.get(Constants.PostalCode);
                        customerBean.setPostalCode((String) property.getValue());
                        property = properties.get(Constants.MobileNo);
                        customerBean.setMobileNumber((String) property.getValue());
                        property = properties.get(Constants.GSTIN);
                        customerBean.setGstin((String) property.getValue());


                        property = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            customerBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            customerBean.setLongVal(0.0);
                        }

                        property = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            customerBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            customerBean.setLatVal(0.0);
                        }

                        property = properties.get(Constants.EmailID);
                        customerBean.setEmail((String) property.getValue());

                        alCustomerBeans.add(customerBean);
//
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return alCustomerBeans;

    }*/

    public static void updateDistributorLatLong(ODataEntity entity) throws
            OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Send the request to update customer in the local database
            if (entity != null) {
                offlineStore.scheduleUpdateEntity(entity, new OfflineRequestListener(Operation.Update.getValue(), null, Constants.Customers), null);
            }
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }


    public static boolean getAuthorization(String qry) {

        //Check if the offline oData store is initialized
        boolean check = false;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity entity = (ODataEntity) response.getPayload();

                    properties = entity.getProperties();
                    property = properties.get(Constants.Pref3);
                    String pref3 = (String) property.getValue();
                    if (pref3.equalsIgnoreCase("X")) {
                        check = true;
                    }

//                    properties = entity.getProperties();
//                    property = properties.get(Constants.Pref1);
//                    String pref1 = (String) property.getValue();
//                    if (pref1.equalsIgnoreCase("X")) {
//                        check = true;
//                    }


                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return check;
    }


    public static ArrayList<RemarkReasonBean> getOutletlocation(String query) throws
            OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.TypesName);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                }
            }
        }
        return reasonList;
    }


    public static ArrayList<RemarkReasonBean> getOutletshap(String query) throws
            OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.TypesName);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                }
            }
        }
        return reasonList;
    }


    public static ArrayList<RemarkReasonBean> getOutletsize(String query) throws
            OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.TypesName);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                }
            }
        }
        return reasonList;
    }

    public static ArrayList<RemarkReasonBean> getVisitDeviationRemarks(String query) throws
            OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.TypesName);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                }
            }
        }
        return reasonList;
    }

    public static ArrayList<RemarkReasonBean> getAreaSizeOutlet(String query) throws
            OfflineODataStoreException {

        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        reasonList.add(new RemarkReasonBean(Constants.str_00, Constants.None));
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.TypesName);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                }
            }
        }
        return reasonList;
    }

    public static ArrayList<RemarkReasonBean> getCatigeryRemarks(String query) throws
            OfflineODataStoreException {


        RemarkReasonBean tempstoList;
        ArrayList<RemarkReasonBean> reasonList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        tempstoList = new RemarkReasonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        tempstoList.setReasonCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.TypesName);
                        tempstoList.setReasonDesc(property.getValue().toString());
                        reasonList.add(tempstoList);
                    }
                }
            }
        }
        return reasonList;
    }

    public static int getNoVisitToday(String query) throws
            OfflineODataStoreException {


        int noVisit = 0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        noVisit++;
                    }
                }
            }
        }
        return noVisit;
    }

    public static String[] getLastVisitSeq(String query) throws
            OfflineODataStoreException {

        String[] visitSeq = new String[2];
//        String visitSeqNo = "";
//        String actualSeqNo = "";
//        boolean check = false;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.VisitSeq);
                        visitSeq[0] = (String) property.getValue();

                        property = properties.get(Constants.ActualSeq);
                        visitSeq[1] = (String) property.getValue();

//                        try {
//                            visitSeqNo = Integer.valueOf(strVisitSeq);
//                        } catch (NumberFormatException e) {
//                            e.printStackTrace();
//                        }
//                        visitSeq[0] = visitSeqNo;
//                        try {
//                            actualSeqNo = Integer.valueOf(strActaulSeq);
//                        } catch (NumberFormatException e) {
//                            e.printStackTrace();
//                        }
//                        visitSeq[1] = actualSeqNo;
                        break;
                    }
                } else {
                    visitSeq[0] = "";
                    visitSeq[1] = "0";
                }
            }
        }
        return visitSeq;
    }

    public static int getVisitCount(String query) throws
            OfflineODataStoreException {
        int visitCount = 0;
        ArrayList<String> visitcountSeq = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.VisitSeq);
                        String seq = UtilConstants.removeLeadingZeros((String) property.getValue());
                        if (!visitcountSeq.contains(seq) && (!seq.equalsIgnoreCase("") && !seq.equalsIgnoreCase("0"))) {
                            visitcountSeq.add(seq);
                        }
                    }
                }
            }
        }
        visitCount = visitcountSeq.size();
        return visitCount;
    }


    public static boolean getLastVisitedRetailers(String query, int seqNo) {
        boolean check = false;
        ArrayList<String> visitcountSeq = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = null;
            try {
                response = readSingleOdataRequest(query);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    if (entities.size() == seqNo - 1) {
                        check = true;
                    }
                }
            }
        }
        return check;
    }

    public static String getRouteScheduleGuid(String routeGuidQry) throws OfflineODataStoreException {
        String routeschGuid = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(routeGuidQry);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid routeGuid = (ODataGuid) property.getValue();
                        routeschGuid = routeGuid.guidAsString36().toUpperCase();
                    }
                }
            }
        }
        return routeschGuid;
    }

    public static OutletSurveyBean getRetailerOutletSurveyList(String retListQry, String mComingFrom) throws OfflineODataStoreException {

        OutletSurveyBean retailerData = null;
//        retailerList.add(new OutletSurveyBean(Constants.None));
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutletSurveyBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        retBean = new OutletSurveyBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid = null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        String mStrTimeTakenVal = "";
                        if (!mComingFrom.equalsIgnoreCase("")) {
                            mStrTimeTakenVal = getTimeTaken(Constants.Visits + "?$top=1 &$filter=" + Constants.CPGUID + " eq '"
                                    + mCpGuid.guidAsString32().toUpperCase() + "' " +
                                    "and " + Constants.StartDate + " eq datetime'" + UtilConstants.getNewDate() + "' and " + Constants.ENDDATE + " eq datetime'" + UtilConstants.getNewDate() + "' " +
                                    "and (" + Constants.VisitCatID + " eq '01' or " + Constants.VisitCatID + " eq '02') &$orderby=" + Constants.EndTime + "%20desc ");
                        }


                        if (!mStrTimeTakenVal.equalsIgnoreCase("0:0:0") || mComingFrom.equalsIgnoreCase("")) {

                            retBean.setTimeTaken(mStrTimeTakenVal);
                            property = properties.get(Constants.RetailerName);
                            retBean.setRetailerName((String) property.getValue());
                            property = properties.get(Constants.Address1);
                            retBean.setAddress1((String) property.getValue());
                            property = properties.get(Constants.Address2);
                            retBean.setAddress2((String) property.getValue());
                            property = properties.get(Constants.Address3);
                            retBean.setAddress3((String) property.getValue());
                            property = properties.get(Constants.TownDesc);
                            retBean.setTownDesc((String) property.getValue());

                            property = properties.get(Constants.DistrictDesc);
                            retBean.setDistrictDesc((String) property.getValue());

                            property = properties.get(Constants.Landmark);
                            retBean.setLandMark((String) property.getValue());

                            property = properties.get(Constants.Latitude);
                            BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLatitude != null) {
                                retBean.setLatVal(mDecimalLatitude.doubleValue());
                            } else {
                                retBean.setLatVal(0.0);
                            }

                            property = properties.get(Constants.Longitude);
                            BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                            if (mDecimalLongitude != null) {
                                retBean.setLongVal(mDecimalLongitude.doubleValue());
                            } else {
                                retBean.setLongVal(0.0);
                            }

                            property = properties.get(Constants.CityDesc);
                            retBean.setCity((String) property.getValue());

                            property = properties.get(Constants.PostalCode);
                            retBean.setPostalCode((String) property.getValue());

                            property = properties.get(Constants.MobileNo);
                            retBean.setMobileNumber((String) property.getValue());

                            property = properties.get(Constants.CPUID);
                            retBean.setUID((String) property.getValue());

                       /* property = properties.get(Constants.CPGUID);
                        ODataGuid mCpGuid=null;
                        try {
                            mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/

                       /* ArrayList<String> alGetValues = getValueByColumnNames(Constants.CPDMSDivisions+ "?$select=" + Constants.CPTypeDesc + ","+Constants.Group3Desc+" &$filter="
                                +Constants.CPGUID+" eq guid'"+mCpGuid.guidAsString36().toUpperCase()+"'",Constants.CPTypeDesc,Constants.Group3Desc);
                        if(alGetValues!=null && alGetValues.size()>0){
                            try {
                                retBean.setCPTypeDesc(alGetValues.get(0));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            try {
                                retBean.setRetailerCatDesc(alGetValues.get(1));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }*/

                            property = properties.get(Constants.DOB);
                            retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                            property = properties.get(Constants.Anniversary);
                            retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                            property = properties.get(Constants.OwnerName);
                            retBean.setOwnerName((String) property.getValue());
                            property = properties.get(Constants.OutletSizeID);
                            retBean.setOutletSizeID((String) property.getValue());
                            property = properties.get(Constants.OutletSizeDesc);
                            retBean.setOutletSizeDesc((String) property.getValue());
                            property = properties.get(Constants.OutletShapeId);
                            retBean.setOutletShapeId((String) property.getValue());
                            property = properties.get(Constants.OutletShapeDesc);
                            retBean.setOutletShapeDesc((String) property.getValue());
                            property = properties.get(Constants.NoOfEmployee);
                            retBean.setNoOfEmployee((String) property.getValue());
                            property = properties.get(Constants.IsHomeDeliveryAvl);
                            retBean.setIsHomeDeliveryAvl((String) property.getValue());
                            property = properties.get(Constants.IsPhOrderAvl);
                            retBean.setIsPhOrderAvl((String) property.getValue());
                            property = properties.get(Constants.IsCompBillAvl);
                            retBean.setIsCompBillAvl((String) property.getValue());
                            property = properties.get(Constants.NoOfCounters);
                            retBean.setNoOfCounters((String) property.getValue());
                            property = properties.get(Constants.OutletLocId);
                            retBean.setOutletLocId((String) property.getValue());
                            property = properties.get(Constants.OutletLocDesc);
                            retBean.setOutletLocDesc((String) property.getValue());
                            property = properties.get(Constants.IsEduInstNrby);
                            retBean.setIsEduInstNrby((String) property.getValue());
                            property = properties.get(Constants.IsHsptlNearBy);
                            retBean.setIsHsptlNearBy((String) property.getValue());
                            property = properties.get(Constants.NoOfWindowDisp);
                            retBean.setNoOfWindowDisp((String) property.getValue());
                            property = properties.get(Constants.IsSmartPhAvl);
                            retBean.setIsSmartPhAvl((String) property.getValue());
                            property = properties.get(Constants.OpeningTime);
                            ODataDuration oDataDuration = null;
                            try {
                                oDataDuration = (ODataDuration) property.getValue();
                                if (oDataDuration != null) {
                                    String openingTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                                    if (!openingTime.equalsIgnoreCase("0:0:0")) {
                                        SimpleDateFormat sdf = new SimpleDateFormat("H:mm:ss");
                                        Date time = sdf.parse(openingTime);
                                        sdf = new SimpleDateFormat("H-mm");
                                        openingTime = sdf.format(time);
                                        retBean.setOpeningTime(openingTime);
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            property = properties.get(Constants.ClosingTime);
                            try {
                                oDataDuration = (ODataDuration) property.getValue();
                                if (oDataDuration != null) {
                                    String closingTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                                    if (!closingTime.equalsIgnoreCase("0:0:0")) {
                                        SimpleDateFormat sdf = new SimpleDateFormat("H:mm:ss");
                                        Date time = sdf.parse(closingTime);
                                        sdf = new SimpleDateFormat("H-mm");
                                        closingTime = sdf.format(time);
                                        retBean.setClosingTime(closingTime);
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.LunchTime);
                            try {
                                oDataDuration = (ODataDuration) property.getValue();
                                if (oDataDuration != null) {
                                    String lunchTime = UtilConstants.convertTimeOnly(oDataDuration.toString());
                                    if (!lunchTime.equalsIgnoreCase("0:0:0")) {
                                        SimpleDateFormat sdf = new SimpleDateFormat("H:mm:ss");
                                        Date time = sdf.parse(lunchTime);
                                        sdf = new SimpleDateFormat("H-mm");
                                        lunchTime = sdf.format(time);
                                        retBean.setLunchTime(lunchTime);
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }


                            retBean.setEditResourceURL(entity.getEditResourcePath());
                            retBean.setIsAddressEnabled(false);
                            retailerData = retBean;

                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerData;
    }

    public static ODataEntity getRetailerDetails(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerEntity;

    }

    public static void updateRetilerBatchOutlet(Hashtable<String, String> hashtable, String
            comingFrom) throws ODataParserException {
        ODataEntity channelPartnerEntity = null, cpDmsDivisionEntity = null;
        try {
            channelPartnerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);
            channelPartnerEntity.setResourcePath(Constants.ChannelPartners, Constants.ChannelPartners);
            offlineStore.allocateProperties(channelPartnerEntity, ODataStore.PropMode.Keys);
            offlineStore.allocateNavigationProperties(channelPartnerEntity);

            channelPartnerEntity.getProperties().put(Constants.CPGUID,
                    new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID))));

            if (comingFrom.equalsIgnoreCase(Constants.DOB)) {
                channelPartnerEntity.getProperties().put(Constants.DOB,
                        new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (comingFrom.equalsIgnoreCase(Constants.Anniversary)) {
                channelPartnerEntity.getProperties().put(Constants.Anniversary,
                        new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (comingFrom.equalsIgnoreCase(Constants.Latitude)) {
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, hashtable.get(Constants.Anniversary)));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, hashtable.get(Constants.DOB)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    channelPartnerEntity.getProperties().put(Constants.Anniversary,
                            new ODataPropertyDefaultImpl(Constants.Anniversary, UtilConstants.convertDateFormat(hashtable.get(Constants.Anniversary))));
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    channelPartnerEntity.getProperties().put(Constants.DOB,
                            new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.Latitude,
                        new ODataPropertyDefaultImpl(Constants.Latitude, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Latitude)))));
                channelPartnerEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Longitude)))));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.Source,
                        new ODataPropertyDefaultImpl(Constants.Source, hashtable.get(Constants.Source)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedAt,
                        new ODataPropertyDefaultImpl(Constants.CreatedAt, hashtable.get(Constants.CreatedAt)));

            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedOn,
                        new ODataPropertyDefaultImpl(Constants.CreatedOn, hashtable.get(Constants.CreatedOn)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.CreatedBy,
                        new ODataPropertyDefaultImpl(Constants.CreatedBy, hashtable.get(Constants.CreatedBy)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.RouteID,
                        new ODataPropertyDefaultImpl(Constants.RouteID, hashtable.get(Constants.RouteID)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.MobileNo,
                        new ODataPropertyDefaultImpl(Constants.MobileNo, hashtable.get(Constants.MobileNo)));
                channelPartnerEntity.getProperties().put(Constants.OutletName,
                        new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                channelPartnerEntity.getProperties().put(Constants.OwnerName,
                        new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                channelPartnerEntity.getProperties().put(Constants.RetailerProfile,
                        new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                channelPartnerEntity.getProperties().put(Constants.Group2,
                        new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                channelPartnerEntity.getProperties().put(Constants.PAN,
                        new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                channelPartnerEntity.getProperties().put(Constants.VATNo,
                        new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                channelPartnerEntity.getProperties().put(Constants.EmailID,
                        new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                channelPartnerEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
                channelPartnerEntity.getProperties().put(Constants.Landmark,
                        new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                channelPartnerEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                channelPartnerEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                channelPartnerEntity.getProperties().put(Constants.ParentID,
                        new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
                channelPartnerEntity.getProperties().put(Constants.ParentTypeID,
                        new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                channelPartnerEntity.getProperties().put(Constants.ParentName,
                        new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                channelPartnerEntity.getProperties().put(Constants.StateID,
                        new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                channelPartnerEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                channelPartnerEntity.getProperties().put(Constants.CityID,
                        new ODataPropertyDefaultImpl(Constants.CityID, hashtable.get(Constants.CityID)));
                channelPartnerEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                channelPartnerEntity.getProperties().put(Constants.DistrictID,
                        new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                channelPartnerEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
            /*    channelPartnerEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/

                channelPartnerEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
                channelPartnerEntity.getProperties().put(Constants.ApprvlStatusID,
                        new ODataPropertyDefaultImpl(Constants.ApprvlStatusID, hashtable.get(Constants.ApprvlStatusID)));

                channelPartnerEntity.getProperties().put(Constants.CPUID,
                        new ODataPropertyDefaultImpl(Constants.CPUID, hashtable.get(Constants.CPUID)));
                channelPartnerEntity.getProperties().put(Constants.WeeklyOff,
                        new ODataPropertyDefaultImpl(Constants.WeeklyOff, hashtable.get(Constants.WeeklyOff)));
                channelPartnerEntity.getProperties().put(Constants.Tax1,
                        new ODataPropertyDefaultImpl(Constants.Tax1, hashtable.get(Constants.Tax1)));
                channelPartnerEntity.getProperties().put(Constants.TaxRegStatus,
                        new ODataPropertyDefaultImpl(Constants.TaxRegStatus, hashtable.get(Constants.TaxRegStatus)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.OutletSizeID,
                        new ODataPropertyDefaultImpl(Constants.OutletSizeID, hashtable.get(Constants.OutletSizeID)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                channelPartnerEntity.getProperties().put(Constants.OutletSizeDesc,
                        new ODataPropertyDefaultImpl(Constants.OutletSizeDesc, hashtable.get(Constants.OutletSizeDesc)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.OutletShapeId,
                        new ODataPropertyDefaultImpl(Constants.OutletShapeId, hashtable.get(Constants.OutletShapeId)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.OutletShapeDesc,
                        new ODataPropertyDefaultImpl(Constants.OutletShapeDesc, hashtable.get(Constants.OutletShapeDesc)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.NoOfEmployee,
                        new ODataPropertyDefaultImpl(Constants.NoOfEmployee, hashtable.get(Constants.NoOfEmployee)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.IsHomeDeliveryAvl,
                        new ODataPropertyDefaultImpl(Constants.IsHomeDeliveryAvl, hashtable.get(Constants.IsHomeDeliveryAvl)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.IsPhOrderAvl,
                        new ODataPropertyDefaultImpl(Constants.IsPhOrderAvl, hashtable.get(Constants.IsPhOrderAvl)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.NoOfCounters,
                        new ODataPropertyDefaultImpl(Constants.NoOfCounters, hashtable.get(Constants.NoOfCounters)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.OutletLocId,
                        new ODataPropertyDefaultImpl(Constants.OutletLocId, hashtable.get(Constants.OutletLocId)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.OutletLocDesc,
                        new ODataPropertyDefaultImpl(Constants.OutletLocDesc, hashtable.get(Constants.OutletLocDesc)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.IsEduInstNrby,
                        new ODataPropertyDefaultImpl(Constants.IsEduInstNrby, hashtable.get(Constants.IsEduInstNrby)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.IsHsptlNearBy,
                        new ODataPropertyDefaultImpl(Constants.IsHsptlNearBy, hashtable.get(Constants.IsHsptlNearBy)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.NoOfWindowDisp,
                        new ODataPropertyDefaultImpl(Constants.NoOfWindowDisp, hashtable.get(Constants.NoOfWindowDisp)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.IsSmartPhAvl,
                        new ODataPropertyDefaultImpl(Constants.IsSmartPhAvl, hashtable.get(Constants.IsSmartPhAvl)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                channelPartnerEntity.getProperties().put(Constants.IsCompBillAvl,
                        new ODataPropertyDefaultImpl(Constants.IsCompBillAvl, hashtable.get(Constants.IsCompBillAvl)));
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.OpeningTime) != null) {
                    channelPartnerEntity.getProperties().put(Constants.OpeningTime,
                            new ODataPropertyDefaultImpl(Constants.OpeningTime, hashtable.get(Constants.OpeningTime)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.ClosingTime) != null) {
                    channelPartnerEntity.getProperties().put(Constants.ClosingTime,
                            new ODataPropertyDefaultImpl(Constants.ClosingTime, hashtable.get(Constants.ClosingTime)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.LunchTime) != null) {
                    channelPartnerEntity.getProperties().put(Constants.LunchTime,
                            new ODataPropertyDefaultImpl(Constants.LunchTime, hashtable.get(Constants.LunchTime)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            channelPartnerEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
            if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                channelPartnerEntity.setEtag(hashtable.get(Constants.Etag));
            }

            try {
                if (hashtable.get(Constants.PartnerMgrGUID) != null && !hashtable.get(Constants.PartnerMgrGUID).equalsIgnoreCase("")) {
                    channelPartnerEntity.getProperties().put(Constants.PartnerMgrGUID,
                            new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.PartnerMgrGUID))));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            String contentId = "1";
            ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
            // Create change set
            ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
            batchItem.setResourcePath(hashtable.get(Constants.SetResourcePath));
            batchItem.setMode(Mode.Update);
            batchItem.setContentID(contentId);
            batchItem.setPayload(channelPartnerEntity);
            changeSetItem.add(batchItem);
            String cpDMSDivDetgry = Constants.CPDMSDivisions + "?$filter=" + Constants.CPGUID + " eq guid'" + hashtable.get(Constants.CPGUID) + "' ";
            List<ODataEntity> entities = null;

            try {
                entities = OfflineManager.getEntities(cpDMSDivDetgry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }

            if (entities != null && entities.size() > 0) {
                for (ODataEntity cpDmsDivEntity : entities) {
                    cpDmsDivisionEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPDMSDivisionEntity);
                    cpDmsDivisionEntity.setResourcePath(Constants.CPDMSDivisions, Constants.CPDMSDivisions);
                    offlineStore.allocateProperties(cpDmsDivisionEntity, ODataStore.PropMode.Keys);
                    offlineStore.allocateNavigationProperties(cpDmsDivisionEntity);
                    SetResourcePath = "";
                    cpDmsDivisionEntity = getCPDMSDivEntity(cpDMSDivDetgry, hashtable.get(Constants.CPGUID), cpDmsDivEntity, hashtable);
                    if (cpDmsDivisionEntity != null) {
                        ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                        // Create change set
                        cpDmsDivBatchItem.setResourcePath(SetResourcePath);
                        cpDmsDivBatchItem.setMode(Mode.Update);
                        cpDmsDivBatchItem.setContentID("2");
                        if (hashtable.get(Constants.IsLatLongUpdate).equalsIgnoreCase("")) {
                            cpDmsDivBatchItem.setPayload(cpDmsDivisionEntity);
                        } else {
                            cpDmsDivBatchItem.setPayload(cpDmsDivEntity);
                        }
                        changeSetItem.add(cpDmsDivBatchItem);
                    }
                }
            }


            ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
            requestParamBatch.add(changeSetItem);
            try {
                offlineStore.executeRequest(requestParamBatch);
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void updateCPMarketBatch(Hashtable<String, String> hashtable, ArrayList<HashMap<String, String>> hashtableArrayList, OnlineODataInterface onlineODataInterface) throws OnlineODataStoreException {
        ODataEntity cpMArketEntity = null, cpBussinessEntity = null, competitorSalesEntity = null;
        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
        OnlineODataStore store = openListener.getStore();

        if (store != null) {
            try {
                cpMArketEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPMarketEntity);
//            cpMArketEntity.setResourcePath(Constants.CPMarketSet, Constants.CPMarketSet);
                store.allocateProperties(cpMArketEntity, ODataStore.PropMode.Keys);
                store.allocateNavigationProperties(cpMArketEntity);

                try {
                    cpMArketEntity.getProperties().put(Constants.CPMKTGUID, new ODataPropertyDefaultImpl(Constants.CPMKTGUID, ODataGuidDefaultImpl.initWithString36(hashtable.get(Constants.CPMKTGUID))));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    cpMArketEntity.getProperties().put(Constants.CPGUID, new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                cpMArketEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));

//            cpMArketEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    cpMArketEntity.setEtag(hashtable.get(Constants.Etag));
                }

                String contentId = "1";
                ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
                // Create change set
                ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
                batchItem.setResourcePath(hashtable.get(Constants.SetResourcePath));
                batchItem.setMode(Mode.Update);
                batchItem.setContentID(contentId);
                batchItem.setPayload(cpMArketEntity);
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put("accept", "application/atom+xml");
                createHeaders.put("content-type", "application/atom+xml");
                batchItem.setOptions(createHeaders);
                changeSetItem.add(batchItem);


                String competitorgry = Constants.CompetitorSales + "?$filter=" + Constants.CPMKTGUID + " eq guid'" + hashtable.get(Constants.CPMKTGUID) + "'";
                List<ODataEntity> entities1 = null;

                try {
                    entities1 = OfflineManager.getEntities(competitorgry);
                } catch (OfflineODataStoreException e) {
                    e.printStackTrace();
                }
                if (entities1 != null && entities1.size() > 0) {
                    for (int i = 0; i < entities1.size(); i++) {
                        ODataEntity cpDmsDivEntity = entities1.get(i);
                        competitorSalesEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CompetitorSaleEntity);
                        competitorSalesEntity.setResourcePath(Constants.CompetitorSales, Constants.CompetitorSales);
                        store.allocateProperties(competitorSalesEntity, ODataStore.PropMode.Keys);
                        store.allocateNavigationProperties(competitorSalesEntity);
                        SetResourcePath = "";
                        competitorSalesEntity = getCompetitorEntity(competitorgry, hashtable.get(Constants.CPMKTGUID), cpDmsDivEntity);
                        if (competitorSalesEntity != null) {
                            ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                            // Create change set
                            cpDmsDivBatchItem.setResourcePath(SetResourcePath);
                            cpDmsDivBatchItem.setMode(Mode.Update);
                            cpDmsDivBatchItem.setContentID("2");
                            cpDmsDivBatchItem.setPayload(competitorSalesEntity);
                            changeSetItem.add(cpDmsDivBatchItem);
                        }
                    }
                }

           /* String cpBussinessgry = Constants.CPBusinessSet + "?$filter=" + Constants.CPMKTGUID + " eq guid'" + hashtable.get(Constants.CPMKTGUID) + "'";
            List<ODataEntity> entities = null;

            try {
                entities = OfflineManager.getEntities(cpBussinessgry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }*/

//            if (entities != null && entities.size() > 0) {
                for (int i = 0; i < hashtableArrayList.size(); i++) {
                    HashMap<String, String> hashTable1 = hashtableArrayList.get(i);
//                    Hashtable alHashtable = hashtableArrayList.get(i);
                    cpBussinessEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.CPBusinessItemEntity);
                    cpBussinessEntity.setResourcePath(Constants.CPBusinessSet, Constants.CPBusinessSet);
                    store.allocateProperties(cpBussinessEntity, ODataStore.PropMode.Keys);
                    store.allocateNavigationProperties(cpBussinessEntity);
                    String resourcePath = Constants.CPBusinessSet + "(guid'" + hashTable1.get(Constants.CPBUSGUID) + "')";
                    cpBussinessEntity = getBussinessEntity(hashtable, hashTable1, resourcePath);
                    Mode mode = Mode.Update;
                   /* if (hashTable1.get(Constants.IS_NEW).equals("X")) {
                        resourcePath = Constants.CPBusinessSet;
                        mode = Mode.Create;
                    }*/
                    if (cpBussinessEntity != null) {
                        ODataRequestParamSingle cpDmsDivBatchItem = new ODataRequestParamSingleDefaultImpl();
                        // Create change set
                        cpDmsDivBatchItem.setResourcePath(resourcePath);
                        cpDmsDivBatchItem.setMode(mode);
                        cpDmsDivBatchItem.setContentID("3");
                        cpDmsDivBatchItem.setPayload(cpBussinessEntity);
                        cpDmsDivBatchItem.setOptions(createHeaders);
                        changeSetItem.add(cpDmsDivBatchItem);
                    }
                }
//            }


                ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
                requestParamBatch.add(changeSetItem);
                try {
                    Bundle bundle = new Bundle();
                    bundle.putString(Constants.BUNDLE_RESOURCE_PATH, Constants.CPMarketSet);
                    OnlineRequestListeners listener = new OnlineRequestListeners(onlineODataInterface, bundle);
                    store.scheduleRequest(requestParamBatch, listener);
              /*  offlineStore.scheduleRequest(requestParamBatch, new OfflineRequestListener(Operation.Update.getValue(), new UIListener() {
                    @Override
                    public void onRequestError(int i, Exception e) {
                        e.printStackTrace();
                        Log.d(TAG, "onRequestError: "+e.getMessage());
                    }

                    @Override
                    public void onRequestSuccess(int i, String s) throws ODataException, OfflineODataStoreException {
                        Log.d(TAG, "onRequestSuccess: ");
                    }
                }, Constants.ChannelPartners));*/
                } catch (Exception e) {
                    throw new OfflineODataStoreException(e);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static ArrayList<CPBusinessSet> getCPBussinessList(String qry) {

        //Check if the offline oData store is initialized
        boolean check = false;
        ArrayList<CPBusinessSet> arrayList = new ArrayList<>();
        CPBusinessSet cpBusinessSet;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        cpBusinessSet = new CPBusinessSet();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AllBusinessDesc);
                        String desc = (String) property.getValue();
                        cpBusinessSet.setAllBusinessDesc(desc);
                        property = properties.get(Constants.AnnualTurnover);
                        BigDecimal anualTurnOver = (BigDecimal) property.getValue();
                        double doubleAnualTurnOver = 0;
                        if (anualTurnOver != null) {
                            doubleAnualTurnOver = anualTurnOver.doubleValue();
                        }
                        cpBusinessSet.setAnnualTurnover(doubleAnualTurnOver);
                        arrayList.add(cpBusinessSet);
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return arrayList;
    }

    public static ODataGuid getCPMarketGuid(String qry) {

        //Check if the offline oData store is initialized
        boolean check = false;
        ODataGuid marketGuid = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPMKTGUID);
                        marketGuid = (ODataGuid) property.getValue();
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return marketGuid;
    }

    public static boolean getCPMarketDetails(String qry) {

        //Check if the offline oData store is initialized
        boolean check = false;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        check = true;
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return check;
    }
}
